#!/usr/bin/env python3
"""
CSS Architecture Cleanup Script
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å—Ç–∏–ª–µ–π
"""

import re
import os
import shutil
from pathlib import Path

def create_backup():
    """–°–æ–∑–¥–∞–µ—Ç –±–µ–∫–∞–ø CSS —Ñ–∞–π–ª–æ–≤"""
    print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∫–∞–ø–∞...")
    backup_dir = Path("css_backup")
    
    if backup_dir.exists():
        shutil.rmtree(backup_dir)
    
    shutil.copytree("static/css", backup_dir / "static_css")
    shutil.copytree("templates", backup_dir / "templates")
    print(f"‚úÖ –ë–µ–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_dir}")

def remove_css_variables_from_html():
    """–£–¥–∞–ª—è–µ—Ç CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ HTML"""
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ HTML...")
    count = 0
    
    for html_file in Path("templates").rglob("*.html"):
        with open(html_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        original = content
        # –£–¥–∞–ª—è–µ–º :root –±–ª–æ–∫–∏
        content = re.sub(r':root\s*{[^}]*--[^}]*}', '', content, flags=re.DOTALL)
        # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ <style> –±–ª–æ–∫–∏  
        content = re.sub(r'<style>\s*</style>', '', content)
        
        if content != original:
            with open(html_file, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"  ‚úì {html_file}")
            count += 1
    
    print(f"üìä –û—á–∏—â–µ–Ω–æ {count} —Ñ–∞–π–ª–æ–≤")

def main():
    print("üöÄ CSS CLEANUP TOOL")
    response = input("‚ö†Ô∏è  –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª—ã? (y/N): ")
    if response.lower() in ['y', 'yes']:
        create_backup()
        remove_css_variables_from_html()
        print("‚úÖ –ì–æ—Ç–æ–≤–æ!")
    else:
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")

if __name__ == "__main__":
    main()
