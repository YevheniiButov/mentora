#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ DigiD —Ñ–æ—Ä–º–∞—Ç
–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ DigiD –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""

import os
import sys
import logging
import random
from datetime import datetime, timezone
from werkzeug.security import generate_password_hash

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import create_app
from models import db, User
from config import get_config
from sqlalchemy import text


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('scripts/migrate_to_digid.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)


def generate_mock_bsn():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ BSN –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    # BSN –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 9 —Ü–∏—Ñ—Ä –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—É 11-proef
    while True:
        bsn = ''.join([str(random.randint(0, 9)) for _ in range(9)])
        if validate_bsn(bsn):
            return bsn


def validate_bsn(bsn):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è BSN –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É 11-proef"""
    if len(bsn) != 9 or not bsn.isdigit():
        return False
    
    # –ê–ª–≥–æ—Ä–∏—Ç–º 11-proef –¥–ª—è BSN
    total = 0
    for i in range(9):
        digit = int(bsn[i])
        if i == 8:  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–∏—Ñ—Ä–∞
            total -= digit
        else:
            total += digit * (9 - i)
    
    return total % 11 == 0


def generate_digid_username(first_name, last_name, existing_usernames):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ DigiD username"""
    base_username = f"{first_name.lower()}.{last_name.lower()}".replace(' ', '')
    
    if base_username not in existing_usernames:
        return base_username
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
    counter = 1
    while True:
        username = f"{base_username}{counter}"
        if username not in existing_usernames:
            return username
        counter += 1


def analyze_existing_users():
    """–ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    logger.info("üîç –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    users = User.query.all()
    analysis = {
        'total_users': len(users),
        'digid_users': 0,
        'regular_users': 0,
        'users_with_bsn': 0,
        'users_without_bsn': 0,
        'users_with_digid_username': 0,
        'users_without_digid_username': 0,
        'migratable_users': [],
        'already_migrated': []
    }
    
    existing_bsns = set()
    existing_digid_usernames = set()
    
    for user in users:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∂–µ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω
        if user.bsn and user.digid_username and user.digid_verified:
            analysis['digid_users'] += 1
            analysis['already_migrated'].append(user)
            existing_bsns.add(user.bsn)
            existing_digid_usernames.add(user.digid_username)
        else:
            analysis['regular_users'] += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ BSN
            if user.bsn:
                analysis['users_with_bsn'] += 1
                existing_bsns.add(user.bsn)
            else:
                analysis['users_without_bsn'] += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ digid_username
            if user.digid_username:
                analysis['users_with_digid_username'] += 1
                existing_digid_usernames.add(user.digid_username)
            else:
                analysis['users_without_digid_username'] += 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
            analysis['migratable_users'].append({
                'user': user,
                'needs_bsn': not user.bsn,
                'needs_digid_username': not user.digid_username,
                'needs_digid_verification': not user.digid_verified
            })
    
    return analysis, existing_bsns, existing_digid_usernames


def migrate_user(user_data, existing_bsns, existing_digid_usernames):
    """–ú–∏–≥—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = user_data['user']
    logger.info(f"üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º BSN –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if user_data['needs_bsn']:
            while True:
                bsn = generate_mock_bsn()
                if bsn not in existing_bsns:
                    user.bsn = bsn
                    existing_bsns.add(bsn)
                    logger.info(f"   ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω BSN: {bsn}")
                    break
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º digid_username –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if user_data['needs_digid_username']:
            digid_username = generate_digid_username(
                user.first_name or 'user',
                user.last_name or 'unknown',
                existing_digid_usernames
            )
            user.digid_username = digid_username
            existing_digid_usernames.add(digid_username)
            logger.info(f"   ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω DigiD username: {digid_username}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ DigiD
        if user_data['needs_digid_verification']:
            user.digid_verified = True
            user.created_via_digid = False  # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            logger.info(f"   ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ñ–ª–∞–≥–∏ DigiD")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º timestamp
        user.updated_at = datetime.now(timezone.utc)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.session.commit()
        
        logger.info(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} —É—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω")
        return True
        
    except Exception as e:
        db.session.rollback()
        logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}: {str(e)}")
        return False


def migrate_all_users():
    """–ú–∏–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    logger.info("üöÄ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ DigiD —Ñ–æ—Ä–º–∞—Ç...")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    analysis, existing_bsns, existing_digid_usernames = analyze_existing_users()
    
    # –í—ã–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑
    logger.info(f"\nüìä –ê–ù–ê–õ–ò–ó –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:")
    logger.info(f"   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {analysis['total_users']}")
    logger.info(f"   –£–∂–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã: {analysis['digid_users']}")
    logger.info(f"   –¢—Ä–µ–±—É—é—Ç –º–∏–≥—Ä–∞—Ü–∏–∏: {analysis['regular_users']}")
    logger.info(f"   –° BSN: {analysis['users_with_bsn']}")
    logger.info(f"   –ë–µ–∑ BSN: {analysis['users_without_bsn']}")
    logger.info(f"   –° DigiD username: {analysis['users_with_digid_username']}")
    logger.info(f"   –ë–µ–∑ DigiD username: {analysis['users_without_digid_username']}")
    
    if not analysis['migratable_users']:
        logger.info("‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return True
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
    logger.info(f"\nüîÑ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –î–õ–Ø –ú–ò–ì–†–ê–¶–ò–ò:")
    for i, user_data in enumerate(analysis['migratable_users'], 1):
        user = user_data['user']
        needs = []
        if user_data['needs_bsn']:
            needs.append("BSN")
        if user_data['needs_digid_username']:
            needs.append("DigiD username")
        if user_data['needs_digid_verification']:
            needs.append("DigiD —Ñ–ª–∞–≥–∏")
        
        logger.info(f"   {i}. {user.username} ({user.email}) - –Ω—É–∂–Ω–æ: {', '.join(needs)}")
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    response = input(f"\n‚ùì –ú–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å {len(analysis['migratable_users'])} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π? (y/N): ")
    if response.lower() != 'y':
        logger.info("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return False
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    successful_migrations = 0
    failed_migrations = 0
    
    for user_data in analysis['migratable_users']:
        if migrate_user(user_data, existing_bsns, existing_digid_usernames):
            successful_migrations += 1
        else:
            failed_migrations += 1
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info(f"\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ò–ì–†–ê–¶–ò–ò:")
    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {successful_migrations}")
    logger.info(f"‚ùå –û—à–∏–±–æ–∫: {failed_migrations}")
    logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {len(analysis['already_migrated'])}")
    
    return successful_migrations > 0


def create_migration_report():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    logger.info("üìã –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –º–∏–≥—Ä–∞—Ü–∏–∏...")
    
    users = User.query.all()
    report = {
        'total_users': len(users),
        'digid_users': 0,
        'regular_users': 0,
        'users_by_role': {},
        'migration_status': []
    }
    
    for user in users:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ —Ä–æ–ª—è–º
        role = user.role or 'unknown'
        if role not in report['users_by_role']:
            report['users_by_role'][role] = 0
        report['users_by_role'][role] += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏
        if user.bsn and user.digid_username and user.digid_verified:
            report['digid_users'] += 1
            status = 'migrated'
        else:
            report['regular_users'] += 1
            status = 'needs_migration'
        
        report['migration_status'].append({
            'username': user.username,
            'email': user.email,
            'role': user.role,
            'bsn': user.bsn,
            'digid_username': user.digid_username,
            'digid_verified': user.digid_verified,
            'status': status
        })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
    report_file = 'scripts/migration_report.txt'
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write("–û–¢–ß–ï–¢ –û –ú–ò–ì–†–ê–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –í DIGID\n")
        f.write("=" * 50 + "\n\n")
        f.write(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {report['total_users']}\n")
        f.write(f"–ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ DigiD: {report['digid_users']}\n")
        f.write(f"–¢—Ä–µ–±—É—é—Ç –º–∏–≥—Ä–∞—Ü–∏–∏: {report['regular_users']}\n\n")
        
        f.write("–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –ü–û –†–û–õ–Ø–ú:\n")
        for role, count in report['users_by_role'].items():
            f.write(f"  {role}: {count}\n")
        f.write("\n")
        
        f.write("–î–ï–¢–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–°:\n")
        for user_status in report['migration_status']:
            f.write(f"  {user_status['username']} ({user_status['email']}) - {user_status['status']}\n")
            if user_status['status'] == 'needs_migration':
                missing = []
                if not user_status['bsn']:
                    missing.append('BSN')
                if not user_status['digid_username']:
                    missing.append('DigiD username')
                if not user_status['digid_verified']:
                    missing.append('DigiD verification')
                f.write(f"    –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {', '.join(missing)}\n")
    
    logger.info(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {report_file}")
    return report


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = create_app()
        
        with app.app_context():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            try:
                with db.engine.connect() as conn:
                    conn.execute(text('SELECT 1'))
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
                return False
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
            success = migrate_all_users()
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
            report = create_migration_report()
            
            if success:
                logger.info("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                logger.warning("‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
                return False
                
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return False


if __name__ == '__main__':
    print("üîß –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ DigiD —Ñ–æ—Ä–º–∞—Ç")
    print("=" * 50)
    
    success = main()
    
    if success:
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("üìÑ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ scripts/migration_report.txt")
    else:
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª–µ scripts/migrate_to_digid.log")
    
    sys.exit(0 if success else 1) 