#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö —Å IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import app, db
from models import Question, QuestionCategory, IRTParameters, BIGDomain
from datetime import datetime, timezone
import json

def clear_all_questions():
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üóëÔ∏è –û–ß–ò–°–¢–ö–ê –í–°–ï–• –í–û–ü–†–û–°–û–í")
    print("=" * 40)
    
    with app.app_context():
        try:
            # –£–¥–∞–ª—è–µ–º IRT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            irt_count = IRTParameters.query.delete()
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {irt_count}")
            
            # –£–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
            questions_count = Question.query.delete()
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {questions_count}")
            
            # –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
            categories_count = QuestionCategory.query.delete()
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {categories_count}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            db.session.commit()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
            raise

def create_categories():
    """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    
    print("\nüìÇ –°–û–ó–î–ê–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ô")
    print("=" * 40)
    
    with app.app_context():
        categories = [
            "–¢–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è",
            "–•–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è", 
            "–û—Ä—Ç–æ–ø–µ–¥–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è",
            "–û—Ä—Ç–æ–¥–æ–Ω—Ç–∏—è",
            "–î–µ—Ç—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è",
            "–≠—Ç–∏–∫–∞ –∏ –ø—Ä–∞–≤–æ",
            "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
            "–ù–µ–æ—Ç–ª–æ–∂–Ω–∞—è –ø–æ–º–æ—â—å"
        ]
        
        created_categories = {}
        
        for cat_name in categories:
            category = QuestionCategory(name=cat_name)
            db.session.add(category)
            db.session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID
            created_categories[cat_name] = category.id
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {cat_name} (ID: {category.id})")
        
        db.session.commit()
        return created_categories

def get_domain_mapping():
    """–ü–æ–ª—É—á–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –¥–æ–º–µ–Ω–æ–≤ BIG"""
    
    with app.app_context():
        domains = BIGDomain.query.all()
        domain_mapping = {}
        
        for domain in domains:
            domain_mapping[domain.code] = domain.id
            domain_mapping[domain.name] = domain.id
        
        return domain_mapping

def create_sample_questions_with_irt():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤ —Å IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    
    print("\nüìù –°–û–ó–î–ê–ù–ò–ï –í–û–ü–†–û–°–û–í –° IRT –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò")
    print("=" * 40)
    
    with app.app_context():
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = {cat.name: cat.id for cat in QuestionCategory.query.all()}
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω—ã
        domains = get_domain_mapping()
        
        # –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤ —Å IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        questions_data = [
            {
                "text": "–≠—Ç–∏—á–µ—Å–∫–∏–µ –¥–∏–ª–µ–º–º—ã - –ê–≤—Ç–æ–Ω–æ–º–∏—è vs. –±–ª–∞–≥–æ–¥–µ—è–Ω–∏–µ. 70-–ª–µ—Ç–Ω–∏–π –ø–∞—Ü–∏–µ–Ω—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º–∏ –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏–∏ –∏–Ω—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑—É–±–∞. –ü–æ–Ω–∏–º–∞–µ—Ç —Ä–∏—Å–∫–∏ —Å–µ–ø—Å–∏—Å–∞, –Ω–æ '–Ω–µ —Ö–æ—á–µ—Ç —Ç–µ—Ä—è—Ç—å –±–æ–ª—å—à–µ –∑—É–±–æ–≤'. –°–µ–º—å—è –Ω–∞—Å—Ç–∞–∏–≤–∞–µ—Ç –Ω–∞ –ª–µ—á–µ–Ω–∏–∏. –ü–∞—Ü–∏–µ–Ω—Ç –ø—Å–∏—Ö–∏—á–µ—Å–∫–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–µ–Ω, –Ω–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω –∏–∑-–∑–∞ –ø–æ—Ç–µ—Ä–∏ –∑—É–±–æ–≤. –ö–∞–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —ç—Ç–æ —ç—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ –º–µ–∂–¥—É –∞–≤—Ç–æ–Ω–æ–º–∏–µ–π –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º –±–ª–∞–≥–æ–¥–µ—è–Ω–∏–µ–º?",
                "options": json.dumps([
                    "–£–≤–∞–∂–∞—Ç—å –∞–≤—Ç–æ–Ω–æ–º–∏—é –ø–∞—Ü–∏–µ–Ω—Ç–∞ - —Å–æ–±–ª—é–¥–∞—Ç—å –æ—Ç–∫–∞–∑ –æ—Ç –ª–µ—á–µ–Ω–∏—è",
                    "–û—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–Ω–æ–º–∏—é –∏–∑-–∑–∞ —Å–µ—Ä—å–µ–∑–Ω–æ–≥–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Ä–∏—Å–∫–∞", 
                    "–°–æ–≥–ª–∞—Å–∏–µ —Å–µ–º—å–∏ –º–æ–∂–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å –æ—Ç–∫–∞–∑ –ø–∞—Ü–∏–µ–Ω—Ç–∞",
                    "–ü—Å–∏—Ö–∏–∞—Ç—Ä–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏",
                    "–ö–æ–º–ø—Ä–æ–º–∏—Å—Å–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ —Å –º–µ–Ω–µ–µ –∏–Ω–≤–∞–∑–∏–≤–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º"
                ]),
                "correct_answer": "–£–≤–∞–∂–∞—Ç—å –∞–≤—Ç–æ–Ω–æ–º–∏—é –ø–∞—Ü–∏–µ–Ω—Ç–∞ - —Å–æ–±–ª—é–¥–∞—Ç—å –æ—Ç–∫–∞–∑ –æ—Ç –ª–µ—á–µ–Ω–∏—è",
                "explanation": "–ü—Ä–∏–Ω—Ü–∏–ø –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —ç—Ç–∏–∫–∏ –∞–≤—Ç–æ–Ω–æ–º–∏–∏ —Ç—Ä–µ–±—É–µ—Ç —É–≤–∞–∂–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏–π –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞, –¥–∞–∂–µ –∫–æ–≥–¥–∞ –æ–Ω–∏ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–∑–Ω–æ –Ω–µ—Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω—ã. –ü–∞—Ü–∏–µ–Ω—Ç –ø–æ–Ω–∏–º–∞–µ—Ç –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.",
                "category_id": categories.get("–≠—Ç–∏–∫–∞ –∏ –ø—Ä–∞–≤–æ", 1),
                "big_domain_id": domains.get("ETHIEK", domains.get("–≠—Ç–∏–∫–∞", 1)),
                "difficulty_level": 4,
                "question_type": "clinical_case",
                "clinical_context": "–≠—Ç–∏—á–µ—Å–∫–∞—è –¥–∏–ª–µ–º–º–∞ —Å –∞–≤—Ç–æ–Ω–æ–º–∏–µ–π –ø–∞—Ü–∏–µ–Ω—Ç–∞",
                "irt_params": {
                    "difficulty": 0.8,
                    "discrimination": 1.9,
                    "guessing": 0.17
                }
            },
            {
                "text": "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞—Ä–∏–µ—Å–∞. –£ –ø–∞—Ü–∏–µ–Ω—Ç–∞ 25 –ª–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ç–µ–º–Ω–æ–µ –ø—è—Ç–Ω–æ –Ω–∞ –∂–µ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –ø–µ—Ä–≤–æ–≥–æ –º–æ–ª—è—Ä–∞. –ü—Ä–∏ –∑–æ–Ω–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å —Ç–≤–µ—Ä–¥–∞—è, –±–µ–∑–±–æ–ª–µ–∑–Ω–µ–Ω–Ω–∞—è. –ö–∞–∫–æ–π –¥–∏–∞–≥–Ω–æ–∑ –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–µ–Ω?",
                "options": json.dumps([
                    "–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–π –∫–∞—Ä–∏–µ—Å (caries superficialis)",
                    "–°—Ä–µ–¥–Ω–∏–π –∫–∞—Ä–∏–µ—Å (caries media)",
                    "–ì–ª—É–±–æ–∫–∏–π –∫–∞—Ä–∏–µ—Å (caries profunda)",
                    "–ü–∏–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∏—Å—Å—É—Ä–Ω—ã–π –∫–∞—Ä–∏–µ—Å",
                    "–ó–¥–æ—Ä–æ–≤—ã–π –∑—É–± —Å –ø–∏–≥–º–µ–Ω—Ç–∞—Ü–∏–µ–π"
                ]),
                "correct_answer": "–ü–∏–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∏—Å—Å—É—Ä–Ω—ã–π –∫–∞—Ä–∏–µ—Å",
                "explanation": "–¢–µ–º–Ω–æ–µ –ø—è—Ç–Ω–æ —Å —Ç–≤–µ—Ä–¥–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å—é –ø—Ä–∏ –∑–æ–Ω–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ –¥–ª—è –ø–∏–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∏—Å—Å—É—Ä–Ω–æ–≥–æ –∫–∞—Ä–∏–µ—Å–∞. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–æ–ª–∏ –∏ —Ç–≤–µ—Ä–¥–æ—Å—Ç—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å.",
                "category_id": categories.get("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", 1),
                "big_domain_id": domains.get("THER", domains.get("–¢–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è", 1)),
                "difficulty_level": 3,
                "question_type": "diagnostic",
                "clinical_context": "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞—Ä–∏–µ—Å–∞",
                "irt_params": {
                    "difficulty": 0.3,
                    "discrimination": 1.2,
                    "guessing": 0.2
                }
            },
            {
                "text": "–ù–µ–æ—Ç–ª–æ–∂–Ω–∞—è –ø–æ–º–æ—â—å. –ü–∞—Ü–∏–µ–Ω—Ç 35 –ª–µ—Ç –æ–±—Ä–∞—Ç–∏–ª—Å—è —Å –∂–∞–ª–æ–±–∞–º–∏ –Ω–∞ —Å–∏–ª—å–Ω—É—é –±–æ–ª—å –≤ –æ–±–ª–∞—Å—Ç–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ –ø—Ä–∞–≤–æ–≥–æ –∫–ª—ã–∫–∞, —É—Å–∏–ª–∏–≤–∞—é—â—É—é—Å—è –ø—Ä–∏ –Ω–∞–∫—É—Å—ã–≤–∞–Ω–∏–∏. –ë–æ–ª—å –∏—Ä—Ä–∞–¥–∏–∏—Ä—É–µ—Ç –≤ –≤–∏—Å–æ–∫. –ü—Ä–∏ –æ—Å–º–æ—Ç—Ä–µ: –∑—É–± –∏–Ω—Ç–∞–∫—Ç–Ω—ã–π, –ø–µ—Ä–∫—É—Å—Å–∏—è –±–æ–ª–µ–∑–Ω–µ–Ω–Ω–∞—è, —Å–ª–∏–∑–∏—Å—Ç–∞—è –≤ –ø—Ä–æ–µ–∫—Ü–∏–∏ –∫–æ—Ä–Ω—è –æ—Ç–µ—á–Ω–∞. –ö–∞–∫–æ–π –¥–∏–∞–≥–Ω–æ–∑ –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–µ–Ω?",
                "options": json.dumps([
                    "–û—Å—Ç—Ä—ã–π –ø—É–ª—å–ø–∏—Ç",
                    "–û—Å—Ç—Ä—ã–π –ø–µ—Ä–∏–æ–¥–æ–Ω—Ç–∏—Ç",
                    "–û—Å—Ç—Ä—ã–π –ø–µ—Ä–∏–æ—Å—Ç–∏—Ç",
                    "–ù–µ–≤—Ä–∞–ª–≥–∏—è —Ç—Ä–æ–π–Ω–∏—á–Ω–æ–≥–æ –Ω–µ—Ä–≤–∞",
                    "–°–∏–Ω—É—Å–∏—Ç"
                ]),
                "correct_answer": "–û—Å—Ç—Ä—ã–π –ø–µ—Ä–∏–æ–¥–æ–Ω—Ç–∏—Ç",
                "explanation": "–ö–ª–∏–Ω–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∏–Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–∞ –¥–ª—è –æ—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–∏–æ–¥–æ–Ω—Ç–∏—Ç–∞: –±–æ–ª—å –ø—Ä–∏ –Ω–∞–∫—É—Å—ã–≤–∞–Ω–∏–∏, –±–æ–ª–µ–∑–Ω–µ–Ω–Ω–∞—è –ø–µ—Ä–∫—É—Å—Å–∏—è, –æ—Ç–µ–∫ —Å–ª–∏–∑–∏—Å—Ç–æ–π –≤ –ø—Ä–æ–µ–∫—Ü–∏–∏ –∫–æ—Ä–Ω—è.",
                "category_id": categories.get("–ù–µ–æ—Ç–ª–æ–∂–Ω–∞—è –ø–æ–º–æ—â—å", 1),
                "big_domain_id": domains.get("THER", domains.get("–¢–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è", 1)),
                "difficulty_level": 4,
                "question_type": "emergency",
                "clinical_context": "–ù–µ–æ—Ç–ª–æ–∂–Ω–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å",
                "irt_params": {
                    "difficulty": 0.6,
                    "discrimination": 1.5,
                    "guessing": 0.2
                }
            }
        ]
        
        created_questions = []
        
        for q_data in questions_data:
            # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
            question = Question(
                text=q_data["text"],
                options=q_data["options"],
                correct_answer=q_data["correct_answer"],
                explanation=q_data["explanation"],
                category_id=q_data["category_id"],
                big_domain_id=q_data["big_domain_id"],
                difficulty_level=q_data["difficulty_level"],
                question_type=q_data["question_type"],
                clinical_context=q_data["clinical_context"]
            )
            
            db.session.add(question)
            db.session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –≤–æ–ø—Ä–æ—Å–∞
            
            # –°–æ–∑–¥–∞–µ–º IRT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            irt_params = q_data["irt_params"]
            irt = IRTParameters(
                question_id=question.id,
                difficulty=irt_params["difficulty"],
                discrimination=irt_params["discrimination"],
                guessing=irt_params["guessing"]
            )
            
            db.session.add(irt)
            created_questions.append(question.id)
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –≤–æ–ø—Ä–æ—Å ID {question.id}: {q_data['text'][:50]}...")
            print(f"   IRT: difficulty={irt_params['difficulty']}, discrimination={irt_params['discrimination']}, guessing={irt_params['guessing']}")
        
        db.session.commit()
        print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(created_questions)}")
        return created_questions

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üöÄ –ó–ê–ì–†–£–ó–ö–ê –ù–û–í–´–• –í–û–ü–†–û–°–û–í –° IRT –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò")
    print("=" * 50)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    response = input("‚ö†Ô∏è –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (–¥–∞/–Ω–µ—Ç): ")
    if response.lower() != '–¥–∞':
        print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    try:
        # 1. –û—á–∏—â–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
        clear_all_questions()
        
        # 2. –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        create_categories()
        
        # 3. –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        create_sample_questions_with_irt()
        
        print("\nüéâ –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("=" * 50)
        print("‚úÖ –í—Å–µ —Å—Ç–∞—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã —É–¥–∞–ª–µ–Ω—ã")
        print("‚úÖ –°–æ–∑–¥–∞–Ω—ã –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –≤–æ–ø—Ä–æ—Å—ã —Å IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
        print("‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")

if __name__ == '__main__':
    main() 