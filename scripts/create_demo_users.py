#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π DigiD
–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
"""

import os
import sys
import logging
from datetime import datetime, timezone
from werkzeug.security import generate_password_hash

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import create_app
from models import db, User
from config import get_config
from sqlalchemy import text


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('scripts/demo_users_creation.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)


# –î–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ DigiD
DEMO_USERS = [
    {
        'bsn': '123456789',
        'digid_username': 'jan.jansen',
        'first_name': 'Jan',
        'last_name': 'Jansen',
        'email': 'jan.jansen@demo.dental-academy.nl',
        'role': 'student',
        'digid_verified': True,
        'created_via_digid': True
    },
    {
        'bsn': '987654321',
        'digid_username': 'maria.devries',
        'first_name': 'Maria',
        'last_name': 'de Vries',
        'email': 'maria.devries@demo.dental-academy.nl',
        'role': 'docent',
        'digid_verified': True,
        'created_via_digid': True
    },
    {
        'bsn': '111222333',
        'digid_username': 'admin.user',
        'first_name': 'Admin',
        'last_name': 'User',
        'email': 'admin@demo.dental-academy.nl',
        'role': 'admin',
        'digid_verified': True,
        'created_via_digid': True
    }
]


def check_existing_users():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    existing_users = []
    for user_data in DEMO_USERS:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ BSN
        user_by_bsn = User.query.filter_by(bsn=user_data['bsn']).first()
        if user_by_bsn:
            existing_users.append({
                'bsn': user_data['bsn'],
                'username': user_by_bsn.username,
                'role': user_by_bsn.role,
                'exists': True
            })
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å BSN {user_data['bsn']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {user_by_bsn.username}")
            continue
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ email
        user_by_email = User.query.filter_by(email=user_data['email']).first()
        if user_by_email:
            existing_users.append({
                'email': user_data['email'],
                'username': user_by_email.username,
                'role': user_by_email.role,
                'exists': True
            })
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email {user_data['email']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {user_by_email.username}")
            continue
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ digid_username
        user_by_digid = User.query.filter_by(digid_username=user_data['digid_username']).first()
        if user_by_digid:
            existing_users.append({
                'digid_username': user_data['digid_username'],
                'username': user_by_digid.username,
                'role': user_by_digid.role,
                'exists': True
            })
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å DigiD username {user_data['digid_username']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {user_by_digid.username}")
            continue
    
    return existing_users


def create_demo_user(user_data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(
            username=user_data['digid_username'],
            email=user_data['email'],
            first_name=user_data['first_name'],
            last_name=user_data['last_name'],
            role=user_data['role'],
            bsn=user_data['bsn'],
            digid_username=user_data['digid_username'],
            digid_verified=user_data['digid_verified'],
            created_via_digid=user_data['created_via_digid'],
            is_active=True
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        user.password_hash = generate_password_hash('demo123456')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.session.add(user)
        db.session.commit()
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username} (BSN: {user.bsn}, –†–æ–ª—å: {user.role})")
        return user
        
    except Exception as e:
        db.session.rollback()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['digid_username']}: {str(e)}")
        raise


def create_all_demo_users():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    logger.info("üöÄ –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π DigiD...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    existing_users = check_existing_users()
    
    if existing_users:
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(existing_users)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        response = input("\n‚ùì –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ? (y/N): ")
        if response.lower() != 'y':
            logger.info("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    created_users = []
    failed_users = []
    
    for user_data in DEMO_USERS:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_user = User.query.filter(
                (User.bsn == user_data['bsn']) |
                (User.email == user_data['email']) |
                (User.digid_username == user_data['digid_username'])
            ).first()
            
            if existing_user:
                logger.warning(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {user_data['digid_username']} - —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                continue
            
            user = create_demo_user(user_data)
            created_users.append(user)
            
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['digid_username']}: {str(e)}")
            failed_users.append(user_data)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info(f"\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–û–ó–î–ê–ù–ò–Ø:")
    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: {len(created_users)}")
    logger.info(f"‚ùå –û—à–∏–±–æ–∫: {len(failed_users)}")
    logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {len(existing_users)}")
    
    if created_users:
        logger.info(f"\nüë• –°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
        for user in created_users:
            logger.info(f"   ‚Ä¢ {user.username} (BSN: {user.bsn}, –†–æ–ª—å: {user.role})")
    
    if failed_users:
        logger.error(f"\n‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏:")
        for user_data in failed_users:
            logger.error(f"   ‚Ä¢ {user_data['digid_username']} (BSN: {user_data['bsn']})")
    
    return len(created_users) > 0


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = create_app()
        
        with app.app_context():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            try:
                with db.engine.connect() as conn:
                    conn.execute(text('SELECT 1'))
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            success = create_all_demo_users()
            
            if success:
                logger.info("üéâ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                logger.warning("‚ö†Ô∏è –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
                return False
                
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return False


if __name__ == '__main__':
    print("üîß –°–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π DigiD")
    print("=" * 50)
    
    success = main()
    
    if success:
        print("\n‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö:")
        print("   ‚Ä¢ BSN: 123456789 | Jan Jansen | –°—Ç—É–¥–µ–Ω—Ç")
        print("   ‚Ä¢ BSN: 987654321 | Maria de Vries | –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å") 
        print("   ‚Ä¢ BSN: 111222333 | Admin User | –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        print("\nüîê –ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: demo123456")
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!")
    else:
        print("\n‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª–µ scripts/demo_users_creation.log")
    
    sys.exit(0 if success else 1) 