#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –∑–Ω–∞–Ω–∏–π –≤ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏
–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≤–æ–ø—Ä–æ—Å—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""
import sys
import os
import json
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import create_app
from extensions import db
from models import AssessmentCategory, AssessmentQuestion
from data.dental_assessment_questions import ASSESSMENT_QUESTIONS, create_assessment_categories

def init_dental_categories():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏"""
    app = create_app()
    with app.app_context():
        print("üìö –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏...")
        categories = create_assessment_categories()
        category_map = {}
        
        for category_data in categories:
            existing = AssessmentCategory.query.filter_by(slug=category_data['slug']).first()
            if not existing:
                category = AssessmentCategory(
                    name=category_data['name'],
                    slug=category_data['slug'],
                    description=category_data['description'],
                    weight=category_data['weight'],
                    min_questions=category_data['min_questions'],
                    max_questions=category_data['max_questions'],
                    color=category_data['color'],
                    icon=category_data['icon'],
                    is_dutch_specific=False  # –≠—Ç–æ –Ω–µ –Ω–∏–¥–µ—Ä–ª–∞–Ω–¥—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
                )
                db.session.add(category)
                db.session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_data['name']}")
                category_map[category_data['slug']] = category.id
            else:
                print(f"‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {category_data['name']}")
                category_map[category_data['slug']] = existing.id
        
        db.session.commit()
        print("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        return category_map

def init_dental_questions():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏"""
    app = create_app()
    with app.app_context():
        print("üìù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏...")
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category_map = init_dental_categories()
        
        question_count = 0
        for question_data in ASSESSMENT_QUESTIONS:
            category_slug = question_data['category']
            if category_slug not in category_map:
                print(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {category_slug}")
                continue
                
            category_id = category_map[category_slug]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å
            existing_question = AssessmentQuestion.query.filter_by(
                category_id=category_id,
                question_text=question_data['question']
            ).first()
            
            if not existing_question:
                question = AssessmentQuestion(
                    category_id=category_id,
                    question_text=question_data['question'],
                    question_type='multiple_choice',
                    options=json.dumps(question_data['options'], ensure_ascii=False),
                    correct_answer=question_data['correct_answer'],
                    explanation=question_data.get('explanation', ''),
                    difficulty_level=question_data.get('difficulty', 3),
                    time_limit=question_data.get('time_limit', 120),
                    points=question_data.get('points', 1),
                    related_modules=json.dumps(question_data.get('related_modules', [])),
                    is_active=True
                )
                db.session.add(question)
                question_count += 1
            else:
                print(f"‚ö†Ô∏è –í–æ–ø—Ä–æ—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {question_data['question'][:50]}...")
        
        db.session.commit()
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {question_count} –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")

def check_dental_questions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    app = create_app()
    with app.app_context():
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = AssessmentCategory.query.filter(
            AssessmentCategory.slug.in_(['knowledge_center', 'communication', 'preclinical_skills', 'clinical_cases', 'exam_preparation'])
        ).all()
        
        print(f"üìÇ –ù–∞–π–¥–µ–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏:")
        for category in categories:
            question_count = AssessmentQuestion.query.filter_by(category_id=category.id).count()
            print(f"  - {category.name}: {question_count} –≤–æ–ø—Ä–æ—Å–æ–≤")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_questions = AssessmentQuestion.query.join(AssessmentCategory).filter(
            AssessmentCategory.slug.in_(['knowledge_center', 'communication', 'preclinical_skills', 'clinical_cases', 'exam_preparation'])
        ).count()
        
        print(f"üìä –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏: {total_questions}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü¶∑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –∑–Ω–∞–Ω–∏–π –≤ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏")
    print("=" * 70)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≤–æ–ø—Ä–æ—Å—ã
        init_dental_questions()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        check_dental_questions()
        
        print("\nüéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 