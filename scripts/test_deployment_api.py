#!/usr/bin/env python3
"""
Test Deployment API
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤

Usage:
    python scripts/test_deployment_api.py
"""

import requests
import json
import time
from datetime import datetime

# Configuration
BASE_URL = "http://localhost:5000"
ADMIN_EMAIL = "admin@example.com"
ADMIN_PASSWORD = "admin123"

class DeploymentAPITester:
    def __init__(self, base_url, email, password):
        self.base_url = base_url
        self.email = email
        self.password = password
        self.session = requests.Session()
        self.csrf_token = None
        
    def login(self):
        """–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞"""
        print("üîê Logging in...")
        
        # –ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω
        response = self.session.get(f"{self.base_url}/auth/login")
        if response.status_code == 200:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º CSRF —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–æ—Ä–º—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
            self.csrf_token = "test_csrf_token_12345"
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
        login_data = {
            'email': self.email,
            'password': self.password,
            'csrf_token': self.csrf_token
        }
        
        response = self.session.post(
            f"{self.base_url}/auth/login",
            data=login_data,
            allow_redirects=True
        )
        
        if response.status_code == 200 or response.status_code == 302:
            print("‚úÖ Login successful")
            return True
        else:
            print(f"‚ùå Login failed: {response.status_code}")
            return False
    
    def test_health_check(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        print("\nüè• Testing health check...")
        
        response = self.session.get(f"{self.base_url}/api/deploy/health")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Health check passed: {data.get('message')}")
            return True
        else:
            print(f"‚ùå Health check failed: {response.status_code}")
            return False
    
    def test_create_backup(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        print("\nüíæ Testing backup creation...")
        
        backup_data = {
            'template_path': 'templates/test_template.html',
            'description': 'Test backup from API'
        }
        
        headers = {
            'Content-Type': 'application/json',
            'X-CSRF-Token': self.csrf_token
        }
        
        response = self.session.post(
            f"{self.base_url}/api/deploy/backup",
            json=backup_data,
            headers=headers
        )
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                print(f"‚úÖ Backup created: {data.get('data', {}).get('backup_id')}")
                return data.get('data', {}).get('backup_id')
            else:
                print(f"‚ùå Backup creation failed: {data.get('message')}")
                return None
        else:
            print(f"‚ùå Backup request failed: {response.status_code}")
            return None
    
    def test_generate_preview(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        print("\nüëÅÔ∏è Testing preview generation...")
        
        # –ü—Ä–æ—Å—Ç–æ–π HTML –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
        test_content = """
        <div class="test-container">
            <h1>Test Template</h1>
            <p>This is a test template for preview generation.</p>
            <div class="test-component">
                <span>Test component content</span>
            </div>
        </div>
        """
        
        preview_data = {
            'content': test_content,
            'template_name': 'test_preview'
        }
        
        headers = {
            'Content-Type': 'application/json',
            'X-CSRF-Token': self.csrf_token
        }
        
        response = self.session.post(
            f"{self.base_url}/api/deploy/preview",
            json=preview_data,
            headers=headers
        )
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                print(f"‚úÖ Preview generated: {data.get('data', {}).get('preview_url')}")
                return True
            else:
                print(f"‚ùå Preview generation failed: {data.get('message')}")
                return False
        else:
            print(f"‚ùå Preview request failed: {response.status_code}")
            return False
    
    def test_validate_template(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞"""
        print("\n‚úÖ Testing template validation...")
        
        # –ü—Ä–æ—Å—Ç–æ–π Jinja2 —à–∞–±–ª–æ–Ω –¥–ª—è —Ç–µ—Å—Ç–∞
        test_template = """
        {% extends "base.html" %}
        
        {% block content %}
        <div class="test-container">
            <h1>{{ title }}</h1>
            <p>{{ description }}</p>
            {% if items %}
            <ul>
                {% for item in items %}
                <li>{{ item.name }}</li>
                {% endfor %}
            </ul>
            {% endif %}
        </div>
        {% endblock %}
        """
        
        validate_data = {
            'content': test_template,
            'template_path': 'templates/test_template.html'
        }
        
        headers = {
            'Content-Type': 'application/json',
            'X-CSRF-Token': self.csrf_token
        }
        
        response = self.session.post(
            f"{self.base_url}/api/deploy/validate",
            json=validate_data,
            headers=headers
        )
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                validation_passed = data.get('data', {}).get('validation_passed', False)
                issues_count = data.get('data', {}).get('issues_count', 0)
                print(f"‚úÖ Validation completed: {'PASSED' if validation_passed else 'FAILED'} ({issues_count} issues)")
                return validation_passed
            else:
                print(f"‚ùå Validation failed: {data.get('message')}")
                return False
        else:
            print(f"‚ùå Validation request failed: {response.status_code}")
            return False
    
    def test_deploy_template(self):
        """–¢–µ—Å—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞"""
        print("\nüöÄ Testing template deployment...")
        
        # –ü—Ä–æ—Å—Ç–æ–π Jinja2 —à–∞–±–ª–æ–Ω –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
        deploy_template = """
        {% extends "base.html" %}
        
        {% block content %}
        <div class="deployed-container">
            <h1>Deployed Template</h1>
            <p>This template was deployed via API at {{ timestamp }}</p>
            <div class="deployment-info">
                <p>Deployed by: {{ user }}</p>
                <p>Description: {{ description }}</p>
            </div>
        </div>
        {% endblock %}
        """
        
        deploy_data = {
            'content': deploy_template,
            'target_path': 'templates/deployed_test.html',
            'description': 'Test deployment from API',
            'require_backup': True,
            'strict_validation': False
        }
        
        headers = {
            'Content-Type': 'application/json',
            'X-CSRF-Token': self.csrf_token
        }
        
        response = self.session.post(
            f"{self.base_url}/api/deploy/deploy",
            json=deploy_data,
            headers=headers
        )
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                deployment_id = data.get('data', {}).get('deployment_id')
                print(f"‚úÖ Template deployed: {deployment_id}")
                return deployment_id
            else:
                print(f"‚ùå Deployment failed: {data.get('message')}")
                return None
        else:
            print(f"‚ùå Deployment request failed: {response.status_code}")
            return None
    
    def test_get_backup_list(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
        print("\nüìã Testing backup list retrieval...")
        
        response = self.session.get(f"{self.base_url}/api/deploy/backups/test_template")
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                backups = data.get('data', {}).get('backups', [])
                print(f"‚úÖ Found {len(backups)} backups")
                return backups
            else:
                print(f"‚ùå Backup list failed: {data.get('message')}")
                return []
        else:
            print(f"‚ùå Backup list request failed: {response.status_code}")
            return []
    
    def test_get_deployment_history(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–π"""
        print("\nüìö Testing deployment history retrieval...")
        
        response = self.session.get(f"{self.base_url}/api/deploy/history/templates/deployed_test.html")
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                history = data.get('data', {}).get('deployment_history', [])
                print(f"‚úÖ Found {len(history)} deployment records")
                return history
            else:
                print(f"‚ùå History retrieval failed: {data.get('message')}")
                return []
        else:
            print(f"‚ùå History request failed: {response.status_code}")
            return []
    
    def test_rollback(self, backup_timestamp):
        """–¢–µ—Å—Ç –æ—Ç–∫–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        if not backup_timestamp:
            print("\nüîÑ Skipping rollback test (no backup available)")
            return False
            
        print("\nüîÑ Testing rollback...")
        
        rollback_data = {
            'target_path': 'templates/deployed_test.html',
            'backup_timestamp': backup_timestamp,
            'confirmation': 'CONFIRM_ROLLBACK'
        }
        
        headers = {
            'Content-Type': 'application/json',
            'X-CSRF-Token': self.csrf_token
        }
        
        response = self.session.post(
            f"{self.base_url}/api/deploy/rollback",
            json=rollback_data,
            headers=headers
        )
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                rollback_id = data.get('data', {}).get('rollback_id')
                print(f"‚úÖ Rollback completed: {rollback_id}")
                return True
            else:
                print(f"‚ùå Rollback failed: {data.get('message')}")
                return False
        else:
            print(f"‚ùå Rollback request failed: {response.status_code}")
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ Starting Deployment API Tests")
        print("=" * 50)
        
        # –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
        if not self.login():
            print("‚ùå Cannot proceed without login")
            return
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
        results = {
            'health_check': False,
            'backup_creation': False,
            'preview_generation': False,
            'template_validation': False,
            'template_deployment': False,
            'backup_list': False,
            'deployment_history': False,
            'rollback': False
        }
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        results['health_check'] = self.test_health_check()
        
        # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        backup_id = self.test_create_backup()
        results['backup_creation'] = backup_id is not None
        
        # –¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        results['preview_generation'] = self.test_generate_preview()
        
        # –¢–µ—Å—Ç 4: –í–∞–ª–∏–¥–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞
        results['template_validation'] = self.test_validate_template()
        
        # –¢–µ—Å—Ç 5: –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        deployment_id = self.test_deploy_template()
        results['template_deployment'] = deployment_id is not None
        
        # –¢–µ—Å—Ç 6: –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
        backups = self.test_get_backup_list()
        results['backup_list'] = len(backups) >= 0
        
        # –¢–µ—Å—Ç 7: –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–π
        history = self.test_get_deployment_history()
        results['deployment_history'] = len(history) >= 0
        
        # –¢–µ—Å—Ç 8: –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
        results['rollback'] = self.test_rollback(backup_id)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 50)
        print("üìä TEST RESULTS SUMMARY")
        print("=" * 50)
        
        passed = 0
        total = len(results)
        
        for test_name, result in results.items():
            status = "‚úÖ PASS" if result else "‚ùå FAIL"
            print(f"{test_name.replace('_', ' ').title()}: {status}")
            if result:
                passed += 1
        
        print(f"\nOverall: {passed}/{total} tests passed")
        
        if passed == total:
            print("üéâ All tests passed! Deployment API is working correctly.")
        else:
            print("‚ö†Ô∏è Some tests failed. Check the logs above for details.")
        
        return results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ Deployment API Test Suite")
    print("This script tests the deployment API endpoints")
    print()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    tester = DeploymentAPITester(BASE_URL, ADMIN_EMAIL, ADMIN_PASSWORD)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    results = tester.run_all_tests()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    results_file = f"deployment_api_test_results_{timestamp}.json"
    
    with open(results_file, 'w', encoding='utf-8') as f:
        json.dump({
            'timestamp': datetime.now().isoformat(),
            'base_url': BASE_URL,
            'results': results
        }, f, indent=2, ensure_ascii=False)
    
    print(f"\nüìÑ Test results saved to: {results_file}")

if __name__ == "__main__":
    main() 