#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –º–∞—Ä—à—Ä—É—Ç–æ–≤
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from flask import Flask
from routes import register_content_editor_blueprints
from routes.admin_routes import admin_bp
from routes.content_editor import content_editor_bp, content_editor_api_bp

def create_test_app():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    app = Flask(__name__)
    app.config['SECRET_KEY'] = 'test-key'
    app.config['TESTING'] = True
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º blueprints –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    app.register_blueprint(admin_bp, url_prefix='/<lang>/admin')
    register_content_editor_blueprints(app)
    
    return app

def analyze_routes(app):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üîç –ê–ù–ê–õ–ò–ó –ú–ê–†–®–†–£–¢–û–í –†–ï–î–ê–ö–¢–û–†–ê –ö–û–ù–¢–ï–ù–¢–ê")
    print("=" * 60)
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã
    routes = []
    for rule in app.url_map.iter_rules():
        routes.append({
            'endpoint': rule.endpoint,
            'methods': list(rule.methods),
            'rule': str(rule),
            'blueprint': rule.endpoint.split('.')[0] if '.' in rule.endpoint else 'main'
        })
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ blueprint
    blueprints = {}
    for route in routes:
        bp = route['blueprint']
        if bp not in blueprints:
            blueprints[bp] = []
        blueprints[bp].append(route)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º content_editor –º–∞—Ä—à—Ä—É—Ç—ã
    print("\nüìã –ú–ê–†–®–†–£–¢–´ CONTENT EDITOR:")
    print("-" * 40)
    
    content_editor_routes = []
    for route in routes:
        if 'content_editor' in route['endpoint']:
            content_editor_routes.append(route)
    
    if not content_editor_routes:
        print("‚ùå –ù–µ—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤ content_editor!")
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ URL
    content_editor_routes.sort(key=lambda x: x['rule'])
    
    for route in content_editor_routes:
        methods = ', '.join([m for m in route['methods'] if m not in ['HEAD', 'OPTIONS']])
        print(f"‚úÖ {route['rule']:<50} [{methods}]")
        print(f"   Endpoint: {route['endpoint']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–õ–ò–ö–¢–û–í:")
    print("-" * 40)
    
    conflicts = []
    seen_rules = {}
    
    for route in routes:
        rule = route['rule']
        if rule in seen_rules:
            conflicts.append({
                'rule': rule,
                'endpoint1': seen_rules[rule]['endpoint'],
                'endpoint2': route['endpoint']
            })
        else:
            seen_rules[rule] = route
    
    if conflicts:
        print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {len(conflicts)} –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤:")
        for conflict in conflicts:
            print(f"   üî¥ {conflict['rule']}")
            print(f"      - {conflict['endpoint1']}")
            print(f"      - {conflict['endpoint2']}")
    else:
        print("‚úÖ –ö–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
    print("\nüéØ –ü–†–û–í–ï–†–ö–ê –ö–õ–Æ–ß–ï–í–´–• –ú–ê–†–®–†–£–¢–û–í:")
    print("-" * 40)
    
    key_routes = [
        '/<lang>/admin/content-editor/',
        '/<lang>/admin/content-editor/grapejs',
        '/<lang>/admin/content-editor/visual-builder-grapejs',
        '/<lang>/admin/content-editor/templates',
        '/<lang>/admin/content-editor/pages',
        '/api/content-editor/templates'
    ]
    
    for key_route in key_routes:
        found = False
        for route in routes:
            if route['rule'] == key_route:
                methods = ', '.join([m for m in route['methods'] if m not in ['HEAD', 'OPTIONS']])
                print(f"‚úÖ {key_route:<50} [{methods}] -> {route['endpoint']}")
                found = True
                break
        
        if not found:
            print(f"‚ùå {key_route:<50} –ù–ï –ù–ê–ô–î–ï–ù")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    print("\nüîÑ –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ô:")
    print("-" * 40)
    
    redirect_routes = []
    for route in routes:
        if 'grapejs' in route['rule'] and 'visual-builder' not in route['rule']:
            redirect_routes.append(route)
    
    for route in redirect_routes:
        print(f"üîÑ {route['rule']} -> –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞ visual-builder-grapejs")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("-" * 40)
    print(f"–í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {len(routes)}")
    print(f"Content Editor –º–∞—Ä—à—Ä—É—Ç–æ–≤: {len(content_editor_routes)}")
    print(f"Blueprints: {len(blueprints)}")
    
    for bp, bp_routes in blueprints.items():
        if 'content_editor' in bp:
            print(f"  {bp}: {len(bp_routes)} –º–∞—Ä—à—Ä—É—Ç–æ–≤")

def test_route_resolution(app):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ó–†–ï–®–ï–ù–ò–Ø –ú–ê–†–®–†–£–¢–û–í:")
    print("-" * 40)
    
    with app.test_request_context():
        try:
            # –¢–µ—Å—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            from routes.content_editor import grapejs_builder
            print("‚úÖ –§—É–Ω–∫—Ü–∏—è grapejs_builder –¥–æ—Å—Ç—É–ø–Ω–∞")
            
            # –¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
            from routes.content_editor import grapesjs_builder_new
            print("‚úÖ –§—É–Ω–∫—Ü–∏—è grapesjs_builder_new –¥–æ—Å—Ç—É–ø–Ω–∞")
            
        except ImportError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –§–ò–ù–ê–õ–¨–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ú–ê–†–®–†–£–¢–û–í")
    print("=" * 60)
    
    try:
        app = create_test_app()
        analyze_routes(app)
        test_route_resolution(app)
        
        print("\n‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        print("=" * 60)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main() 