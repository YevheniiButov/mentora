import json

with open('scripts/160.json', 'r', encoding='utf-8') as f:
    questions_data = json.load(f)

print(f"‚úÖ JSON –≤–∞–ª–∏–¥–Ω—ã–π!")
print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions_data)}")

first_question = questions_data[0]
last_question = questions_data[-1]

print(f"üîç –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å ID: {first_question['id']}")
print(f"üîç –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å ID: {last_question['id']}")

required_fields = ['id', 'text', 'options', 'correct_answer_text', 'explanation', 'domain', 'irt_params']

print(f"\nüìù –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ü–ï–†–í–´–• 3 –í–û–ü–†–û–°–û–í:")

for i in range(min(3, len(questions_data))):
    question = questions_data[i]
    question_id = question.get('id', f'unknown_{i+1}')
    print(f"\n--- –í–æ–ø—Ä–æ—Å {question_id} ---")
    for field in required_fields:
        if field in question:
            if field == 'options':
                options_count = len(question[field])
                print(f"  ‚úÖ {field}: {options_count} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
                for j, option in enumerate(question[field][:2]):
                    print(f"      {j+1}. {option[:50]}...")
            elif field == 'irt_params':
                irt = question[field]
                print(f"  ‚úÖ {field}: difficulty={irt.get('difficulty')}, discrimination={irt.get('discrimination')}")
            elif field == 'text':
                text_preview = question[field][:100].replace('\n', ' ')
                print(f"  ‚úÖ {field}: {text_preview}...")
            else:
                print(f"  ‚úÖ {field}: OK")
        else:
            print(f"  ‚ùå {field}: –û–¢–°–£–¢–°–¢–í–£–ï–¢")
    correct_answer = question.get('correct_answer_text', '')
    options = question.get('options', [])
    if correct_answer in options:
        correct_index = options.index(correct_answer)
        print(f"  ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞–π–¥–µ–Ω: –∏–Ω–¥–µ–∫—Å {correct_index}")
    else:
        print(f"  ‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö")
        print(f"      –ò—Å–∫–æ–º—ã–π: {correct_answer[:50]}...")
        print(f"      –í–∞—Ä–∏–∞–Ω—Ç—ã: {[opt[:30] for opt in options]}")

print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –î–û–ú–ï–ù–ê–ú:")
domains = {}
for question in questions_data:
    domain = question.get('domain', 'UNKNOWN')
    domains[domain] = domains.get(domain, 0) + 1
for domain, count in sorted(domains.items()):
    print(f"   {domain}: {count} –≤–æ–ø—Ä–æ—Å–æ–≤")
total_domains = len(domains)
expected_domains = ['THER', 'SURG', 'PROTH', 'PEDI', 'PARO', 'ORTHO', 'PREV', 'ETHIEK', 'ANATOMIE', 'FYSIOLOGIE', 'PATHOLOGIE', 'MICROBIOLOGIE', 'MATERIAALKUNDE', 'RADIOLOGIE', 'ALGEMENE']
print(f"\nüéØ –í—Å–µ–≥–æ –¥–æ–º–µ–Ω–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {total_domains}")
print(f"üéØ –û–∂–∏–¥–∞–µ–º—ã—Ö –¥–æ–º–µ–Ω–æ–≤: {len(expected_domains)}")
missing_domains = set(expected_domains) - set(domains.keys())
if missing_domains:
    print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–æ–º–µ–Ω—ã: {missing_domains}")
else:
    print(f"‚úÖ –í—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –¥–æ–º–µ–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç!")
print(f"\nüîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò:")
question_ids = [q.get('id') for q in questions_data]
unique_ids = set(question_ids)
print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID: {len(unique_ids)} –∏–∑ {len(question_ids)}")
if len(unique_ids) != len(question_ids):
    print(f"   ‚ùå –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ ID!")
else:
    print(f"   ‚úÖ –í—Å–µ ID —É–Ω–∏–∫–∞–ª—å–Ω—ã")
difficulties = []
for question in questions_data:
    irt_params = question.get('irt_params', {})
    difficulty = irt_params.get('difficulty')
    if difficulty is not None:
        difficulties.append(difficulty)
if difficulties:
    min_diff = min(difficulties)
    max_diff = max(difficulties)
    avg_diff = sum(difficulties) / len(difficulties)
    print(f"   IRT Difficulty: min={min_diff:.2f}, max={max_diff:.2f}, avg={avg_diff:.2f}")
else:
    print(f"   ‚ùå IRT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
print(f"\nüéØ –í–ï–†–î–ò–ö–¢: –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ –∏–º–ø–æ—Ä—Ç—É!" if len(unique_ids) == len(question_ids) and difficulties else "‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è") 