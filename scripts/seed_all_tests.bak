# scripts/seed_all_tests.py
# Загружает ВСЕ тесты (промежуточные и финальные) из JSON
# Создает Question (с АНГЛИЙСКОЙ категорией на основе TAG_TO_CATEGORY_MAP) и связующий Lesson

import json
import sys
import logging
from pathlib import Path
import argparse

# --- Настройка для импорта ---
project_root = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(project_root))
# -----------------------------

try:
    from app import app, db
    # Импортируем все нужные модели
    from models import Module, Lesson, Question, Category, Subject
except ImportError as e:
    print(f"Критическая ошибка импорта в seed_all_tests.py: {e}")
    sys.exit(1)

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# --- КАРТА СООТВЕТСТВИЯ: Тег из JSON -> Общая Категория в БД (АНГЛ. НАЗВАНИЯ) ---
# !!! ПРОСМОТРИ И ДОПОЛНИ ЭТОТ СЛОВАРЬ СВОИМИ КАТЕГОРИЯМИ И ТЕГАМИ !!!
TAG_TO_CATEGORY_MAP = {
    # 1. Fundamental Sciences
    "Anatomy-Head-Neck": "Fundamental Sciences",
    "Anatomy-Tooth-Morphology": "Fundamental Sciences",
    "Oral-Histology-Embryology": "Fundamental Sciences",
    "Physiology": "Fundamental Sciences",
    "Biochemistry-Metabolism": "Fundamental Sciences",
    "Microbiology-Immunology": "Fundamental Sciences",
    "Pathology-General-Oral": "Fundamental Sciences",
    "Pharmacology-General": "Fundamental Sciences",
    "Microbiology-Oral": "Fundamental Sciences",

    # 2. Diagnostics & Planning
    "Diagnostics-Clinical-Exam": "Diagnostics & Planning",
    "Diagnostics-Radiology": "Diagnostics & Planning",
    "Radiology-Interpretation": "Diagnostics & Planning",
    "Radiology-Intraoral": "Diagnostics & Planning",
    "Treatment-Planning": "Diagnostics & Planning",
    "Communication-Skills": "Diagnostics & Planning",

    # 3. Therapeutic Dentistry I (Caries, Endo, Perio, Pedo, Prev) - Сократил название
    "Cariology": "Therapy I (Caries/Endodontics/Periodontics/Pedodontics)",
    "Preventive-Dentistry-Hygiene": "Therapy I (Caries/Endodontics/Periodontics/Pedodontics)",
    "Restorative-Materials-Direct": "Therapy I (Caries/Endodontics/Periodontics/Pedodontics)", # Или в Materials?
    "Restorative-Techniques-Direct": "Therapy I (Caries/Endodontics/Periodontics/Pedodontics)",
    "Adhesion-Bonding": "Therapy I (Caries/Endodontics/Periodontics/Pedodontics)",
    "Endodontics-Diagnosis-Pulp": "Therapy I (Caries/Endodontics/Periodontics/Pedodontics)",
    "Endodontics-Diagnosis-Periapical": "Therapy I (Caries/Endodontics/Periodontics/Pedodontics)",
    "Endodontics-Treatment": "Therapy I (Caries/Endodontics/Periodontics/Pedodontics)",
    "Endodontics-Materials": "Therapy I (Caries/Endodontics/Periodontics/Pedodontics)", # Или в Materials?
    "Periodontology-Diagnosis-Diseases": "Therapy I (Caries/Endodontics/Periodontics/Pedodontics)",
    "Periodontology-Treatment-NonSurgical": "Therapy I (Caries/Endodontics/Periodontics/Pedodontics)",
    "Periodontology-Treatment-Surgical": "Therapy I (Caries/Endodontics/Periodontics/Pedodontics)",
    "Periodontology-Etiology": "Therapy I (Caries/Endodontics/Periodontics/Pedodontics)",
    "Periodontology-Pathogenesis": "Therapy I (Caries/Endodontics/Periodontics/Pedodontics)",
    "Periodontology-Classification": "Therapy I (Caries/Endodontics/Periodontics/Pedodontics)",
    "Periodontology-Risk Factors": "Therapy I (Caries/Endodontics/Periodontics/Pedodontics)",
    "Periodontology-Microbial Plaque": "Therapy I (Caries/Endodontics/Periodontics/Pedodontics)",
    "Periodontology-Clinical Diagnosis": "Therapy I (Caries/Endodontics/Periodontics/Pedodontics)",
    "Periodontology-Systemic Associations": "Therapy I (Caries/Endodontics/Periodontics/Pedodontics)",
    "Periodontology-Radiographic Exam": "Therapy I (Caries/Endodontics/Periodontics/Pedodontics)",
    "Periodontology-Initial Therapy": "Therapy I (Caries/Endodontics/Periodontics/Pedodontics)",
    "Periodontology-Surgical Therapy": "Therapy I (Caries/Endodontics/Periodontics/Pedodontics)",
    "Periodontology-Plastic Surgery": "Therapy I (Caries/Endodontics/Periodontics/Pedodontics)",
    "Pedodontics": "Therapy I (Caries/Endodontics/Periodontics/Pedodontics)", # Педодонтия сюда же по списку

    # 4. Therapeutic Dentistry II / Prostho / Surgery - Сократил название
    "Prosthodontics-Fixed-Crowns": "Therapy II / Prostho / Surgery",
    "Prosthodontics-Fixed-Bridges": "Therapy II / Prostho / Surgery",
    "Prosthodontics-Removable-Complete": "Therapy II / Prostho / Surgery",
    "Prosthodontics-Removable-Partial": "Therapy II / Prostho / Surgery",
    "Prosthodontics-Implants": "Therapy II / Prostho / Surgery",
    "Occlusion-Articulation": "Therapy II / Prostho / Surgery",
    "Dental-Materials-Indirect": "Therapy II / Prostho / Surgery", # Или в Materials?
    "Impression-Materials-Techniques": "Therapy II / Prostho / Surgery",
    "Oral-Surgery-Extractions": "Therapy II / Prostho / Surgery",
    "Oral-Surgery-Minor": "Therapy II / Prostho / Surgery",
    "Oral-Surgery-Complications": "Therapy II / Prostho / Surgery",
    "Anesthesia-Local": "Therapy II / Prostho / Surgery",
    "Orthodontics-Basics": "Therapy II / Prostho / Surgery",
    "Oral-Surgery-Instruments": "Therapy II / Prostho / Surgery",

    # Отдельная категория для материалов?
    "Dental-Materials-General": "Materials",
    "Restorative-Materials-GlassIonomer": "Materials",
    "Restorative-Materials-Composites": "Materials",

    # 5. General Medicine & Safety
    "Pharmacology-Clinical": "General Medicine & Safety",
    "Systemic-Diseases-OralLink": "General Medicine & Safety",
    "Systemic-Diseases-OralManifestations": "General Medicine & Safety",
    "Medical-Emergencies": "General Medicine & Safety",
    "Infection-Control": "General Medicine & Safety",

    # 6. Professional Aspects (NL)
    "Ethics-Law-Netherlands": "Professional Aspects (NL)",
    "Dutch-Healthcare-System": "Professional Aspects (NL)",
    "BIG-Exam-Procedure": "Professional Aspects (NL)",
    "BI-Toets": "Professional Aspects (NL)",
    "AKV-Toets": "Professional Aspects (NL)",

    # 7. Research & Statistics
    "Statistics-Basic": "Research & Statistics",
    "Research-Methodology": "Research & Statistics",

    # 8. Pediatric Dentistry - уже включена в Therapy I

    # 9. General/Other
    "Definition": "General/Other",
    "Procedure-Steps": "General/Other",
    "Case-Study": "General/Other",
    "Classification": "General/Other", # Общая классификация?

}
# ----------------------------------------------------------------

def seed_tests_from_json(json_file_path):
    """Загружает тестовые вопросы из JSON, создает Question и Lesson."""
    json_path = Path(json_file_path)
    if not json_path.is_file():
        logger.error(f"❌ JSON file not found: {json_file_path}")
        return False

    try:
        with open(json_path, 'r', encoding='utf-8') as f:
            all_test_data = json.load(f)
        if not isinstance(all_test_data, list):
            logger.error(f"❌ Error: JSON must contain a list of objects.")
            return False
    except Exception as e:
        logger.error(f"❌ Error reading or parsing JSON file {json_file_path}: {e}")
        return False

    logger.info(f"Starting loading of {len(all_test_data)} test questions from {json_path.name}...")

    questions_added = 0
    lessons_added = 0
    categories_cache = {}
    modules_cache = {}

    with app.app_context():
        # Preload modules and categories
        try:
            all_modules = Module.query.all()
            modules_cache = {m.title: m for m in all_modules}
            all_categories = Category.query.all()
            categories_cache = {c.name: c.id for c in all_categories}
            logger.info(f"Found {len(modules_cache)} modules and {len(categories_cache)} categories in DB.")
            if not modules_cache:
                 logger.warning("No modules found in the database! Test link lessons will not be created.")
        except Exception as e:
             logger.error(f"❌ Error preloading modules/categories from DB: {e}")
             return False

        lesson_order_counters = {}

        for i, test_info in enumerate(all_test_data):
            if test_info.get('type') != 'test':
                continue

            module_title = test_info.get('module_title')
            question_text = test_info.get('question')
            options = test_info.get('options')
            correct_answer = test_info.get('answer')
            explanation = test_info.get('explanation')
            tags = test_info.get('tags')
            scope = test_info.get('scope')

            # --- Basic field validation ---
            if not all([module_title, question_text, options, correct_answer]):
                logger.warning(f"Skipping test #{i+1}: Missing required fields (module_title, question, options, or answer).")
                continue
            if not isinstance(options, list) or len(options) < 2:
                 logger.warning(f"Skipping test #{i+1} ('{question_text[:30]}...'): Field 'options' must be a list with at least 2 elements.")
                 continue
            # -----------------------------

            try:
                # --- Determine or create Category using TAG_TO_CATEGORY_MAP ---
                category_name = f"Tests - {module_title}" # Default value
                category_assigned_by_tag = False
                if tags and isinstance(tags, list):
                    for tag in tags:
                        if tag in TAG_TO_CATEGORY_MAP:
                            category_name = TAG_TO_CATEGORY_MAP[tag]
                            category_assigned_by_tag = True
                            break
                    if not category_assigned_by_tag:
                         logger.warning(f"For question #{i+1} ('{question_text[:30]}...') no matching tag found in TAG_TO_CATEGORY_MAP for tags {tags}. Using default category '{category_name}'.")
                else:
                     logger.warning(f"For question #{i+1} ('{question_text[:30]}...') tags are missing. Using default category '{category_name}'.")

                # --- Find or create Category record ---
                category_id = categories_cache.get(category_name)
                if not category_id:
                    category = Category.query.filter_by(name=category_name).first()
                    if not category:
                        logger.info(f"Creating new category: '{category_name}'")
                        category = Category(name=category_name)
                        db.session.add(category)
                        try:
                            db.session.flush()
                        except Exception as e_cat:
                            db.session.rollback()
                            logger.error(f"Error creating category '{category_name}': {e_cat}")
                            continue # Skip question if category cannot be created
                    category_id = category.id
                    categories_cache[category_name] = category_id
                # ------------------------------------

                # --- Create Question record ---
                question = Question(
                    text=question_text,
                    options=json.dumps(options, ensure_ascii=False),
                    correct_answer=str(correct_answer),
                    explanation=explanation,
                    category_id=category_id
                )
                db.session.add(question)
                db.session.flush()
                question_id = question.id
                questions_added += 1
                # -----------------------------

                # --- Find target Module ---
                target_module = modules_cache.get(module_title)
                if not target_module:
                    logger.error(f"❌ Module '{module_title}' for question #{i+1} not found in DB cache! Skipping creation of linking lesson.")
                    continue
                # ------------------------

                # --- Determine Lesson content_type and target module ID ---
                lesson_content_type = 'module_test_question'
                target_module_id_for_lesson = target_module.id

                if scope == 'topic_final':
                     if target_module.subject:
                        # Find the dedicated final test module for this subject
                        final_module_obj = Module.query.filter_by(
                            subject_id=target_module.subject.id,
                            is_final_test=True
                        ).first()

                        if final_module_obj:
                            target_module_id_for_lesson = final_module_obj.id
                            lesson_content_type = 'final_test_question'
                            # Log assignment to final test module only once per module maybe?
                            # logger.info(f"  Question #{i+1} assigned to FINAL test module ID {final_module_obj.id} ('{final_module_obj.title}')")
                        else:
                            logger.warning(f"  Question #{i+1} marked as topic_final, but NO final test module found for Subject ID {target_module.subject.id}! Assigning as 'module_test_question' to module '{module_title}'.")
                     else:
                          logger.warning(f"  Cannot determine Subject for module '{module_title}'. Question #{i+1} marked topic_final will be assigned as 'module_test_question'.")
                # ----------------------------------------------------------

                # --- Determine lesson order ---
                if target_module_id_for_lesson not in lesson_order_counters:
                    max_order = db.session.query(db.func.max(Lesson.order)).filter_by(module_id=target_module_id_for_lesson).scalar()
                    lesson_order_counters[target_module_id_for_lesson] = max_order if max_order is not None else 0
                lesson_order_counters[target_module_id_for_lesson] += 1
                current_order = lesson_order_counters[target_module_id_for_lesson]
                # ---------------------------

                # --- Create linking Lesson record ---
                lesson = Lesson(
                    module_id=target_module_id_for_lesson,
                    title=f"Test Q: {question_text[:100]}...",
                    content_type=lesson_content_type,
                    content=str(question_id),
                    order=current_order
                )
                db.session.add(lesson)
                lessons_added += 1
                # -------------------------------

                if (i + 1) % 50 == 0:
                    logger.info(f"Processed {i+1} records, committing...")
                    db.session.commit()

            except Exception as e:
                db.session.rollback()
                logger.error(f"❌ Error processing test #{i+1} ('{question_text[:30]}...'): {e}", exc_info=True)


        # Final commit
        try:
            db.session.commit()
            logger.info(f"✅ Test loading finished! Added Questions: {questions_added}, Added linking Lessons: {lessons_added}")
            return True
        except Exception as e:
            db.session.rollback()
            logger.error(f"❌ Error during final commit: {e}")
            return False

# --- Main execution block ---
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Load test questions from JSON, create Question and linking Lesson records using TAG_TO_CATEGORY_MAP.')
    parser.add_argument('json_file', type=str, help='Path to the JSON file containing test data.')
    args = parser.parse_args()

    success = seed_tests_from_json(args.json_file)

    if success:
        print(f"--- Test loading from '{args.json_file}' completed successfully ---")
    else:
        print(f"--- Test loading from '{args.json_file}' completed with errors ---")
        sys.exit(1)