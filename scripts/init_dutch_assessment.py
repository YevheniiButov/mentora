#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∏–¥–µ—Ä–ª–∞–Ω–¥—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏
–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≤–æ–ø—Ä–æ—Å—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""
import sys
import os
import json
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import create_app
from extensions import db
from models import AssessmentCategory, AssessmentQuestion
from data.dutch_assessment_categories import DUTCH_ASSESSMENT_CATEGORIES
from data.dutch_assessment_questions import DUTCH_DENTAL_QUESTIONS

def init_dutch_categories():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∏–¥–µ—Ä–ª–∞–Ω–¥—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    app = create_app()
    with app.app_context():
        print("üá≥üá± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∏–¥–µ—Ä–ª–∞–Ω–¥—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ—Ü–µ–Ω–∫–∏...")
        for category_data in DUTCH_ASSESSMENT_CATEGORIES:
            existing = AssessmentCategory.query.filter_by(slug=category_data['slug']).first()
            if not existing:
                category = AssessmentCategory(
                    name=category_data['name'],
                    name_en=category_data.get('name_en'),
                    name_ru=category_data.get('name_ru'),
                    slug=category_data['slug'],
                    description=category_data['description'],
                    weight=category_data['weight'],
                    min_questions=category_data['min_questions'],
                    max_questions=category_data['max_questions'],
                    color=category_data['color'],
                    icon=category_data['icon'],
                    is_dutch_specific=category_data.get('is_dutch_specific', False),
                    critical_for_netherlands=category_data.get('critical_for_netherlands', False)
                )
                db.session.add(category)
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_data['name']}")
            else:
                print(f"‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {category_data['name']}")
        db.session.commit()
        print("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

def init_dutch_questions():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∏–¥–µ—Ä–ª–∞–Ω–¥—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
    app = create_app()
    with app.app_context():
        print("üìù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∏–¥–µ—Ä–ª–∞–Ω–¥—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤...")
        categories = {cat.slug: cat for cat in AssessmentCategory.query.all()}
        question_count = 0
        for question_data in DUTCH_DENTAL_QUESTIONS:
            category_slug = question_data['category']
            if category_slug not in categories:
                print(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {category_slug}")
                continue
            category = categories[category_slug]
            existing_question = AssessmentQuestion.query.filter_by(
                category_id=category.id,
                question_text=question_data['question']
            ).first()
            if not existing_question:
                question = AssessmentQuestion(
                    category_id=category.id,
                    question_text=question_data['question'],
                    question_type=question_data.get('question_type', 'multiple_choice'),
                    options=json.dumps(question_data['options']),
                    correct_answer=question_data['correct_answer'],
                    explanation=question_data.get('explanation', ''),
                    difficulty_level=question_data.get('difficulty', 3),
                    time_limit=question_data.get('time_limit', 120),
                    points=question_data.get('points', 1),
                    related_modules=json.dumps(question_data.get('related_modules', [])),
                    is_active=True
                )
                db.session.add(question)
                question_count += 1
        db.session.commit()
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {question_count} –≤–æ–ø—Ä–æ—Å–æ–≤")

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∏–¥–µ—Ä–ª–∞–Ω–¥—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏...")
    init_dutch_categories()
    init_dutch_questions()
    print("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!") 