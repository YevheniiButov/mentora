#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –ò–ò –≤–∏–¥–∂–µ—Ç–æ–≤
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""

import sys
import os
import subprocess
import argparse
import time
from pathlib import Path

def print_banner():
    """–ü–µ—á–∞—Ç—å –±–∞–Ω–Ω–µ—Ä–∞"""
    print("üß™" + "="*60)
    print("  –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ò –í–ò–î–ñ–ï–¢–û–í - DENTAL ACADEMY")
    print("="*62)
    print()

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
    
    requirements = {
        'flask': 'Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
        'selenium': 'Selenium –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤',
        'unittest': '–ú–æ–¥—É–ª—å unittest –¥–ª—è –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤'
    }
    
    missing = []
    
    try:
        import flask
        print("  ‚úÖ Flask —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        missing.append('flask')
        print("  ‚ùå Flask –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    try:
        import selenium
        print("  ‚úÖ Selenium —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        missing.append('selenium')
        print("  ‚ö†Ô∏è Selenium –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)")
    
    if missing and 'flask' in missing:
        print("\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install flask")
        return False
    
    print("  ‚úÖ –ë–∞–∑–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    return True

def run_unit_tests():
    """–ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤"""
    print("\nüß™ –ó–∞–ø—É—Å–∫ Unit —Ç–µ—Å—Ç–æ–≤...")
    
    test_file = "tests/test_ai_widgets.py"
    
    if not os.path.exists(test_file):
        print(f"‚ùå –§–∞–π–ª —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
        return False
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
        env = os.environ.copy()
        current_dir = os.getcwd()
        if 'PYTHONPATH' in env:
            env['PYTHONPATH'] = f"{current_dir}:{env['PYTHONPATH']}"
        else:
            env['PYTHONPATH'] = current_dir
        
        result = subprocess.run([
            sys.executable, "-m", "unittest", 
            "tests.test_ai_widgets", "-v"
        ], capture_output=True, text=True, timeout=120, env=env)
        
        print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Unit —Ç–µ—Å—Ç–æ–≤:")
        print(result.stdout)
        
        if result.stderr:
            print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è/–û—à–∏–±–∫–∏:")
            print(result.stderr)
        
        if result.returncode == 0:
            print("‚úÖ Unit —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print("‚ùå Unit —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
            return False
            
    except subprocess.TimeoutExpired:
        print("‚è±Ô∏è –¢–∞–π–º-–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è unit —Ç–µ—Å—Ç–æ–≤")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è unit —Ç–µ—Å—Ç–æ–≤: {e}")
        return False

def run_selenium_tests():
    """–ó–∞–ø—É—Å–∫ Selenium —Ç–µ—Å—Ç–æ–≤"""
    print("\nüåê –ó–∞–ø—É—Å–∫ Selenium —Ç–µ—Å—Ç–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Selenium
    try:
        import selenium
    except ImportError:
        print("‚ö†Ô∏è Selenium –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ —Ç–µ—Å—Ç—ã")
        return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    
    test_file = "tests/test_ai_widgets_selenium.py"
    
    if not os.path.exists(test_file):
        print(f"‚ùå –§–∞–π–ª Selenium —Ç–µ—Å—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
        return False
    
    print("‚ö†Ô∏è –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è Selenium:")
    print("  1. Flask —Å–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:5000")
    print("  2. ChromeDriver –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    print("  3. –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ë–î")
    
    response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å Selenium —Ç–µ—Å—Ç—ã? (y/n): ").lower()
    if response != 'y':
        print("‚è≠Ô∏è Selenium —Ç–µ—Å—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã")
        return True
    
    try:
        result = subprocess.run([
            sys.executable, "tests/test_ai_widgets_selenium.py"
        ], capture_output=True, text=True, timeout=300)
        
        print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Selenium —Ç–µ—Å—Ç–æ–≤:")
        print(result.stdout)
        
        if result.stderr:
            print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è/–û—à–∏–±–∫–∏:")
            print(result.stderr)
        
        if result.returncode == 0:
            print("‚úÖ Selenium —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            return True
        else:
            print("‚ùå Selenium —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
            return False
            
    except subprocess.TimeoutExpired:
        print("‚è±Ô∏è –¢–∞–π–º-–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Selenium —Ç–µ—Å—Ç–æ–≤")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Selenium —Ç–µ—Å—Ç–æ–≤: {e}")
        return False

def check_server_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Flask —Å–µ—Ä–≤–µ—Ä–∞"""
    print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    
    try:
        import requests
        
        response = requests.get("http://localhost:5000/en/", timeout=5)
        if response.status_code == 200:
            print("  ‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ localhost:5000")
            return True
        else:
            print(f"  ‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º: {response.status_code}")
            return False
            
    except ImportError:
        print("  ‚ö†Ô∏è Requests –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä–≤–µ—Ä–∞")
        return True
    except Exception as e:
        print(f"  ‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        print("  üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python app.py")
        return False

def run_linting():
    """–ó–∞–ø—É—Å–∫ –ª–∏–Ω—Ç–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ flake8
    try:
        result = subprocess.run(["flake8", "--version"], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("  ‚úÖ flake8 –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º flake8 –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            lint_result = subprocess.run([
                "flake8", "tests/", "--max-line-length=100", 
                "--ignore=E501,W503"
            ], capture_output=True, text=True)
            
            if lint_result.returncode == 0:
                print("  ‚úÖ –ö–æ–¥ —Ç–µ—Å—Ç–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º")
            else:
                print("  ‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç–∏–ª–µ–º –∫–æ–¥–∞:")
                print(lint_result.stdout)
        else:
            print("  ‚ö†Ô∏è flake8 –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except FileNotFoundError:
        print("  ‚ö†Ô∏è flake8 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (pip install flake8)")

def generate_test_report(results):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
    
    report_lines = [
        "# üìã –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ò–ò –≤–∏–¥–∂–µ—Ç–æ–≤",
        f"\n**–î–∞—Ç–∞:** {time.strftime('%Y-%m-%d %H:%M:%S')}",
        f"**–í–µ—Ä—Å–∏—è Python:** {sys.version}",
        "\n## üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n"
    ]
    
    for test_type, status in results.items():
        status_icon = "‚úÖ" if status else "‚ùå"
        report_lines.append(f"- {status_icon} {test_type}")
    
    report_lines.extend([
        "\n## üìù –î–µ—Ç–∞–ª–∏",
        "\n### Unit —Ç–µ—Å—Ç—ã",
        "- –ü—Ä–æ–≤–µ—Ä–∫–∞ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–∏–¥–∂–µ—Ç–æ–≤",
        "- –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS –∫–ª–∞—Å—Å–æ–≤ –∏ —Å—Ç–∏–ª–µ–π", 
        "- –ü—Ä–æ–≤–µ—Ä–∫–∞ JavaScript —Ñ—É–Ω–∫—Ü–∏–π",
        "- –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
        "- –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        "\n### Selenium —Ç–µ—Å—Ç—ã (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω—ã)",
        "- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–∏–¥–∂–µ—Ç–æ–≤",
        "- –ë—Ä–∞—É–∑–µ—Ä–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å",
        "- –†–µ–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ",
        "\n## üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
        "\n–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–∫–∂–µ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:",
        "1. –ú–∞–Ω—É–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —á–µ–∫-–ª–∏—Å—Ç—É",
        "2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö", 
        "3. –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI endpoints",
        "4. Accessibility —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    ])
    
    report_content = "\n".join(report_lines)
    
    try:
        with open("test_report.md", "w", encoding="utf-8") as f:
            f.write(report_content)
        print("‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ test_report.md")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç: {e}")
        print("\nüìã –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞:")
        print(report_content)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ò–ò –≤–∏–¥–∂–µ—Ç–æ–≤")
    parser.add_argument("--unit-only", action="store_true", 
                       help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ Unit —Ç–µ—Å—Ç—ã")
    parser.add_argument("--selenium-only", action="store_true",
                       help="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ Selenium —Ç–µ—Å—Ç—ã")
    parser.add_argument("--no-server-check", action="store_true",
                       help="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä–≤–µ—Ä–∞")
    parser.add_argument("--with-lint", action="store_true",
                       help="–í–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞")
    
    args = parser.parse_args()
    
    print_banner()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    if not check_requirements():
        return 1
    
    results = {}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    if not args.no_server_check and not args.unit_only:
        server_ok = check_server_status()
        results['–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞'] = server_ok
    
    # –õ–∏–Ω—Ç–∏–Ω–≥ (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω)
    if args.with_lint:
        run_linting()
    
    # Unit —Ç–µ—Å—Ç—ã
    if not args.selenium_only:
        unit_success = run_unit_tests()
        results['Unit —Ç–µ—Å—Ç—ã'] = unit_success
    
    # Selenium —Ç–µ—Å—Ç—ã
    if not args.unit_only:
        selenium_success = run_selenium_tests()
        results['Selenium —Ç–µ—Å—Ç—ã'] = selenium_success
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    generate_test_report(results)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "="*50)
    total_passed = sum(1 for status in results.values() if status)
    total_tests = len(results)
    
    if total_passed == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print(f"‚úÖ {total_passed}/{total_tests} —Ç–µ—Å—Ç-–≥—Ä—É–ø–ø —É—Å–ø–µ—à–Ω–æ")
        return 0
    else:
        print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print(f"‚úÖ {total_passed}/{total_tests} —Ç–µ—Å—Ç-–≥—Ä—É–ø–ø —É—Å–ø–µ—à–Ω–æ")
        print("\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤—ã—à–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 