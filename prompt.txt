
Промпт / План Действий: Завершение и Улучшение Flask E-Learning Приложения

Цель: Завершить базовую функциональность приложения с корректной многоязычностью через URL (/<lang>/...) и наметить путь для дальнейших улучшений.

Фаза 1: Завершение Рефакторинга Многоязычности (i18n)

Статус: Рефакторинг основных файлов маршрутов (routes/*.py) для поддержки URL /lang/... в целом завершен. Добавлены префиксы URL, обновлены функции для приема lang, добавлены обработчики before_request и context_processor для языка, применена защита маршрутов админки.
✅ Критически Важный Следующий Шаг:
Проверить ВСЕ HTML Шаблоны (templates/**/*.html): Необходимо вручную просмотреть каждый HTML-файл и убедиться, что все без исключения вызовы {{ url_for('blueprint_name.endpoint_name', ...) }} содержат параметр lang=lang.
Уже проверены/исправлены (вероятно): login.html, register.html, admin/users.html, admin/import_modules.html (или modules.html), admin/create_module.html, admin/pdf_view.html, admin/pdf_edit.html, admin/pdf_cards.html, admin/pdf_structure.html, admin/pdf_summary.html, admin/dashboard.html, admin/pdf_manager.html (новый), lesson.html, test_card.html, test_full.html (или test_question.html), test_result.html.
Обязательно проверить: base.html, _header.html, _footer.html, index.html, profile.html, learn.html, test.html, card_view.html, demo.html и любые другие пользовательские шаблоны.
Это самая частая причина ошибок BuildError после такого рефакторинга.
Проверить JavaScript: Если у вас есть JS-код, который вызывает API-эндпоинты (например, /save-progress), убедитесь, что он теперь использует новый URL с префиксом языка (e.g., /{lang}/api/save-progress) и передает данные в правильном формате (например, lesson_id как число для /save-progress).
Фаза 2: Реализация Улучшенной Системы Тестов

Цель: Заменить загрузку тестов из radio_questions.json на гибкую систему с выбором категории, длины теста и случайным порядком вопросов из базы данных.
Шаги:
Обновить models.py: Добавить модель Question (код ниже).
Миграция БД: Применить изменения к базе данных (flask db migrate, flask db upgrade).
Наполнение БД: Написать скрипт или вручную перенести/добавить вопросы с категориями в таблицу Question.
Обновить routes/tests_routes.py: Заменить текущую логику на новую (код для этого файла был предоставлен ранее), которая включает:
Маршрут настройки теста (setup_test) с выбором категории/длины.
Маршрут запуска теста (start_custom_test), который выбирает случайные ID вопросов из БД и сохраняет их в сессию.
Маршрут прохождения теста (take_test), который работает с вопросами из сессии.
Маршрут перехода к следующему вопросу (next_question).
Создать/Обновить Шаблоны:
Создать templates/test_setup.html (форма выбора параметров).
Создать/Переименовать templates/test_question.html (для отображения вопроса и результата).
Убедиться, что templates/test_result.html обновлен (правильные url_for).
Python
# Код для добавления в models.py
class Question(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    text = db.Column(db.Text, nullable=False)
    options = db.Column(db.JSON, nullable=False) # Список строк
    correct_answer = db.Column(db.String(255), nullable=False) # Строка
    category = db.Column(db.String(100), nullable=True, index=True) # Строка категории

    # module_id = db.Column(db.Integer, db.ForeignKey('module.id'), nullable=True) # Если нужна связь с Module
    # module = db.relationship('Module', backref='questions', lazy=True)

    def __repr__(self): return f'<Question {self.id}: {self.text[:30]}...>'
    def check_answer(self, submitted_answer): return str(submitted_answer) == str(self.correct_answer)
Фаза 3: Применение Дополнительных Рекомендаций (Приоритезация)

После завершения Фаз 1 и 2, рассмотрите следующие улучшения (порядок примерный):

Безопасность и Основы:
[ ] Настроить безопасную отдачу PDF из папки uploads через отдельный маршрут Flask, а не как статику.
[ ] Настроить Flask-Migrate для управления миграциями базы данных.
[ ] Централизовать конфигурацию (например, SUPPORTED_LANGUAGES в config.py).
[ ] Настроить логирование ошибок и событий.
[ ] Создать кастомные страницы ошибок (404, 500).
Формы и Админка:
[ ] Перевести формы админки (редактирование пользователя, создание модуля) на WTForms с CSRF-защитой.
[ ] Реализовать сохранение категории при создании модуля или убрать поле из формы create_module.html.
[ ] (Опционально) Создать декоратор @admin_required.
Функционал и UX:
[ ] Реализовать функцию "Забыли пароль?".
[ ] Сделать список категорий/тем для тестов динамическим (из БД).
[ ] (Опционально) Рассмотреть использование ID урока вместо индекса в URL (lesson_routes.py).
[ ] (Опционально, сложно) Вынести долгие операции PDF/AI в фоновые задачи (Celery).
[ ] (Опционально) Реализовать вход через Google (Flask-Dance).
[ ] Улучшить общий дизайн и UX.
Качество Кода:
[ ] Проверить и дополнить requirements.txt.
[ ] Рефакторить повторяющийся код (например, вынести общую логику before_request для языка).
Продвинутая Многоязычность:
[ ] (Опционально, сложно) Внедрить Flask-Babel для перевода статического текста в шаблонах и коде.
Важно: Тщательно тестируйте приложение после каждого значительного изменения!

Сохраните этот план. Когда будете готовы перейти к Фазе 2 или 3, просто дайте мне знать, с какого пункта вы хотите начать. А пока, если есть еще HTML-файлы для проверки, присылайте.

Дальнейшие улучшения
Вот несколько рекомендаций для дальнейшего улучшения функциональности отслеживания прогресса:

Автоматическое сохранение прогресса: Добавьте JavaScript, который периодически отправляет информацию о времени, проведенном на странице урока
Визуализация прогресса: Добавьте интерактивные графики, например, с использованием Chart.js:

javascript// Пример использования Chart.js для визуализации прогресса
function createProgressChart(elementId, data) {
    const ctx = document.getElementById(elementId).getContext('2d');
    
    const chart = new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: ['Завершено', 'Осталось'],
            datasets: [{
                data: [data.completed, data.total - data.completed],
                backgroundColor: ['#10b981', '#e2e8f0'],
                borderWidth: 0,
                borderRadius: 5
            }]
        },
        options: {
            cutout: '70%',
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    enabled: true
                }
            }
        }
    });
    
    return chart;
}

Механизм наград: Добавьте систему достижений и наград для повышения мотивации:

python@learning_map_bp.route("/api/check-achievements")
@login_required
def check_achievements(lang):
    """Проверяет наличие новых достижений"""
    try:
        # Получаем статистику пользователя
        stats = get_user_stats(current_user.id)
        
        # Список всех возможных достижений
        all_achievements = [
            {
                'id': 'first_lesson',
                'title': 'Первый шаг',
                'description': 'Завершите первый урок',
                'condition': stats.completed_lessons >= 1,
                'icon': 'bi-play-circle'
            },
            {
                'id': 'first_module',
                'title': 'Модуль освоен',
                'description': 'Завершите первый модуль полностью',
                'condition': any(path.progress == 100 for path in stats.learning_paths),
                'icon': 'bi-journal-check'
            },Claude hit the max length for a message and has paused its response. You can write Continue to keep the chat going.МГContinueПродолжаю разработку системы отслеживания прогресса и достижений для вашей образовательной платформы:
python@learning_map_bp.route("/api/check-achievements")
@login_required
def check_achievements(lang):
    """Проверяет наличие новых достижений"""
    try:
        # Получаем статистику пользователя
        stats = get_user_stats(current_user.id)
        
        # Список всех возможных достижений
        all_achievements = [
            {
                'id': 'first_lesson',
                'title': 'Первый шаг',
                'description': 'Завершите первый урок',
                'condition': stats.completed_lessons >= 1,
                'icon': 'bi-play-circle'
            },
            {
                'id': 'first_module',
                'title': 'Модуль освоен',
                'description': 'Завершите первый модуль полностью',
                'condition': any(path.progress == 100 for path in stats.learning_paths),
                'icon': 'bi-journal-check'
            },
            {
                'id': 'ten_lessons',
                'title': 'Стабильный прогресс',
                'description': 'Завершите 10 уроков',
                'condition': stats.completed_lessons >= 10,
                'icon': 'bi-award'
            },
            {
                'id': 'half_complete',
                'title': 'Экватор',
                'description': 'Достигните 50% общего прогресса',
                'condition': stats.overall_progress >= 50,
                'icon': 'bi-compass'
            },
            {
                'id': 'study_time',
                'title': 'Марафонец',
                'description': 'Проведите более 5 часов на платформе',
                'condition': stats.total_time_spent >= 300,  # 300 минут = 5 часов
                'icon': 'bi-clock'
            },
            {
                'id': 'five_days',
                'title': 'Регулярность',
                'description': 'Занимайтесь на платформе 5 дней',
                'condition': stats.active_days >= 5,
                'icon': 'bi-calendar-check'
            }
        ]
        
        # Получаем уже полученные достижения пользователя
        user_achievements = UserAchievement.query.filter_by(user_id=current_user.id).all()
        earned_achievement_ids = [a.achievement_id for a in user_achievements]
        
        # Проверяем новые достижения
        new_achievements = []
        for achievement in all_achievements:
            if achievement['id'] not in earned_achievement_ids and achievement['condition']:
                # Создаем запись о достижении
                new_achievement = UserAchievement(
                    user_id=current_user.id,
                    achievement_id=achievement['id'],
                    earned_at=datetime.utcnow()
                )
                db.session.add(new_achievement)
                
                # Добавляем в список новых достижений
                achievement['is_new'] = True
                new_achievements.append(achievement)
        
        # Сохраняем изменения в БД
        db.session.commit()
        
        # Фильтруем все достижения на полученные и доступные
        earned_achievements = [a for a in all_achievements if a['id'] in earned_achievement_ids]
        available_achievements = [a for a in all_achievements if a['id'] not in earned_achievement_ids]
        
        return jsonify({
            'new_achievements': new_achievements,
            'earned_achievements': earned_achievements,
            'available_achievements': available_achievements
        })
        
    except Exception as e:
        db.session.rollback()
        current_app.logger.error(f"Ошибка при проверке достижений: {str(e)}", exc_info=True)
        return jsonify({
            'error': str(e),
            'status': 'error'
        }), 500
Модель для достижений пользователя
Добавьте следующую модель в models.py для хранения достижений пользователей:
python# --- Модель UserAchievement (для достижений пользователя) ---
class UserAchievement(db.Model):
    __tablename__ = 'user_achievement'
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey("user.id", ondelete='CASCADE'), nullable=False)
    achievement_id = db.Column(db.String(50), nullable=False)  # Идентификатор достижения
    earned_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    # Обеспечиваем уникальность пары пользователь-достижение
    __table_args__ = (db.UniqueConstraint('user_id', 'achievement_id', name='_user_achievement_uc'),)
    
    def __repr__(self):
        return f'<UserAchievement: User {self.user_id}, Achievement {self.achievement_id}>'
Интеграция JavaScript для отображения достижений
Добавьте этот JavaScript код в ваш шаблон для отображения уведомлений о достижениях:
javascript// Проверка достижений при загрузке страницы
function checkAchievements() {
    fetch(`/${currentLang}/api/check-achievements`)
        .then(response => response.json())
        .then(data => {
            if (data.new_achievements && data.new_achievements.length > 0) {
                // Показываем уведомления о новых достижениях
                showAchievementNotifications(data.new_achievements);
            }
        })
        .catch(error => console.error('Ошибка при проверке достижений:', error));
}

// Отображение уведомлений о достижениях
function showAchievementNotifications(achievements) {
    // Контейнер для уведомлений
    const notificationContainer = document.getElementById('achievement-notification-container');
    if (!notificationContainer) {
        // Создаем контейнер, если он не существует
        const container = document.createElement('div');
        container.id = 'achievement-notification-container';
        container.style.position = 'fixed';
        container.style.bottom = '20px';
        container.style.right = '20px';
        container.style.zIndex = '9999';
        document.body.appendChild(container);
    }
    
    // Показываем каждое достижение последовательно
    achievements.forEach((achievement, index) => {
        setTimeout(() => {
            showAchievementToast(achievement);
        }, index * 3000); // Показываем с интервалом в 3 секунды
    });
}

// Создание и отображение тоста с достижением
function showAchievementToast(achievement) {
    const container = document.getElementById('achievement-notification-container');
    
    // Создаем элемент уведомления
    const toast = document.createElement('div');
    toast.className = 'achievement-toast';
    toast.innerHTML = `
        <div class="achievement-toast-header">
            <div class="achievement-icon">
                <i class="bi ${achievement.icon}"></i>
            </div>
            <div class="achievement-title">
                <strong>Новое достижение!</strong>
                <div>${achievement.title}</div>
            </div>
            <button type="button" class="btn-close" aria-label="Close"></button>
        </div>
        <div class="achievement-toast-body">
            ${achievement.description}
        </div>
    `;
    
    // Стили для тоста
    toast.style.background = 'white';
    toast.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.15)';
    toast.style.borderRadius = '8px';
    toast.style.overflow = 'hidden';
    toast.style.marginBottom = '10px';
    toast.style.width = '300px';
    toast.style.opacity = '0';
    toast.style.transform = 'translateY(20px)';
    toast.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
    
    // Стили для заголовка
    const header = toast.querySelector('.achievement-toast-header');
    header.style.background = 'linear-gradient(135deg, #8b5cf6, #6366f1)';
    header.style.color = 'white';
    header.style.padding = '10px 15px';
    header.style.display = 'flex';
    header.style.alignItems = 'center';
    
    // Стили для иконки
    const icon = toast.querySelector('.achievement-icon');
    icon.style.width = '40px';
    icon.style.height = '40px';
    icon.style.borderRadius = '50%';
    icon.style.background = 'rgba(255, 255, 255, 0.2)';
    icon.style.display = 'flex';
    icon.style.alignItems = 'center';
    icon.style.justifyContent = 'center';
    icon.style.marginRight = '12px';
    icon.style.fontSize = '20px';
    
    // Стили для заголовка
    const title = toast.querySelector('.achievement-title');
    title.style.flexGrow = '1';
    
    // Стили для кнопки закрытия
    const closeBtn = toast.querySelector('.btn-close');
    closeBtn.style.color = 'white';
    closeBtn.style.opacity = '0.8';
    closeBtn.style.cursor = 'pointer';
    closeBtn.style.background = 'none';
    closeBtn.style.border = 'none';
    
    // Стили для тела тоста
    const body = toast.querySelector('.achievement-toast-body');
    body.style.padding = '15px';
    body.style.color = '#4b5563';
    
    // Добавляем в контейнер
    container.appendChild(toast);
    
    // Анимация появления
    setTimeout(() => {
        toast.style.opacity = '1';
        toast.style.transform = 'translateY(0)';
    }, 10);
    
    // Закрытие по клику на кнопку
    closeBtn.addEventListener('click', () => {
        toast.style.opacity = '0';
        toast.style.transform = 'translateY(20px)';
        setTimeout(() => {
            toast.remove();
        }, 300);
    });
    
    // Автоматическое закрытие через 5 секунд
    setTimeout(() => {
        toast.style.opacity = '0';
        toast.style.transform = 'translateY(20px)';
        setTimeout(() => {
            toast.remove();
        }, 300);
    }, 5000);
}

// Вызываем проверку достижений при загрузке страницы
document.addEventListener('DOMContentLoaded', checkAchievements);
Компонент страницы достижений
Создайте отдельную страницу для просмотра всех достижений:
html{# templates/achievements.html #}
{% extends "base.html" %}

{% block title %}{% if lang == 'ru' %}Достижения{% else %}Achievements{% endif %}{% endblock %}

{% block styles %}
{{ super() }}
<style>
    .achievements-page {
        padding: 2rem 0;
    }
    
    .achievement-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }
    
    .achievement-card {
        background: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }
    
    .achievement-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
    }
    
    .achievement-card.earned {
        border: 2px solid #10b981;
    }
    
    .achievement-card.locked {
        opacity: 0.7;
        filter: grayscale(100%);
    }
    
    .achievement-header {
        display: flex;
        align-items: center;
        padding: 1.25rem;
        border-bottom: 1px solid #e2e8f0;
    }
    
    .achievement-icon {
        width: 48px;
        height: 48px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        margin-right: 1rem;
        flex-shrink: 0;
    }
    
    .achievement-earned {
        background: linear-gradient(135deg, #10b981, #34d399);
        color: white;
    }
    
    .achievement-locked {
        background: #e2e8f0;
        color: #94a3b8;
    }
    
    .achievement-title {
        font-size: 1.125rem;
        font-weight: 600;
        margin-bottom: 0.25rem;
    }
    
    .achievement-status {
        font-size: 0.875rem;
        color: #64748b;
    }
    
    .achievement-body {
        padding: 1.25rem;
    }
    
    .achievement-description {
        margin-bottom: 0.5rem;
    }
    
    .achievement-progress {
        margin-top: 1rem;
    }
    
    .achievement-date {
        font-size: 0.875rem;
        color: #64748b;
        margin-top: 0.5rem;
    }
    
    .achievement-badge {
        display: inline-block;
        padding: 0.25rem 0.75rem;
        font-size: 0.75rem;
        font-weight: 600;
        border-radius: 9999px;
        margin-top: 0.5rem;
    }
    
    .achievement-badge.earned {
        background-color: rgba(16, 185, 129, 0.1);
        color: #10b981;
    }
    
    .achievement-badge.locked {
        background-color: rgba(148, 163, 184, 0.1);
        color: #64748b;
    }
    
    .progress {
        height: 6px;
        border-radius: 3px;
        background-color: #e2e8f0;
    }
    
    .progress-bar {
        height: 100%;
        border-radius: 3px;
        background: linear-gradient(90deg, #10b981, #34d399);
    }
    
    .achievments-filter {
        margin-bottom: 2rem;
        padding: 1rem;
        background-color: #f8fafc;
        border-radius: 0.5rem;
    }
</style>
{% endblock %}

{% block content %}
<div class="container achievements-page main-content-padding">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="h3 mb-0">{% if lang == 'ru' %}Достижения{% else %}Achievements{% endif %}</h1>
        <a href="{{ url_for('learning_map_bp.learning_map', lang=lang) }}" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left"></i> {% if lang == 'ru' %}К карте обучения{% else %}Back to Learning Map{% endif %}
        </a>
    </div>
    
    <div class="achievments-filter">
        <div class="row align-items-center">
            <div class="col-md-6">
                <h5 class="mb-0">{% if lang == 'ru' %}Прогресс достижений{% else %}Achievement Progress{% endif %}</h5>
                <p class="text-muted mb-0">{{ earned_count }} {% if lang == 'ru' %}из{% else %}of{% endif %} {{ total_count }} {% if lang == 'ru' %}достижений получено{% else %}achievements earned{% endif %}</p>
            </div>
            <div class="col-md-6 text-md-end mt-3 mt-md-0">
                <div class="btn-group" role="group">
                    <input type="radio" class="btn-check" name="achievementFilter" id="all-achievements" value="all" checked>
                    <label class="btn btn-outline-primary" for="all-achievements">
                        {% if lang == 'ru' %}Все{% else %}All{% endif %}
                    </label>
                    
                    <input type="radio" class="btn-check" name="achievementFilter" id="earned-achievements" value="earned">
                    <label class="btn btn-outline-primary" for="earned-achievements">
                        {% if lang == 'ru' %}Полученные{% else %}Earned{% endif %}
                    </label>
                    
                    <input type="radio" class="btn-check" name="achievementFilter" id="locked-achievements" value="locked">
                    <label class="btn btn-outline-primary" for="locked-achievements">
                        {% if lang == 'ru' %}Недоступные{% else %}Locked{% endif %}
                    </label>
                </div>
            </div>
        </div>
        
        <div class="progress mt-3">
            <div class="progress-bar" role="progressbar" style="width: {{ (earned_count / total_count * 100) if total_count > 0 else 0 }}%" 
                 aria-valuenow="{{ (earned_count / total_count * 100) if total_count > 0 else 0 }}" 
                 aria-valuemin="0" 
                 aria-valuemax="100"></div>
        </div>
    </div>
    
    <div class="achievement-grid">
        {% for achievement in achievements %}
        <div class="achievement-card {{ 'earned' if achievement.earned else 'locked' }}" data-filter="{{ 'earned' if achievement.earned else 'locked' }}">
            <div class="achievement-header">
                <div class="achievement-icon {{ 'achievement-earned' if achievement.earned else 'achievement-locked' }}">
                    <i class="bi {{ achievement.icon }}"></i>
                </div>
                <div>
                    <div class="achievement-title">{{ achievement.title }}</div>
                    <div class="achievement-status">
                        {% if achievement.earned %}
                            {% if lang == 'ru' %}Получено{% else %}Earned{% endif %}
                        {% else %}
                            {% if lang == 'ru' %}Не получено{% else %}Locked{% endif %}
                        {% endif %}
                    </div>
                </div>
            </div>
            <div class="achievement-body">
                <div class="achievement-description">{{ achievement.description }}</div>
                {% if achievement.earned %}
                    <div class="achievement-date">
                        {% if lang == 'ru' %}Получено{% else %}Earned{% endif %}: {{ achievement.earned_at.strftime('%d.%m.%Y') }}
                    </div>
                    <div class="achievement-badge earned">
                        <i class="bi bi-trophy"></i> {% if lang == 'ru' %}Достигнуто{% else %}Achieved{% endif %}
                    </div>
                {% else %}
                    {% if achievement.progress is defined %}
                    <div class="achievement-progress">
                        <div class="d-flex justify-content-between mb-1">
                            <small class="text-muted">{% if lang == 'ru' %}Прогресс{% else %}Progress{% endif %}</small>
                            <small class="text-muted">{{ achievement.progress }}%</small>
                        </div>
                        <div class="progress">
                            <div class="progress-bar" role="progressbar" style="width: {{ achievement.progress }}%;" 
                                 aria-valuenow="{{ achievement.progress }}" 
                                 aria-valuemin="0" 
                                 aria-valuemax="100"></div>
                        </div>
                    </div>
                    {% endif %}
                    <div class="achievement-badge locked">
                        <i class="bi bi-lock"></i> {% if lang == 'ru' %}Разблокировать{% else %}Unlock{% endif %}
                    </div>
                {% endif %}
            </div>
        </div>
        {% endfor %}
    </div>
</div>
{% endblock %}

{% block body_scripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Фильтрация достижений
    const filterButtons = document.querySelectorAll('input[name="achievementFilter"]');
    const achievementCards = document.querySelectorAll('.achievement-card');
    
    filterButtons.forEach(button => {
        button.addEventListener('change', function() {
            const filter = this.value;
            
            achievementCards.forEach(card => {
                if (filter === 'all' || card.dataset.filter === filter) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        });
    });
});
</script>
{% endblock %}
Маршрут для страницы достижений
Добавьте следующий маршрут в файл learning_map_routes.py:
python@learning_map_bp.route("/achievements")
@login_required
def achievements(lang):
    """Отображает страницу достижений пользователя"""
    try:
        # Получаем статистику пользователя
        stats = get_user_stats(current_user.id)
        
        # Список всех возможных достижений
        all_achievements = [
            {
                'id': 'first_lesson',
                'title': 'Первый шаг',
                'description': 'Завершите первый урок',
                'condition': stats.completed_lessons >= 1,
                'progress': min(100, int(stats.completed_lessons * 100 / 1)) if stats.completed_lessons < 1 else 100,
                'icon': 'bi-play-circle'
            },
            {
                'id': 'first_module',
                'title': 'Модуль освоен',
                'description': 'Завершите первый модуль полностью',
                'condition': any(path.progress == 100 for path in stats.learning_paths),
                'progress': max([path.progress for path in stats.learning_paths]) if stats.learning_paths else 0,
                'icon': 'bi-journal-check'
            },
            {
                'id': 'ten_lessons',
                'title': 'Стабильный прогресс',
                'description': 'Завершите 10 уроков',
                'condition': stats.completed_lessons >= 10,
                'progress': min(100, int(stats.completed_lessons * 100 / 10)),
                'icon': 'bi-award'
            },
            {
                'id': 'half_complete',
                'title': 'Экватор',
                'description': 'Достигните 50% общего прогресса',
                'condition': stats.overall_progress >= 50,
                'progress': min(100, int(stats.overall_progress * 100 / 50)),
                'icon': 'bi-compass'
            },
            {
                'id': 'study_time',
                'title': 'Марафонец',
                'description': 'Проведите более 5 часов на платформе',
                'condition': stats.total_time_spent >= 300,  # 300 минут = 5 часов
                'progress': min(100, int(stats.total_time_spent * 100 / 300)),
                'icon': 'bi-clock'
            },
            {
                'id': 'five_days',
                'title': 'Регулярность',
                'description': 'Занимайтесь на платформе 5 дней',
                'condition': stats.active_days >= 5,
                'progress': min(100, int(stats.active_days * 100 / 5)),
                'icon': 'bi-calendar-check'
            }
        ]
        
        # Получаем уже полученные достижения пользователя
        user_achievements = UserAchievement.query.filter_by(user_id=current_user.id).all()
        earned_achievement_ids = [a.achievement_id for a in user_achievements]
        earned_achievements_data = {a.achievement_id: a for a in user_achievements}
        
        # Добавляем информацию о том, получено ли достижение
        achievements_data = []
        for achievement in all_achievements:
            achievement_copy = achievement.copy()
            achievement_copy['earned'] = achievement['id'] in earned_achievement_ids
            
            # Добавляем дату получения для полученных достижений
            if achievement_copy['earned']:
                achievement_copy['earned_at'] = earned_achievements_data[achievement['id']].earned_at
            
            achievements_data.append(achievement_copy)
        
        return render_template(
            "achievements.html",
            achievements=achievements_data,
            earned_count=len(earned_achievement_ids),
            total_count=len(all_achievements),
            stats=stats
        )
        
    except Exception as e:
        current_app.logger.error(f"Ошибка при отображении достижений: {str(e)}", exc_info=True)
        flash(f"Ошибка при загрузке достижений: {str(e)}", "danger")
        return redirect(url_for('learning_map_bp.learning_map', lang=lang))
Автоматический сбор статистики времени
Для отслеживания времени, проведенного на уроке, добавьте следующий JavaScript код в шаблон урока:
javascript// Отслеживание времени, проведенного на уроке
let lessonStartTime = Date.now();
let totalTimeSpent = 0;
let isActive = true;
let saveInterval;

// Функция для сохранения времени
function saveTimeSpent() {
    if (!isActive) return;
    
    const currentTime = Date.now();
    const timeSpentMinutes = (currentTime - lessonStartTime) / 60000; // Конвертируем в минуты
    
    // Сбрасываем счетчик
    lessonStartTime = currentTime;
    
    // Добавляем к общему времени
    totalTimeSpent += timeSpentMinutes;
    
    // Если прошло более 0.1 минуты (6 секунд), сохраняем
    if (timeSpentMinutes > 0.1) {
        // Сохраняем время через API
        fetch(`/${currentLang}/api/save-progress`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                lesson_id: {{ lesson.id }},
                time_spent: timeSpentMinutes
            })
        })
        .then(response => response.json())
        .then(data => {
            console.log('Время сохранено:', timeSpentMinutes, 'минут. Общее время:', totalTimeSpent.toFixed(2));
            // Можно обновить UI при необходимости
        })
        .catch(error => {
            console.error('Ошибка при сохранении времени:', error);
        });
    }
}

// Начинаем отслеживание
document.addEventListener('DOMContentLoaded', function() {
    // Сохраняем каждые 5 минут
    saveInterval = setInterval(saveTimeSpent, 300000);
    
    // Отслеживаем активность пользователя
    document.addEventListener('visibilitychange', function() {
        if (document.hidden) {
            // Страница не активна - сохраняем текущее время и останавливаем счетчик
            saveTimeSpent();
            isActive = false;
        } else {
            // Страница снова активна - сбрасываем счетчик и продолжаем
            lessonStartTime = Date.now();
            isActive = true;
        }
    });
    
    // Отслеживаем скроллинг как признак активности
    document.addEventListener('scroll', function() {
        if (!isActive) {
            // Если пользователь начал взаимодействовать со страницей
            lessonStartTime = Date.now();
            isActive = true;
        }
    });
    
    // Сохраняем время при уходе со страницы
    window.addEventListener('beforeunload', function() {
        saveTimeSpent();
        clearInterval(saveInterval);
    });
});
Миграция для таблицы достижений
Создайте файл миграции для добавления таблицы достижений:
python"""Добавление таблицы достижений

Revision ID: 12345678
Revises: previous_revision_id
Create Date: 2023-09-01 12:34:56.789

"""
from alembic import op
import sqlalchemy as sa


def upgrade():
    op.create_table('user_achievement',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('achievement_id', sa.String(length=50), nullable=False),
        sa.Column('earned_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('user_id', 'achievement_id', name='_user_achievement_uc')
    )


def downgrade():
    op.drop_table('user_achievement')