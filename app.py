# app.py

import os
import json
import logging
from datetime import datetime, timedelta
from flask import Flask, render_template, redirect, url_for, g, request, session, jsonify
from flask_login import current_user
from flask_migrate import Migrate
from flask_wtf.csrf import CSRFProtect
from werkzeug.middleware.proxy_fix import ProxyFix
from translations import get_translation
from utils.subtopics import create_slug, update_lesson_subtopics, reorder_subtopic_lessons
from mobile_integration import init_mobile_integration
from utils.mobile_helpers import init_mobile_helpers

# Import extensions
from extensions import db, login_manager, bcrypt, babel, cache

# Import models
from models import User, Module, Lesson, UserProgress, Subject, LearningPath, VirtualPatientScenario

# Import routes
from routes.main_routes import main_bp
from routes.auth_routes import auth_bp
from routes.admin_routes import admin_bp
from routes.forum_routes import forum_bp
from routes.virtual_patient_routes import virtual_patient_bp
from routes.api_routes import api_bp
from routes.lesson_routes import lesson_bp
from routes.tests_routes import tests_bp
from routes.learning_map_routes import learning_map_bp
from routes.dashboard_routes import dashboard_bp
from routes.modules_routes import modules_bp 
from routes.subject_view_routes import subject_view_bp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –Ø–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
SUPPORTED_LANGUAGES = ['en', 'ru', 'nl', 'uk', 'es', 'pt', 'tr', 'fa']
DEFAULT_LANGUAGE = 'en'

def fromjson_filter(json_string):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É JSON –≤ –æ–±—ä–µ–∫—Ç Python."""
    if isinstance(json_string, str):
        try:
            return json.loads(json_string)
        except json.JSONDecodeError:
            return None
    return json_string

def register_template_filters(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã —à–∞–±–ª–æ–Ω–æ–≤ Jinja2."""
    app.jinja_env.filters['fromjson'] = fromjson_filter

# CLI –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
def import_cards_from_folder():
    """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ —Ç–µ—Å—Ç—ã –∏–∑ –ø–∞–ø–∫–∏ cards/ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    from pathlib import Path
    
    cards_path = Path('cards')
    if not cards_path.exists():
        print(f"‚ùå Directory 'cards' not found at {cards_path.absolute()}")
        return
    
    print(f"üìÇ Importing from: {cards_path.absolute()}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
    stats = {
        'modules_created': 0,
        'lessons_created': 0,
        'cards_imported': 0,
        'tests_imported': 0,
        'errors': 0
    }
    
    try:
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–∞–ø–∫–∞–º –≤ cards/
        for topic_folder in cards_path.iterdir():
            if not topic_folder.is_dir():
                continue
                
            topic_name = topic_folder.name
            print(f"\nüìÅ Processing folder: {topic_name}")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º learning_cards.json
            cards_file = topic_folder / 'learning_cards.json'
            if cards_file.exists():
                print(f"  üìö Found learning_cards.json")
                try:
                    with open(cards_file, 'r', encoding='utf-8') as f:
                        cards_data = json.load(f)
                    
                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ module_title
                    modules_cards = {}
                    for card in cards_data:
                        module_title = card.get('module_title', topic_name.title())
                        if module_title not in modules_cards:
                            modules_cards[module_title] = []
                        modules_cards[module_title].append(card)
                    
                    # –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª–∏ –∏ —É—Ä–æ–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
                    for module_title, cards in modules_cards.items():
                        module = create_or_get_module(module_title, f"Module imported from {topic_name}")
                        stats['modules_created'] += 1
                        
                        for card in cards:
                            lesson = create_lesson_from_card(module, card)
                            stats['lessons_created'] += 1
                            stats['cards_imported'] += 1
                    
                    print(f"    ‚úÖ Imported {len(cards_data)} learning cards")
                    
                except json.JSONDecodeError as e:
                    print(f"    ‚ùå JSON Error in {cards_file}: {e}")
                    print(f"    ‚ö†Ô∏è  Skipping this file and continuing...")
                    stats['errors'] += 1
                    continue
                except Exception as e:
                    print(f"    ‚ùå Error processing {cards_file}: {e}")
                    stats['errors'] += 1
                    continue
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º tests.json
            tests_file = topic_folder / 'tests.json'
            if tests_file.exists():
                print(f"  üß™ Found tests.json")
                try:
                    with open(tests_file, 'r', encoding='utf-8') as f:
                        tests_data = json.load(f)
                    
                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã –ø–æ module_title
                    modules_tests = {}
                    for test in tests_data:
                        module_title = test.get('module_title', topic_name.title())
                        if module_title not in modules_tests:
                            modules_tests[module_title] = []
                        modules_tests[module_title].append(test)
                    
                    # –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª–∏ –∏ —É—Ä–æ–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
                    for module_title, tests in modules_tests.items():
                        module = create_or_get_module(module_title, f"Module imported from {topic_name}")
                        
                        for test in tests:
                            lesson = create_lesson_from_test(module, test)
                            stats['lessons_created'] += 1
                            stats['tests_imported'] += 1
                    
                    print(f"    ‚úÖ Imported {len(tests_data)} tests")
                    
                except json.JSONDecodeError as e:
                    print(f"    ‚ùå JSON Error in {tests_file}: {e}")
                    print(f"    ‚ö†Ô∏è  Skipping this file and continuing...")
                    stats['errors'] += 1
                    continue
                except Exception as e:
                    print(f"    ‚ùå Error processing {tests_file}: {e}")
                    stats['errors'] += 1
                    continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.session.commit()
        
        print(f"\nüéâ Import completed!")
        print(f"üìä Statistics:")
        print(f"   - Modules created: {stats['modules_created']}")
        print(f"   - Lessons created: {stats['lessons_created']}")
        print(f"   - Learning cards imported: {stats['cards_imported']}")
        print(f"   - Tests imported: {stats['tests_imported']}")
        if stats['errors'] > 0:
            print(f"   - ‚ö†Ô∏è  Files with errors (skipped): {stats['errors']}")
        
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå Critical error during import: {e}")
        raise

def create_or_get_module(title, description=""):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π"""
    module = Module.query.filter_by(title=title).first()
    
    if not module:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—è
        max_order = db.session.query(db.func.max(Module.order)).scalar() or 0
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å
        module = Module(
            title=title,
            description=description,
            order=max_order + 1,
            module_type='education',
            is_premium=False
        )
        db.session.add(module)
        db.session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –º–æ–¥—É–ª—è
        print(f"    ‚ú® Created new module: {title} (ID: {module.id})")
    else:
        print(f"    ‚ú® Using existing module: {title} (ID: {module.id})")
    
    return module

def create_lesson_from_card(module, card_data):
    """–°–æ–∑–¥–∞–µ—Ç —É—Ä–æ–∫ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö –ø–æ–ª–µ–π"""
    lesson_count = Lesson.query.filter_by(module_id=module.id).count()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º module_title –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏
    module_title = card_data.get('module_title', module.title)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–Æ –∫–∞—Ä—Ç–æ—á–∫—É –∫–∞–∫ JSON + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    lesson = Lesson(
        title=card_data.get('question', f"Learning Card {lesson_count + 1}"),
        content=json.dumps(card_data, ensure_ascii=False),  # –ü–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞!
        content_type='learning_card',
        module_id=module.id,
        order=lesson_count + 1,
        subtopic=module_title,
        subtopic_slug=create_slug(module_title)
    )
    
    db.session.add(lesson)
    print(f"    üìö Created lesson: {lesson.title[:50]}... | Module Title: {module_title}")
    return lesson

def create_lesson_from_test(module, test_data):
    """–°–æ–∑–¥–∞–µ—Ç —É—Ä–æ–∫ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö –ø–æ–ª–µ–π"""
    lesson_count = Lesson.query.filter_by(module_id=module.id).count()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º module_title –∏–∑ —Ç–µ—Å—Ç–∞
    module_title = test_data.get('module_title', module.title)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–ï–°–¨ —Ç–µ—Å—Ç –∫–∞–∫ JSON
    lesson = Lesson(
        title=test_data.get('question', f"Test Question {lesson_count + 1}"),
        content=json.dumps(test_data, ensure_ascii=False),  # –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç!
        content_type='test_question',
        module_id=module.id,
        order=lesson_count + 1,
        subtopic=module_title,
        subtopic_slug=create_slug(module_title)
    )
    
    db.session.add(lesson)
    print(f"    üß™ Created lesson: {lesson.title[:50]}... | Module Title: {module_title}")
    return lesson

def clear_imported_content():
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    print("‚ö†Ô∏è  Clearing all imported content...")
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —É—Ä–æ–∫–∏
    lessons_count = Lesson.query.count()
    Lesson.query.delete()
    print(f"   üóëÔ∏è  Deleted {lessons_count} lessons")
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
    modules_count = Module.query.count()
    Module.query.delete()
    print(f"   üóëÔ∏è  Deleted {modules_count} modules")
    
    db.session.commit()
    print("‚úÖ Content cleared successfully!")

def create_app(test_config=None):
    """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Flask."""
    app = Flask(
        __name__,
        static_folder="static",
        static_url_path="/static",
        instance_relative_config=True
    )
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if test_config is None:
        app.config.from_pyfile('config.py', silent=True)
    else:
        app.config.from_mapping(test_config)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'dev_key_replace_in_production')
    app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL', 'sqlite:///app.db')
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    app.config['SUPPORTED_LANGUAGES'] = SUPPORTED_LANGUAGES
    app.config['DEFAULT_LANGUAGE'] = DEFAULT_LANGUAGE
    app.config['CACHE_TYPE'] = 'SimpleCache'
    app.config['SESSION_COOKIE_NAME'] = 'tandarts_session'  # –î–æ–±–∞–≤–ª–µ–Ω–æ: —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è cookie —Å–µ—Å—Å–∏–∏
    app.config['SESSION_COOKIE_SECURE'] = False  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ True –≤ production —Å HTTPS
    app.config['SESSION_COOKIE_HTTPONLY'] = True
    app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(days=30)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–µ—Å—Å–∏–∏
    

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö URL
    app.wsgi_app = ProxyFix(app.wsgi_app, x_for=1, x_proto=1, x_host=1)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    db.init_app(app)
    migrate = Migrate(app, db)
    bcrypt.init_app(app)
    csrf = CSRFProtect(app)
    cache.init_app(app)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏–Ω–∞ —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    login_manager.init_app(app)
    login_manager.login_view = 'auth_bp.login'
    login_manager.session_protection = 'basic'  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 'strong' –Ω–∞ 'basic' –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    login_manager.login_message = "Please log in to access this page."
    login_manager.refresh_view = 'auth_bp.login'
    login_manager.needs_refresh_message = "Please log in again to confirm your identity"
    
    @login_manager.user_loader
    def load_user(user_id):
        return db.session.get(User, int(user_id))    
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω Jinja2
    app.jinja_env.globals.update(t=get_translation)
    
    # –û–ë–™–ï–î–ò–ù–ï–ù–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —è–∑—ã–∫–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
    @app.before_request
    def handle_language_and_redirect():
        """–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ."""
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã, API –∑–∞–ø—Ä–æ—Å—ã –∏ —Ç.–¥.
        if request.path.startswith('/static/') or request.path == '/routes' or request.path == '/':
            return None
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –∏–∑ URL-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        lang_from_url = request.view_args.get('lang') if request.view_args else None
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ –≤ g
        if lang_from_url and lang_from_url in SUPPORTED_LANGUAGES:
            g.lang = lang_from_url
        else:
            # –ï—Å–ª–∏ –≤ URL –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞, –±–µ—Ä–µ–º –∏–∑ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ accept_languages
            g.lang = session.get('lang') \
                    or request.accept_languages.best_match(SUPPORTED_LANGUAGES) \
                    or DEFAULT_LANGUAGE
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —è–∑—ã–∫ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
        if session.get('lang') != g.lang:
            session['lang'] = g.lang
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —è–∑—ã–∫–æ–≤–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –≤ URL –∏ –¥–µ–ª–∞–µ–º –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        path_parts = request.path.lstrip('/').split('/')
        if not path_parts or path_parts[0] not in SUPPORTED_LANGUAGES:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π URL —Å —è–∑—ã–∫–æ–≤—ã–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
            new_url = f"/{g.lang}{request.path}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            if request.query_string:
                new_url = f"{new_url}?{request.query_string.decode('utf-8')}"
            
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ URL —Å —è–∑—ã–∫–æ–º
            return redirect(new_url)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ _creation_time –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ
        if '_creation_time' not in session:
            session['_creation_time'] = datetime.now().isoformat()
            
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏
        if 'user_id' in session:
            app.logger.debug(f"Session active for user_id: {session['user_id']}")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –≤ babel
    def get_locale():
        return g.get('lang', DEFAULT_LANGUAGE)

    babel.init_app(app, locale_selector=get_locale)
    
    # –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    @login_manager.unauthorized_handler
    def unauthorized():
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –∏–∑ g –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –∏–Ω–∞—á–µ –∏–∑ —Å–µ—Å—Å–∏–∏
        lang = g.get('lang', session.get('lang', DEFAULT_LANGUAGE))
        app.logger.warning(f"Unauthorized access attempt to: {request.path}, redirecting to login")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ next –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        return redirect(url_for('auth_bp.login', lang=lang, next=request.path))
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–µ—Å—Å–∏–∏
    @app.route('/debug-session')
    def debug_session():
        from flask_login import current_user
        debug_info = {
            'session_data': {k: v for k, v in session.items() if k != '_csrf_token'},
            'is_authenticated': hasattr(current_user, 'is_authenticated') and current_user.is_authenticated,
            'user_id': getattr(current_user, 'id', None) if hasattr(current_user, 'id') else None,
            'request_path': request.path,
            'g_data': {'lang': g.get('lang', 'not set')}
        }
        
        return jsonify(debug_info)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è CLI –∫–æ–º–∞–Ω–¥
    @app.cli.command()
    def import_content():
        """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ JSON —Ñ–∞–π–ª–æ–≤ –≤ –ë–î"""
        print("üöÄ Starting content import...")
        import_cards_from_folder()
        print("‚úÖ Content import completed!")
    
    @app.cli.command()
    def clear_content():
        """–û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
        print("üóëÔ∏è  Starting content cleanup...")
        clear_imported_content()
        print("‚úÖ Content cleanup completed!")
    
    @app.cli.command()
    def show_modules():
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ –≤ –ë–î"""
        modules = Module.query.all()
        print(f"\nüìö Found {len(modules)} modules in database:")
        for module in modules:
            lessons_count = Lesson.query.filter_by(module_id=module.id).count()
            print(f"   - {module.id}: {module.title} ({lessons_count} lessons)")

    @app.cli.command()
    def debug_lessons():
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —É—Ä–æ–∫–æ–≤ –≤ –ë–î –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        lessons = Lesson.query.limit(10).all()
        print(f"\nüìö Checking {len(lessons)} lessons structure:")
        
        for lesson in lessons:
            print(f"\n{'='*50}")
            print(f"Lesson ID: {lesson.id}")
            print(f"Title: {lesson.title}")
            print(f"Content Type: {lesson.content_type}")
            print(f"Module ID: {lesson.module_id}")
            
            if lesson.content:
                try:
                    content_data = json.loads(lesson.content)
                    print(f"Content keys: {list(content_data.keys())}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                    if 'cards' in content_data and content_data['cards']:
                        print(f"Cards count: {len(content_data['cards'])}")
                        first_card = content_data['cards'][0]
                        print(f"First card module_title: {first_card.get('module_title', 'NOT FOUND')}")
                        print(f"First card question: {first_card.get('question', 'NO QUESTION')[:50]}...")
                    
                    elif 'questions' in content_data and content_data['questions']:
                        print(f"Questions count: {len(content_data['questions'])}")
                        first_question = content_data['questions'][0]
                        print(f"First question module_title: {first_question.get('module_title', 'NOT FOUND')}")
                        print(f"First question text: {first_question.get('question', 'NO QUESTION')[:50]}...")
                    
                    else:
                        print(f"Unknown content structure")
                        
                except json.JSONDecodeError as e:
                    print(f"JSON Error: {e}")
                    print(f"Raw content preview: {lesson.content[:100]}...")
            else:
                print("No content")      
    @app.cli.command()
    def update_subtopics():
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—è subtopic –∏ subtopic_slug —É –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤"""
        print("üîÑ Updating subtopics in all lessons...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        import re
        
        def create_slug(text):
            """–°–æ–∑–¥–∞—ë—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–∞–≥ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
            if not text:
                return ""
            return re.sub(r'[^a-z0-9]+', '_', text.lower()).strip('_')
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Ä–æ–∫–∏
        lessons = Lesson.query.all()
        stats = {
            'total': len(lessons),
            'updated': 0,
            'skipped': 0,
            'errors': 0,
            'subtopics': {}
        }
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –≤–Ω—É—Ç—Ä–∏ –ø–æ–¥—Ç–µ–º
        subtopic_counters = {}
        
        for lesson in lessons:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º module_title –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                if not lesson.content:
                    print(f"‚ö†Ô∏è Lesson {lesson.id} has no content")
                    stats['skipped'] += 1
                    continue
                    
                content_data = json.loads(lesson.content)
                module_title = None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
                if 'module_title' in content_data:
                    module_title = content_data.get('module_title')
                elif 'type' in content_data and content_data.get('type') in ['learning', 'test']:
                    module_title = content_data.get('module_title')
                elif 'cards' in content_data and content_data['cards']:
                    module_title = content_data['cards'][0].get('module_title')
                elif 'questions' in content_data and content_data['questions']:
                    module_title = content_data['questions'][0].get('module_title')
                
                if not module_title:
                    print(f"‚ö†Ô∏è Lesson {lesson.id} has no module_title")
                    stats['skipped'] += 1
                    continue
                    
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–∞–≥
                slug = create_slug(module_title)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤–Ω—É—Ç—Ä–∏ –ø–æ–¥—Ç–µ–º—ã
                if slug not in subtopic_counters:
                    subtopic_counters[slug] = 0
                subtopic_counters[slug] += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
                lesson.subtopic = module_title
                lesson.subtopic_slug = slug
                lesson.subtopic_order = subtopic_counters[slug]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats['updated'] += 1
                if slug not in stats['subtopics']:
                    stats['subtopics'][slug] = {
                        'name': module_title,
                        'count': 0
                    }
                stats['subtopics'][slug]['count'] += 1
                    
            except Exception as e:
                print(f"‚ùå Error updating lesson {lesson.id}: {e}")
                stats['errors'] += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.session.commit()
        
        print(f"‚úÖ Updated {stats['updated']} of {stats['total']} lessons with subtopic information")
        print(f"‚ö†Ô∏è Skipped: {stats['skipped']} | ‚ùå Errors: {stats['errors']}")
        
        print("\nüìä Found subtopics:")
        for slug, data in stats['subtopics'].items():
            print(f"   - '{data['name']}' ({slug}): {data['count']} lessons")
    
    @app.cli.command()
    def debug_subtopics():
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–¥—Ç–µ–º –∏ –∏—Ö —Å–ª–∞–≥–æ–≤"""
        modules = Module.query.all()
        print(f"\nüìö Analyzing subtopics in {len(modules)} modules:")
        
        for module in modules:
            print(f"\nüìÇ MODULE: {module.id} - {module.title}")
            
            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–¥—Ç–µ–º—ã –∏–∑ –ë–î
            subtopics_data = db.session.query(
                Lesson.subtopic,
                Lesson.subtopic_slug,
                db.func.count(Lesson.id).label('total_lessons')
            ).filter(
                Lesson.module_id == module.id,
                Lesson.subtopic.isnot(None)
            ).group_by(
                Lesson.subtopic,
                Lesson.subtopic_slug
            ).all()
            
            if subtopics_data:
                print(f"   Found {len(subtopics_data)} subtopics:")
                for subtopic_name, subtopic_slug, total_lessons in subtopics_data:
                    print(f"   - Subtopic: '{subtopic_name}' (slug: '{subtopic_slug}')")
                    print(f"     Lessons: {total_lessons}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –ø–æ–¥—Ç–µ–º–µ
                    lesson_types = db.session.query(
                        Lesson.content_type, 
                        db.func.count(Lesson.id)
                    ).filter(
                        Lesson.module_id == module.id,
                        Lesson.subtopic_slug == subtopic_slug
                    ).group_by(Lesson.content_type).all()
                    
                    for content_type, count in lesson_types:
                        print(f"       {content_type}: {count}")
            else:
                print("   ‚ö†Ô∏è No subtopics found")
    
    @app.cli.command()
    def reorder_all_subtopics():
        """–ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ—Ç —É—Ä–æ–∫–∏ –≤–æ –≤—Å–µ—Ö –ø–æ–¥—Ç–µ–º–∞—Ö, —á–µ—Ä–µ–¥—É—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ —Ç–µ—Å—Ç—ã"""
        print("üîÑ Reordering lessons in all subtopics...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
        modules = Module.query.all()
        total_updated = 0
        
        for module in modules:
            print(f"\nüìÇ MODULE: {module.id} - {module.title}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥—Ç–µ–º—ã –º–æ–¥—É–ª—è
            subtopics_data = db.session.query(
                Lesson.subtopic,
                Lesson.subtopic_slug,
                db.func.count(Lesson.id).label('total_lessons')
            ).filter(
                Lesson.module_id == module.id,
                Lesson.subtopic.isnot(None)
            ).group_by(
                Lesson.subtopic,
                Lesson.subtopic_slug
            ).all()
            
            for subtopic_name, subtopic_slug, total_lessons in subtopics_data:
                print(f"   - Reordering subtopic: '{subtopic_name}'")
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Ä–æ–∫–∏ –ø–æ–¥—Ç–µ–º—ã
                lessons = Lesson.query.filter_by(
                    module_id=module.id,
                    subtopic_slug=subtopic_slug
                ).all()
                
                # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ —Ç–µ—Å—Ç—ã
                learning_cards = [l for l in lessons if l.content_type == 'learning_card']
                tests = [l for l in lessons if l.content_type == 'test_question']
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ—é—â–µ–º—É—Å—è –ø–æ—Ä—è–¥–∫—É
                learning_cards.sort(key=lambda x: x.order)
                tests.sort(key=lambda x: x.order)
                
                # –ß–µ—Ä–µ–¥—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ —Ç–µ—Å—Ç—ã
                new_order = []
                cards_index = 0
                tests_index = 0
                
                # –ë–µ—Ä–µ–º –ø–æ 2 –∫–∞—Ä—Ç–æ—á–∫–∏, –∑–∞—Ç–µ–º 1 —Ç–µ—Å—Ç
                while cards_index < len(learning_cards) or tests_index < len(tests):
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ 2 –∫–∞—Ä—Ç–æ—á–µ–∫
                    for _ in range(2):
                        if cards_index < len(learning_cards):
                            new_order.append(learning_cards[cards_index])
                            cards_index += 1
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º 1 —Ç–µ—Å—Ç
                    if tests_index < len(tests):
                        new_order.append(tests[tests_index])
                        tests_index += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫
                for i, lesson in enumerate(new_order):
                    lesson.subtopic_order = i + 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
                total_updated += len(new_order)
                print(f"     ‚úÖ Updated {len(new_order)} lessons")
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è
            db.session.commit()
            
        print(f"\nüéâ Total updated lessons: {total_updated}")
    
    @app.cli.command()
    def update_subtopics():
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—è subtopic –∏ subtopic_slug —É –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤"""
        print("üîÑ Updating subtopics in all lessons...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        import re
        import json
        
        def create_slug(text):
            """–°–æ–∑–¥–∞—ë—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–∞–≥ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
            if not text:
                return ""
            return re.sub(r'[^a-z0-9]+', '_', text.lower()).strip('_')
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Ä–æ–∫–∏
        lessons = Lesson.query.all()
        stats = {
            'total': len(lessons),
            'updated': 0,
            'skipped': 0,
            'errors': 0,
            'subtopics': {}
        }
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –≤–Ω—É—Ç—Ä–∏ –ø–æ–¥—Ç–µ–º
        subtopic_counters = {}
        
        for lesson in lessons:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º module_title –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                if not lesson.content:
                    print(f"‚ö†Ô∏è Lesson {lesson.id} has no content")
                    stats['skipped'] += 1
                    continue
                    
                content_data = json.loads(lesson.content)
                module_title = None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
                if 'module_title' in content_data:
                    module_title = content_data.get('module_title')
                elif 'type' in content_data and content_data.get('type') in ['learning', 'test']:
                    module_title = content_data.get('module_title')
                elif 'cards' in content_data and content_data['cards']:
                    for card in content_data['cards']:
                        if 'module_title' in card:
                            module_title = card.get('module_title')
                            break
                elif 'questions' in content_data and content_data['questions']:
                    for question in content_data['questions']:
                        if 'module_title' in question:
                            module_title = question.get('module_title')
                            break
                
                if not module_title:
                    print(f"‚ö†Ô∏è Lesson {lesson.id} has no module_title")
                    stats['skipped'] += 1
                    continue
                    
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–∞–≥
                slug = create_slug(module_title)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤–Ω—É—Ç—Ä–∏ –ø–æ–¥—Ç–µ–º—ã
                if slug not in subtopic_counters:
                    subtopic_counters[slug] = 0
                subtopic_counters[slug] += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
                lesson.subtopic = module_title
                lesson.subtopic_slug = slug
                lesson.subtopic_order = subtopic_counters[slug]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats['updated'] += 1
                if slug not in stats['subtopics']:
                    stats['subtopics'][slug] = {
                        'name': module_title,
                        'count': 0
                    }
                stats['subtopics'][slug]['count'] += 1
                    
            except Exception as e:
                print(f"‚ùå Error updating lesson {lesson.id}: {e}")
                stats['errors'] += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.session.commit()
        
        print(f"‚úÖ Updated {stats['updated']} of {stats['total']} lessons with subtopic information")
        print(f"‚ö†Ô∏è Skipped: {stats['skipped']} | ‚ùå Errors: {stats['errors']}")
        
        print("\nüìä Found subtopics:")
        for slug, data in stats['subtopics'].items():
            print(f"   - '{data['name']}' ({slug}): {data['count']} lessons")
            
    @app.cli.command()
    def reorder_subtopics():
        """–ü–µ—Ä–µ—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ—Ç —É—Ä–æ–∫–∏ –≤ –ø–æ–¥—Ç–µ–º–∞—Ö, —á–µ—Ä–µ–¥—É—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ —Ç–µ—Å—Ç—ã"""
        print("üîÑ Reordering lessons in all subtopics...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–¥—Ç–µ–º—ã —Å —É—Ä–æ–∫–∞–º–∏
        subtopics = db.session.query(
            Lesson.subtopic,
            Lesson.subtopic_slug
        ).filter(
            Lesson.subtopic.isnot(None),
            Lesson.subtopic_slug.isnot(None)
        ).distinct().all()
        
        total_updated = 0
        
        for subtopic_name, subtopic_slug in subtopics:
            print(f"   - Reordering subtopic: '{subtopic_name}'")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Ä–æ–∫–∏ –ø–æ–¥—Ç–µ–º—ã
            lessons = Lesson.query.filter_by(
                subtopic_slug=subtopic_slug
            ).all()
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ —Ç–µ—Å—Ç—ã
            learning_cards = [l for l in lessons if l.content_type == 'learning_card']
            tests = [l for l in lessons if l.content_type in ['quiz', 'test_question']]
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ—é—â–µ–º—É—Å—è –ø–æ—Ä—è–¥–∫—É
            learning_cards.sort(key=lambda x: x.order or 0)
            tests.sort(key=lambda x: x.order or 0)
            
            # –ß–µ—Ä–µ–¥—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ —Ç–µ—Å—Ç—ã (2 –∫–∞—Ä—Ç–æ—á–∫–∏, 1 —Ç–µ—Å—Ç)
            new_order = []
            cards_index = 0
            tests_index = 0
            
            # –ë–µ—Ä–µ–º –ø–æ 2 –∫–∞—Ä—Ç–æ—á–∫–∏, –∑–∞—Ç–µ–º 1 —Ç–µ—Å—Ç
            while cards_index < len(learning_cards) or tests_index < len(tests):
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ 2 –∫–∞—Ä—Ç–æ—á–µ–∫
                for _ in range(2):
                    if cards_index < len(learning_cards):
                        new_order.append(learning_cards[cards_index])
                        cards_index += 1
                
                # –î–æ–±–∞–≤–ª—è–µ–º 1 —Ç–µ—Å—Ç
                if tests_index < len(tests):
                    new_order.append(tests[tests_index])
                    tests_index += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫
            for i, lesson in enumerate(new_order):
                lesson.subtopic_order = i + 1
                total_updated += 1
            
            print(f"     ‚úÖ Updated {len(new_order)} lessons")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.session.commit()
        
        print(f"\nüéâ Total updated lessons: {total_updated}")

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Blueprint'–æ–≤
    app.register_blueprint(main_bp)
    app.register_blueprint(auth_bp)
    app.register_blueprint(virtual_patient_bp)
    app.register_blueprint(lesson_bp)
    app.register_blueprint(forum_bp)  
    app.register_blueprint(admin_bp)
    app.register_blueprint(api_bp)
    app.register_blueprint(tests_bp, url_prefix='/<string:lang>/tests')
    app.register_blueprint(learning_map_bp)
    app.register_blueprint(dashboard_bp)
    app.register_blueprint(modules_bp)  
    app.register_blueprint(subject_view_bp)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
    @app.context_processor
    def inject_global_vars():
        return dict(
            current_year=datetime.now().year,
            app_name="Become a Tandarts",
            supported_languages=SUPPORTED_LANGUAGES,
            config=app.config
        )
    
    print(f"Registered blueprint: {subject_view_bp.name} with url_prefix: {subject_view_bp.url_prefix}")

    @app.route('/routes')
    def list_routes():
        routes = []
        for rule in app.url_map.iter_rules():
            routes.append({
                "endpoint": rule.endpoint,
                "methods": list(rule.methods),
                "route": str(rule)
            })
        return jsonify(routes)
    
    # –°—Ç—Ä–∞–Ω–∏—Ü–∞ 404
    @app.errorhandler(404)
    def page_not_found(e):
        return render_template('404.html'), 404
    
    # –°—Ç—Ä–∞–Ω–∏—Ü–∞ 500
    @app.errorhandler(500)
    def internal_error(e):
        db.session.rollback()
        return render_template('500.html'), 500
    
    # –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —è–∑—ã–∫–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ—Ä–Ω—è
    @app.route('/')
    def index():
        return redirect(url_for('main_bp.home', lang=DEFAULT_LANGUAGE))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
    register_template_filters(app)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î (–Ω–æ –ù–ï –∑–∞–≥—Ä—É–∂–∞–µ–º JSON - —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ CLI –∫–æ–º–∞–Ω–¥—ã)
    with app.app_context():
        try:
            db.create_all()
            logger.info("‚úÖ Database tables created successfully")
        except Exception as e:
            logger.error(f"‚ùå Error creating database tables: {e}")

    init_mobile_integration(app)
    init_mobile_helpers(app)

    return app

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = create_app()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.template_filter('fromjson')
def fromjson_filter_global(value):
    """Jinja2 —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è JSON-—Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç Python."""
    if value is None or value == '':
        return {}
    try:
        return json.loads(value)
    except (json.JSONDecodeError, TypeError):
        return {}
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ —à–∞–±–ª–æ–Ω–∞—Ö
@app.context_processor
def inject_gamification_data():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤"""
    
    def get_user_level():
        if current_user.is_authenticated:
            try:
                from utils.gamification_engine import GamificationEngine
                from extensions import db
                gamification = GamificationEngine(db.session)
                stats = gamification.get_or_create_user_stats(current_user.id)
                return stats.current_level
            except:
                return 1
        return 1
    
    def get_user_xp():
        if current_user.is_authenticated:
            try:
                from utils.gamification_engine import GamificationEngine
                from extensions import db
                gamification = GamificationEngine(db.session)
                stats = gamification.get_or_create_user_stats(current_user.id)
                return stats.total_experience_points
            except:
                return 0
        return 0
    
    def get_user_progress_to_next_level():
        if current_user.is_authenticated:
            try:
                from utils.gamification_engine import GamificationEngine
                from extensions import db
                gamification = GamificationEngine(db.session)
                stats = gamification.get_or_create_user_stats(current_user.id)
                return stats.points_to_next_level
            except:
                return 100
        return 100
    
    return dict(
        get_user_level=get_user_level,
        get_user_xp=get_user_xp,
        get_user_progress_to_next_level=get_user_progress_to_next_level
    )
if __name__ == '__main__':
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    print("\n" + "="*50)
    print("üöÄ STARTING BECOME A TANDARTS APPLICATION")
    print("="*50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥–æ–≤
    cards_dir = os.path.join(os.getcwd(), 'cards')
    print(f"üìÇ Cards directory: {cards_dir}")
    print(f"üìÇ Directory exists: {os.path.exists(cards_dir)}")
    
    if os.path.exists(cards_dir):
        subdirs = [d for d in os.listdir(cards_dir) if os.path.isdir(os.path.join(cards_dir, d))]
        print(f"üìÅ Available topic folders: {subdirs}")
        
        for subdir in subdirs:
            subdir_path = os.path.join(cards_dir, subdir)
            files = os.listdir(subdir_path)
            json_files = [f for f in files if f.endswith('.json')]
            print(f"   üìÅ {subdir}/: {json_files}")
    else:
        print("‚ö†Ô∏è  WARNING: Cards directory not found!")
        print(f"   Current working directory: {os.getcwd()}")
        print(f"   Expected directory: {cards_dir}")
        print("   üí° To import content, create the cards/ directory with JSON files")
        print("      Then run: flask import-content")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª—è—Ö –≤ –ë–î
    with app.app_context():
        try:
            modules = Module.query.all()
            print(f"\nüìö Database modules ({len(modules)} total):")
            for module in modules:
                lessons_count = Lesson.query.filter_by(module_id=module.id).count()
                print(f"   - ID {module.id}: {module.title} ({lessons_count} lessons)")
            
            if len(modules) == 0:
                print("   ‚ÑπÔ∏è  No modules found in database.")
                print("      To import content from JSON files, run: flask import-content")
        except Exception as e:
            print(f"‚ùå Error querying database: {e}")
    
    print("="*50)
    print("üåê Starting Flask development server...")
    print("üí° Available CLI commands:")
    print("   - flask import-content  : Import JSON files to database")
    print("   - flask clear-content   : Clear all imported content")
    print("   - flask show-modules    : Show all modules in database")
    print("="*50 + "\n")
    
    app.run(debug=True)