#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
"""

import json
from app import create_app
from models import db, ContentCategory, ContentSubcategory, ContentTopic, Lesson, Module, Subject, LearningPath

def create_slug(text):
    """–°–æ–∑–¥–∞–µ—Ç URL-friendly slug –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    import re
    import unicodedata
    
    if not text:
        return ""
    
    # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    text = re.sub(r'<[^>]+>', '', text)
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º unicode —Å–∏–º–≤–æ–ª—ã
    text = unicodedata.normalize('NFKD', text)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    text = text.lower()
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
    text = re.sub(r'[^\w\s-]', '', text)
    text = re.sub(r'[-\s]+', '-', text)
    
    # –£–¥–∞–ª—è–µ–º –¥–µ—Ñ–∏—Å—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    text = text.strip('-')
    
    return text[:50]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É

def create_test_content():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"""
    
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    
    # 1. –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories_data = [
        {
            'name': '–ê–Ω–∞—Ç–æ–º–∏—è –∑—É–±–∞',
            'icon': 'diagram-3',
            'subcategories': [
                {
                    'name': '–°—Ç—Ä–æ–µ–Ω–∏–µ –∑—É–±–∞',
                    'icon': 'gear',
                    'topics': [
                        {
                            'name': '–ö–æ—Ä–æ–Ω–∫–∞ –∑—É–±–∞',
                            'description': '–ò–∑—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–µ–Ω–∏—è –∫–æ—Ä–æ–Ω–∫–∏ –∑—É–±–∞'
                        },
                        {
                            'name': '–ö–æ—Ä–µ–Ω—å –∑—É–±–∞',
                            'description': '–ê–Ω–∞—Ç–æ–º–∏—è –∫–æ—Ä–Ω–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã'
                        }
                    ]
                }
            ]
        },
        {
            'name': '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è',
            'icon': 'bug',
            'subcategories': [
                {
                    'name': '–ö–∞—Ä–∏–µ—Å',
                    'icon': 'exclamation-triangle',
                    'topics': [
                        {
                            'name': '–≠—Ç–∏–æ–ª–æ–≥–∏—è –∫–∞—Ä–∏–µ—Å–∞',
                            'description': '–ü—Ä–∏—á–∏–Ω—ã –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –∫–∞—Ä–∏–µ—Å–∞'
                        }
                    ]
                }
            ]
        }
    ]
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    for cat_data in categories_data:
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {cat_data['name']}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = ContentCategory(
            name=cat_data['name'],
            slug=create_slug(cat_data['name']),
            icon=cat_data['icon'],
            order=len(ContentCategory.query.all()) + 1
        )
        db.session.add(category)
        db.session.flush()
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for subcat_data in cat_data['subcategories']:
            print(f"  üìÇ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {subcat_data['name']}")
            
            subcategory = ContentSubcategory(
                name=subcat_data['name'],
                slug=create_slug(subcat_data['name']),
                category_id=category.id,
                icon=subcat_data['icon'],
                order=len(category.subcategories.all()) + 1
            )
            db.session.add(subcategory)
            db.session.flush()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–º—ã
            for topic_data in subcat_data['topics']:
                print(f"    üìÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º—ã: {topic_data['name']}")
                
                topic = ContentTopic(
                    name=topic_data['name'],
                    slug=create_slug(topic_data['name']),
                    subcategory_id=subcategory.id,
                    description=topic_data['description'],
                    order=len(subcategory.topics.all()) + 1
                )
                db.session.add(topic)
                db.session.flush()
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —É—Ä–æ–∫–∏ –¥–ª—è —Ç–µ–º—ã
                create_test_lessons_for_topic(topic)
    
    db.session.commit()
    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω!")

def create_test_lessons_for_topic(topic):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —É—Ä–æ–∫–∏ –¥–ª—è —Ç–µ–º—ã"""
    
    # –ù–∞–π–¥–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–¥–∏–º –º–æ–¥—É–ª—å –¥–ª—è —Å–≤—è–∑–∏
    module = Module.query.first()
    if not module:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–æ–¥—É–ª—å
        learning_path = LearningPath.query.first()
        if not learning_path:
            learning_path = LearningPath(
                name="–¢–µ—Å—Ç–æ–≤—ã–π –ø—É—Ç—å –æ–±—É—á–µ–Ω–∏—è",
                description="–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                order=1
            )
            db.session.add(learning_path)
            db.session.flush()
        
        subject = Subject.query.first()
        if not subject:
            subject = Subject(
                name="–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç",
                description="–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                learning_path_id=learning_path.id,
                order=1
            )
            db.session.add(subject)
            db.session.flush()
        
        module = Module(
            title="–¢–µ—Å—Ç–æ–≤—ã–π –º–æ–¥—É–ª—å",
            description="–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
            subject_id=subject.id,
            order=1
        )
        db.session.add(module)
        db.session.flush()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–∫
    theory_content = {
        "cards": [
            {
                "question": f"–ß—Ç–æ —Ç–∞–∫–æ–µ {topic.name}?",
                "answer": f"–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ {topic.name}. –≠—Ç–æ –≤–∞–∂–Ω–∞—è —Ç–µ–º–∞ –≤ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏.",
                "tags": ["—Ç–µ–æ—Ä–∏—è", "–æ—Å–Ω–æ–≤—ã"]
            }
        ]
    }
    
    theory_lesson = Lesson(
        title=f"{topic.name} - –¢–µ–æ—Ä–∏—è",
        module_id=module.id,
        content_type='learning_card',
        content=json.dumps(theory_content, ensure_ascii=False),
        order=1,
        topic_id=topic.id
    )
    db.session.add(theory_lesson)
    
    print(f"      ‚úÖ –°–æ–∑–¥–∞–Ω —É—Ä–æ–∫ –¥–ª—è —Ç–µ–º—ã {topic.name}")

if __name__ == '__main__':
    app = create_app()
    
    with app.app_context():
        try:
            create_test_content()
            
            print("\nüéâ –ì–û–¢–û–í–û! –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω.")
            print("üìã –°–æ–∑–¥–∞–Ω–æ:")
            print(f"   - –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {ContentCategory.query.count()}")
            print(f"   - –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {ContentSubcategory.query.count()}")
            print(f"   - –¢–µ–º: {ContentTopic.query.count()}")
            print("\nüåê –ü–µ—Ä–µ–π–¥–∏ –ø–æ –∞–¥—Ä–µ—Å—É: http://127.0.0.1:5000/ru/learn/")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            db.session.rollback()
            raise
