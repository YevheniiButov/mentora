<!-- templates/virtual_patient/achievements.html -->

{% extends "base.html" %}

{% block title %}Достижения и прогресс - Become a Tandarts{% endblock %}

{% block styles %}
{{ super() }}
<style>
    .achievements-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
    }

    .progress-overview {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        border-radius: 20px;
        padding: 2rem;
        margin-bottom: 2rem;
        position: relative;
        overflow: hidden;
    }

    .progress-overview::before {
        content: '';
        position: absolute;
        top: -50%;
        right: -50%;
        width: 200%;
        height: 200%;
        background: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Ccircle cx='50' cy='50' r='2' fill='rgba(255,255,255,0.1)'/%3E%3C/svg%3E") repeat;
        animation: float 20s linear infinite;
    }

    @keyframes float {
        0% { transform: translateX(0) translateY(0); }
        100% { transform: translateX(-100px) translateY(-100px); }
    }

    .level-display {
        display: flex;
        align-items: center;
        gap: 2rem;
        margin-bottom: 2rem;
    }

    .level-circle {
        position: relative;
        width: 120px;
        height: 120px;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.2);
        display: flex;
        align-items: center;
        justify-content: center;
        backdrop-filter: blur(10px);
    }

    .level-number {
        font-size: 2.5rem;
        font-weight: bold;
    }

    .progress-info h2 {
        margin: 0 0 0.5rem;
        font-size: 2rem;
    }

    .xp-bar {
        background: rgba(255, 255, 255, 0.2);
        border-radius: 20px;
        height: 10px;
        overflow: hidden;
        margin-top: 1rem;
    }

    .xp-fill {
        background: rgba(255, 255, 255, 0.8);
        height: 100%;
        border-radius: 20px;
        transition: width 0.8s ease;
    }

    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .stat-card {
        background: white;
        border-radius: 16px;
        padding: 1.5rem;
        box-shadow: 0 4px 16px rgba(0,0,0,0.08);
        text-align: center;
        transition: transform 0.3s ease;
    }

    .stat-card:hover {
        transform: translateY(-5px);
    }

    .stat-icon {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        margin: 0 auto 1rem;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        color: white;
    }

    .stat-icon.scenarios { background: linear-gradient(135deg, #667eea, #764ba2); }
    .stat-icon.streak { background: linear-gradient(135deg, #f093fb, #f5576c); }
    .stat-icon.score { background: linear-gradient(135deg, #4facfe, #00f2fe); }
    .stat-icon.time { background: linear-gradient(135deg, #43e97b, #38f9d7); }

    .stat-value {
        font-size: 2rem;
        font-weight: bold;
        color: var(--text-primary);
        margin-bottom: 0.5rem;
    }

    .stat-label {
        color: var(--text-secondary);
        font-size: 0.9rem;
    }

    .achievements-section {
        margin-bottom: 3rem;
    }

    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }

    .achievement-filters {
        display: flex;
        gap: 1rem;
    }

    .filter-btn {
        padding: 0.5rem 1rem;
        border: 2px solid var(--border-color);
        border-radius: 20px;
        background: white;
        cursor: pointer;
        transition: all 0.3s;
        font-size: 0.9rem;
    }

    .filter-btn.active {
        background: var(--primary-color);
        color: white;
        border-color: var(--primary-color);
    }

    .achievements-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 1.5rem;
    }

    .achievement-card {
        background: white;
        border-radius: 16px;
        padding: 1.5rem;
        box-shadow: 0 4px 16px rgba(0,0,0,0.08);
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

    .achievement-card.earned {
        border: 2px solid var(--primary-color);
        box-shadow: 0 4px 20px rgba(62, 205, 193, 0.2);
    }

    .achievement-card.locked {
        opacity: 0.6;
        filter: grayscale(1);
    }

    .achievement-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 24px rgba(0,0,0,0.12);
    }

    .achievement-rarity {
        position: absolute;
        top: 0;
        right: 0;
        padding: 0.5rem 1rem;
        border-radius: 0 16px 0 16px;
        font-size: 0.75rem;
        font-weight: bold;
        text-transform: uppercase;
    }

    .rarity-common { background: #95a5a6; color: white; }
    .rarity-uncommon { background: #2ecc71; color: white; }
    .rarity-rare { background: #3498db; color: white; }
    .rarity-epic { background: #9b59b6; color: white; }
    .rarity-legendary { background: #f39c12; color: white; }

    .achievement-icon {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        background: var(--background-light);
        margin: 0 auto 1rem;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 2rem;
        position: relative;
    }

    .achievement-card.earned .achievement-icon {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        animation: glow 2s ease-in-out infinite alternate;
    }

    @keyframes glow {
        from { box-shadow: 0 0 10px rgba(62, 205, 193, 0.5); }
        to { box-shadow: 0 0 20px rgba(62, 205, 193, 0.8); }
    }

    .achievement-title {
        font-size: 1.1rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
        color: var(--text-primary);
    }

    .achievement-description {
        color: var(--text-secondary);
        font-size: 0.9rem;
        line-height: 1.4;
        margin-bottom: 1rem;
    }

    .achievement-progress {
        background: var(--background-light);
        border-radius: 10px;
        height: 8px;
        overflow: hidden;
        margin-bottom: 0.5rem;
    }

    .achievement-progress-fill {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        height: 100%;
        border-radius: 10px;
        transition: width 0.8s ease;
    }

    .achievement-points {
        text-align: center;
        color: var(--primary-color);
        font-weight: bold;
        font-size: 0.9rem;
    }

    .leaderboards-section {
        background: white;
        border-radius: 20px;
        padding: 2rem;
        box-shadow: 0 4px 16px rgba(0,0,0,0.08);
    }

    .leaderboard-tabs {
        display: flex;
        margin-bottom: 2rem;
        border-bottom: 1px solid var(--border-color);
    }

    .leaderboard-tab {
        padding: 1rem 2rem;
        cursor: pointer;
        border-bottom: 3px solid transparent;
        transition: all 0.3s;
        font-weight: 500;
    }

    .leaderboard-tab.active {
        color: var(--primary-color);
        border-bottom-color: var(--primary-color);
    }

    .leaderboard-list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .leaderboard-item {
        display: flex;
        align-items: center;
        padding: 1rem;
        background: var(--background-light);
        border-radius: 12px;
        transition: all 0.3s ease;
    }

    .leaderboard-item:hover {
        background: rgba(62, 205, 193, 0.05);
        transform: translateX(5px);
    }

    .leaderboard-rank {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: var(--primary-color);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        margin-right: 1rem;
    }

    .leaderboard-rank.first { background: #f39c12; }
    .leaderboard-rank.second { background: #95a5a6; }
    .leaderboard-rank.third { background: #cd7f32; }

    .leaderboard-info {
        flex: 1;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .leaderboard-name {
        font-weight: 500;
        color: var(--text-primary);
    }

    .leaderboard-value {
        font-weight: bold;
        color: var(--primary-color);
    }

    .your-position {
        background: rgba(62, 205, 193, 0.1);
        border: 2px solid var(--primary-color);
    }

    .recent-achievements {
        background: white;
        border-radius: 20px;
        padding: 2rem;
        margin-top: 2rem;
        box-shadow: 0 4px 16px rgba(0,0,0,0.08);
    }

    .recent-achievement-item {
        display: flex;
        align-items: center;
        padding: 1rem;
        border-bottom: 1px solid var(--border-color);
        animation: slideInLeft 0.5s ease;
    }

    .recent-achievement-item:last-child {
        border-bottom: none;
    }

    @keyframes slideInLeft {
        from { opacity: 0; transform: translateX(-20px); }
        to { opacity: 1; transform: translateX(0); }
    }

    .recent-achievement-icon {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 1rem;
        font-size: 1.2rem;
    }

    .recent-achievement-info {
        flex: 1;
    }

    .recent-achievement-title {
        font-weight: bold;
        color: var(--text-primary);
        margin-bottom: 0.25rem;
    }

    .recent-achievement-date {
        color: var(--text-secondary);
        font-size: 0.85rem;
    }

    .celebration-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        display: none;
        justify-content: center;
        align-items: center;
        z-index: 10000;
    }

    .celebration-content {
        background: white;
        border-radius: 20px;
        padding: 3rem;
        text-align: center;
        max-width: 400px;
        position: relative;
        animation: celebrationPop 0.6s ease;
    }

    @keyframes celebrationPop {
        0% { transform: scale(0.3) rotate(-15deg); opacity: 0; }
        50% { transform: scale(1.1) rotate(5deg); }
        100% { transform: scale(1) rotate(0deg); opacity: 1; }
    }

    .celebration-fireworks {
        position: absolute;
        top: -50px;
        left: -50px;
        right: -50px;
        bottom: -50px;
        pointer-events: none;
    }

    .firework {
        position: absolute;
        width: 6px;
        height: 6px;
        border-radius: 50%;
        animation: fireworkExplode 1.5s ease-out;
    }

    @keyframes fireworkExplode {
        0% { transform: scale(0); opacity: 1; }
        100% { transform: scale(20); opacity: 0; }
    }

    /* Адаптивность */
    @media (max-width: 768px) {
        .achievements-container {
            padding: 1rem;
        }

        .level-display {
            flex-direction: column;
            text-align: center;
        }

        .stats-grid {
            grid-template-columns: repeat(2, 1fr);
        }

        .achievements-grid {
            grid-template-columns: 1fr;
        }

        .achievement-filters {
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .leaderboard-tabs {
            flex-wrap: wrap;
        }

        .leaderboard-tab {
            padding: 0.75rem 1rem;
            font-size: 0.9rem;
        }
    }
</style>
{% endblock %}

{% block content %}
<div class="achievements-container">
    <!-- Общий прогресс -->
    <div class="progress-overview">
        <div class="level-display">
            <div class="level-circle">
                <div class="level-number">{{ user_stats.current_level }}</div>
            </div>
            <div class="progress-info">
                <h2>Уровень {{ user_stats.current_level }}</h2>
                <p>{{ user_stats.total_experience_points }} XP • До следующего уровня: {{ user_stats.points_to_next_level }} XP</p>
                <div class="xp-bar">
                    <div class="xp-fill" style="width: {{ ((user_stats.total_experience_points - get_level_threshold(user_stats.current_level - 1)) / (get_level_threshold(user_stats.current_level) - get_level_threshold(user_stats.current_level - 1))) * 100 }}%"></div>
                </div>
            </div>
        </div>
    </div>

    <!-- Статистики -->
    <div class="stats-grid">
        <div class="stat-card">
            <div class="stat-icon scenarios">
                <i class="bi bi-play-circle"></i>
            </div>
            <div class="stat-value">{{ user_stats.total_scenarios_completed }}</div>
            <div class="stat-label">Сценариев завершено</div>
        </div>

        <div class="stat-card">
            <div class="stat-icon streak">
                <i class="bi bi-fire"></i>
            </div>
            <div class="stat-value">{{ user_stats.current_streak_days }}</div>
            <div class="stat-label">Дней подряд</div>
        </div>

        <div class="stat-card">
            <div class="stat-icon score">
                <i class="bi bi-trophy"></i>
            </div>
            <div class="stat-value">{{ user_stats.average_score_percentage|round }}%</div>
            <div class="stat-label">Средний результат</div>
        </div>

        <div class="stat-card">
            <div class="stat-icon time">
                <i class="bi bi-clock"></i>
            </div>
            <div class="stat-value">{{ (user_stats.total_time_spent_minutes / 60)|round(1) }}ч</div>
            <div class="stat-label">Время обучения</div>
        </div>
    </div>

    <!-- Достижения -->
    <div class="achievements-section">
        <div class="section-header">
            <h2>Достижения ({{ achievements_summary.total_earned }}/{{ achievements_summary.total_available }})</h2>
            <div class="achievement-filters">
                <button class="filter-btn active" data-filter="all">Все</button>
                <button class="filter-btn" data-filter="earned">Получены</button>
                <button class="filter-btn" data-filter="locked">Заблокированы</button>
                <button class="filter-btn" data-filter="completion">Завершение</button>
                <button class="filter-btn" data-filter="performance">Результаты</button>
                <button class="filter-btn" data-filter="consistency">Постоянство</button>
            </div>
        </div>

        <div class="achievements-grid" id="achievements-grid">
            {% for achievement in all_achievements %}
            {% set user_achievement = user_achievements_dict.get(achievement.id) %}
            {% set is_earned = user_achievement is not none %}
            
            <div class="achievement-card {{ 'earned' if is_earned else 'locked' }}" 
                 data-type="{{ achievement.type }}" 
                 data-rarity="{{ achievement.rarity }}">
                
                <div class="achievement-rarity rarity-{{ achievement.rarity }}">
                    {{ achievement.rarity|title }}
                </div>
                
                <div class="achievement-icon">
                    <i class="bi bi-{{ achievement.icon }}"></i>
                </div>
                
                <div class="achievement-title">{{ achievement.name }}</div>
                <div class="achievement-description">{{ achievement.description }}</div>
                
                {% if not is_earned and achievement.requirement %}
                    {% set requirement = achievement.requirement|from_json %}
                    {% if requirement.progress_type == 'incremental' %}
                    <div class="achievement-progress">
                        <div class="achievement-progress-fill" 
                             style="width: {{ '%.1f'|format((get_user_progress_for_achievement(current_user.id, achievement.id) / requirement.target) * 100) }}%;"></div>
                    </div>
                    <div style="font-size: 0.8rem; color: var(--text-secondary); margin-bottom: 0.5rem;">
                        {{ get_user_progress_for_achievement(current_user.id, achievement.id) }}/{{ requirement.target }}
                    </div>
                    {% endif %}
                {% endif %}
                
                <div class="achievement-points">
                    {% if is_earned %}
                        <i class="bi bi-check-circle"></i> Получено
                    {% else %}
                        +{{ achievement.points }} XP
                    {% endif %}
                </div>
                
                {% if is_earned %}
                <div style="font-size: 0.75rem; color: var(--text-secondary); margin-top: 0.5rem;">
                    Получено: {{ user_achievement.earned_at.strftime('%d.%m.%Y') }}
                </div>
                {% endif %}
            </div>
            {% endfor %}
        </div>
    </div>

    <!-- Таблицы лидеров -->
    <div class="leaderboards-section">
        <h2>Таблицы лидеров</h2>
        
        <div class="leaderboard-tabs">
            <div class="leaderboard-tab active" data-category="weekly">Неделя</div>
            <div class="leaderboard-tab" data-category="monthly">Месяц</div>
            <div class="leaderboard-tab" data-category="all_time">Все время</div>
        </div>

        <div class="leaderboard-content">
            <div class="leaderboard-list" id="weekly-leaderboard">
                {% for entry in weekly_leaderboard %}
                <div class="leaderboard-item {{ 'your-position' if entry.user_id == current_user.id }}">
                    <div class="leaderboard-rank {{ 'first' if entry.rank == 1 else 'second' if entry.rank == 2 else 'third' if entry.rank == 3 }}">
                        {{ entry.rank }}
                    </div>
                    <div class="leaderboard-info">
                        <div class="leaderboard-name">
                            {{ entry.user_name }}
                            {% if entry.user_id == current_user.id %}(Вы){% endif %}
                        </div>
                        <div class="leaderboard-value">{{ entry.value|round }} баллов</div>
                    </div>
                </div>
                {% endfor %}
            </div>
        </div>
    </div>

    <!-- Недавние достижения -->
    {% if achievements_summary.recent_achievements %}
    <div class="recent-achievements">
        <h3>Недавние достижения</h3>
        {% for achievement in achievements_summary.recent_achievements %}
        <div class="recent-achievement-item">
            <div class="recent-achievement-icon">
                <i class="bi bi-{{ achievement.icon }}"></i>
            </div>
            <div class="recent-achievement-info">
                <div class="recent-achievement-title">{{ achievement.name }}</div>
                <div class="recent-achievement-date">
                    {{ user_achievements_dict[achievement.id].earned_at.strftime('%d %B %Y') }}
                </div>
            </div>
        </div>
        {% endfor %}
    </div>
    {% endif %}
</div>

<!-- Модальное окно празднования достижения -->
<div class="celebration-modal" id="celebration-modal">
    <div class="celebration-content">
        <div class="celebration-fireworks"></div>
        <div style="font-size: 3rem; margin-bottom: 1rem;">🎉</div>
        <h2>Поздравляем!</h2>
        <p>Вы получили новое достижение!</p>
        <div id="new-achievement-info"></div>
        <button class="btn btn-primary" onclick="closeCelebration()">Отлично!</button>
    </div>
</div>
{% endblock %}

{% block body_scripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Фильтрация достижений
    const filterBtns = document.querySelectorAll('.filter-btn');
    const achievementCards = document.querySelectorAll('.achievement-card');
    
    filterBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            // Обновляем активную кнопку
            filterBtns.forEach(b => b.classList.remove('active'));
            this.classList.add('active');
            
            const filter = this.dataset.filter;
            
            achievementCards.forEach(card => {
                const shouldShow = filter === 'all' || 
                                 (filter === 'earned' && card.classList.contains('earned')) ||
                                 (filter === 'locked' && card.classList.contains('locked')) ||
                                 card.dataset.type === filter;
                
                if (shouldShow) {
                    card.style.display = 'block';
                    setTimeout(() => {
                        card.style.opacity = '1';
                        card.style.transform = 'translateY(0)';
                    }, 50);
                } else {
                    card.style.opacity = '0';
                    card.style.transform = 'translateY(20px)';
                    setTimeout(() => {
                        card.style.display = 'none';
                    }, 300);
                }
            });
        });
    });
    
    // Переключение таблиц лидеров
    const leaderboardTabs = document.querySelectorAll('.leaderboard-tab');
    
    leaderboardTabs.forEach(tab => {
        tab.addEventListener('click', function() {
            leaderboardTabs.forEach(t => t.classList.remove('active'));
            this.classList.add('active');
            
            const category = this.dataset.category;
            loadLeaderboard(category);
        });
    });
    
    // Анимация появления при загрузке
    animateElements();
    
    // Проверяем новые достижения
    checkForNewAchievements();
});

function loadLeaderboard(category) {
    // Загружаем данные таблицы лидеров через AJAX
    fetch(`/{{ lang }}/virtual-patient/api/leaderboard/${category}`)
        .then(response => response.json())
        .then(data => {
            updateLeaderboardDisplay(data);
        })
        .catch(error => {
            console.error('Error loading leaderboard:', error);
        });
}

function updateLeaderboardDisplay(data) {
    const container = document.querySelector('.leaderboard-list');
    container.innerHTML = '';
    
    data.forEach(entry => {
        const item = document.createElement('div');
        item.className = `leaderboard-item ${entry.user_id === {{ current_user.id }} ? 'your-position' : ''}`;
        
        const rankClass = entry.rank === 1 ? 'first' : entry.rank === 2 ? 'second' : entry.rank === 3 ? 'third' : '';
        
        item.innerHTML = `
            <div class="leaderboard-rank ${rankClass}">${entry.rank}</div>
            <div class="leaderboard-info">
                <div class="leaderboard-name">
                    ${entry.user_name}
                    ${entry.user_id === {{ current_user.id }} ? '(Вы)' : ''}
                </div>
                <div class="leaderboard-value">${Math.round(entry.value)} баллов</div>
            </div>
        `;
        
        container.appendChild(item);
    });
}

function animateElements() {
    const cards = document.querySelectorAll('.achievement-card, .stat-card');
    
    cards.forEach((card, index) => {
        card.style.opacity = '0';
        card.style.transform = 'translateY(20px)';
        
        setTimeout(() => {
            card.style.transition = 'all 0.5s ease';
            card.style.opacity = '1';
            card.style.transform = 'translateY(0)';
        }, index * 100);
    });
}

function checkForNewAchievements() {
    // Проверяем, есть ли новые достижения для отображения
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.get('new_achievement')) {
        const achievementId = urlParams.get('achievement_id');
        showCelebration(achievementId);
    }
}

function showCelebration(achievementId) {
    // Получаем информацию о достижении
    fetch(`/{{ lang }}/virtual-patient/api/achievement/${achievementId}`)
        .then(response => response.json())
        .then(achievement => {
            const modal = document.getElementById('celebration-modal');
            const info = document.getElementById('new-achievement-info');
            
            info.innerHTML = `
                <div style="margin: 1rem 0;">
                    <div style="font-size: 4rem; margin-bottom: 1rem;">
                        <i class="bi bi-${achievement.icon}"></i>
                    </div>
                    <h3>${achievement.name}</h3>
                    <p>${achievement.description}</p>
                    <div style="color: var(--primary-color); font-weight: bold;">
                        +${achievement.points} XP
                    </div>
                </div>
            `;
            
            // Создаем фейерверки
            createFireworks();
            
            modal.style.display = 'flex';
            
            // Убираем параметр из URL
            const newUrl = window.location.pathname;
            window.history.replaceState({}, document.title, newUrl);
        });
}

function createFireworks() {
    const container = document.querySelector('.celebration-fireworks');
    const colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#f9ca24', '#f0932b', '#eb4d4b'];
    
    for (let i = 0; i < 20; i++) {
        setTimeout(() => {
            const firework = document.createElement('div');
            firework.className = 'firework';
            firework.style.background = colors[Math.floor(Math.random() * colors.length)];
            firework.style.left = Math.random() * 100 + '%';
            firework.style.top = Math.random() * 100 + '%';
            
            container.appendChild(firework);
            
            setTimeout(() => {
                firework.remove();
            }, 1500);
        }, i * 100);
    }
}

function closeCelebration() {
    document.getElementById('celebration-modal').style.display = 'none';
}

// Анимация счетчиков
function animateCounters() {
    const counters = document.querySelectorAll('.stat-value');
    
    counters.forEach(counter => {
        const target = parseFloat(counter.textContent);
        const increment = target / 50;
        let current = 0;
        
        const timer = setInterval(() => {
            current += increment;
            if (counter.textContent.includes('%')) {
                counter.textContent = Math.ceil(current) + '%';
            } else if (counter.textContent.includes('ч')) {
                counter.textContent = current.toFixed(1) + 'ч';
            } else {
                counter.textContent = Math.ceil(current);
            }
            
            if (current >= target) {
                counter.textContent = counter.textContent; // Восстанавливаем исходное значение
                clearInterval(timer);
            }
        }, 20);
    });
}

// Запускаем анимацию счетчиков после загрузки
setTimeout(animateCounters, 500);
</script>
{% endblock %}