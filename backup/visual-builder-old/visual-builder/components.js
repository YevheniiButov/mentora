/**
 * Visual Builder Components
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –∏ –∏—Ö —à–∞–±–ª–æ–Ω–∞–º–∏
 */

class ComponentManager {
    constructor(visualBuilder) {
        this.vb = visualBuilder;
        this.templates = new Map();
        this.customComponents = new Map();
        
        this.init();
    }

    async init() {
        await this.loadTemplates();
        this.setupComponentInteractions();
        console.info('üß© Component Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
     */
    async loadTemplates() {
        // –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        this.templates.set('text', {
            name: '–¢–µ–∫—Å—Ç',
            category: 'basic',
            template: this.getTextTemplate(),
            icon: 'bi-type',
            description: '–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫'
        });

        this.templates.set('heading', {
            name: '–ó–∞–≥–æ–ª–æ–≤–æ–∫', 
            category: 'basic',
            template: this.getHeadingTemplate(),
            icon: 'bi-type-h1',
            description: '–ó–∞–≥–æ–ª–æ–≤–∫–∏ H1-H6'
        });

        this.templates.set('image', {
            name: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
            category: 'media',
            template: this.getImageTemplate(),
            icon: 'bi-image',
            description: '–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'
        });

        this.templates.set('button', {
            name: '–ö–Ω–æ–ø–∫–∞',
            category: 'interactive',
            template: this.getButtonTemplate(),
            icon: 'bi-ui-radios',
            description: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞'
        });

        this.templates.set('video', {
            name: '–í–∏–¥–µ–æ',
            category: 'media',
            template: this.getVideoTemplate(),
            icon: 'bi-play-circle',
            description: '–í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ'
        });

        this.templates.set('quiz', {
            name: '–¢–µ—Å—Ç',
            category: 'interactive',
            template: this.getQuizTemplate(),
            icon: 'bi-question-circle',
            description: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç'
        });

        this.templates.set('form', {
            name: '–§–æ—Ä–º–∞',
            category: 'interactive',
            template: this.getFormTemplate(),
            icon: 'bi-card-text',
            description: '–§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏'
        });

        this.templates.set('dental-chart', {
            name: '–ó—É–±–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞',
            category: 'medical',
            template: this.getDentalChartTemplate(),
            icon: 'bi-diagram-3',
            description: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∑—É–±–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞'
        });

        this.templates.set('hero', {
            name: 'Hero —Å–µ–∫—Ü–∏—è',
            category: 'blocks',
            template: this.getHeroTemplate(),
            icon: 'bi-stars',
            description: '–ì–ª–∞–≤–Ω—ã–π –±–ª–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã'
        });

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        await this.loadCustomComponents();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
     */
    async loadCustomComponents() {
        try {
            const response = await fetch(`${this.vb.config.apiEndpoint}/components`, {
                headers: {
                    'X-CSRFToken': this.vb.config.csrfToken
                }
            });
            
            if (response.ok) {
                const customComponents = await response.json();
                customComponents.forEach(component => {
                    this.customComponents.set(component.id, component);
                });
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:', error);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
     */
    setupComponentInteractions() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        document.addEventListener('click', (e) => {
            // –ó—É–±–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞
            if (e.target.closest('.tooth')) {
                this.handleToothClick(e.target.closest('.tooth'));
            }
            
            // –ê–∫–∫–æ—Ä–¥–µ–æ–Ω
            if (e.target.closest('.accordion-header')) {
                this.handleAccordionClick(e.target.closest('.accordion-header'));
            }
            
            // –í–∫–ª–∞–¥–∫–∏
            if (e.target.closest('.tab-button')) {
                this.handleTabClick(e.target.closest('.tab-button'));
            }
            
            // –§–ª—ç—à–∫–∞—Ä—Ç–∞
            if (e.target.closest('.flashcard-inner')) {
                this.handleFlashcardClick(e.target.closest('.flashcard-inner'));
            }
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∑—É–±—É
     */
    handleToothClick(tooth) {
        const states = ['healthy', 'caries', 'filled', 'missing'];
        const currentState = tooth.dataset.state || 'healthy';
        const currentIndex = states.indexOf(currentState);
        const nextIndex = (currentIndex + 1) % states.length;
        const nextState = states[nextIndex];
        
        tooth.dataset.state = nextState;
        tooth.className = `tooth ${nextState}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.vb.addToHistory();
        this.vb.markAsChanged();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∞–∫–∫–æ—Ä–¥–µ–æ–Ω—É
     */
    handleAccordionClick(header) {
        const content = header.nextElementSibling;
        const icon = header.querySelector('.accordion-icon');
        const isOpen = content.classList.contains('active');
        
        if (isOpen) {
            content.classList.remove('active');
            if (icon) icon.textContent = '‚ñº';
        } else {
            content.classList.add('active');
            if (icon) icon.textContent = '‚ñ≤';
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –≤–∫–ª–∞–¥–∫–µ
     */
    handleTabClick(button) {
        const tabsContainer = button.closest('.component-tabs');
        const tabIndex = Array.from(button.parentNode.children).indexOf(button);
        
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        tabsContainer.querySelectorAll('.tab-button').forEach(btn => 
            btn.classList.remove('active'));
        tabsContainer.querySelectorAll('.tab-content').forEach(content => 
            content.classList.remove('active'));
        
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        button.classList.add('active');
        const targetContent = tabsContainer.querySelectorAll('.tab-content')[tabIndex];
        if (targetContent) {
            targetContent.classList.add('active');
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Ñ–ª—ç—à–∫–∞—Ä—Ç–µ
     */
    handleFlashcardClick(flashcard) {
        flashcard.classList.toggle('flipped');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    getTemplate(type) {
        if (this.templates.has(type)) {
            return this.templates.get(type).template;
        }
        
        if (this.customComponents.has(type)) {
            return this.customComponents.get(type).template;
        }
        
        return this.templates.get('text').template;
    }

    /**
     * –®–∞–±–ª–æ–Ω—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
     */
    getTextTemplate() {
        return `
            <div class="element-content">
                <div contenteditable="true" class="text-editor" data-placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç...">
                    <p>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç –∑–¥–µ—Å—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <strong>–∂–∏—Ä–Ω—ã–π</strong>, <em>–∫—É—Ä—Å–∏–≤</em> –∏ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.</p>
                </div>
            </div>
            ${this.getControlsTemplate()}
        `;
    }

    getHeadingTemplate() {
        return `
            <div class="element-content">
                <h2 contenteditable="true" class="heading-editor" data-placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫...">
                    –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                </h2>
                <div class="heading-controls">
                    <select onchange="this.parentNode.previousElementSibling.tagName = this.value.toUpperCase(); this.parentNode.previousElementSibling.className = 'heading-editor ' + this.value;">
                        <option value="h1">H1</option>
                        <option value="h2" selected>H2</option>
                        <option value="h3">H3</option>
                        <option value="h4">H4</option>
                        <option value="h5">H5</option>
                        <option value="h6">H6</option>
                    </select>
                </div>
            </div>
            ${this.getControlsTemplate()}
        `;
    }

    getImageTemplate() {
        return `
            <div class="element-content">
                <div class="image-container">
                    <div class="image-placeholder" onclick="visualBuilder.managers.media?.selectImage(this)">
                        <div class="placeholder-content">
                            <i class="bi bi-image placeholder-icon"></i>
                            <h4>–î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</h4>
                            <p>–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å—é–¥–∞</p>
                            <div class="supported-formats">
                                <span class="format-badge">JPG</span>
                                <span class="format-badge">PNG</span>
                                <span class="format-badge">GIF</span>
                                <span class="format-badge">WebP</span>
                            </div>
                            <small>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB</small>
                        </div>
                    </div>
                    <div class="image-options" style="display: none;">
                        <label>
                            <input type="text" placeholder="Alt —Ç–µ–∫—Å—Ç" class="alt-text-input">
                        </label>
                        <label>
                            <input type="text" placeholder="–ü–æ–¥–ø–∏—Å—å" class="caption-input">
                        </label>
                    </div>
                </div>
            </div>
            ${this.getControlsTemplate()}
        `;
    }

    getButtonTemplate() {
        return `
            <div class="element-content">
                <div class="button-container">
                    <button class="custom-button btn-primary" contenteditable="true" data-placeholder="–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏...">
                        –ù–∞–∂–º–∏—Ç–µ –º–µ–Ω—è
                    </button>
                    <div class="button-options">
                        <select class="button-style" onchange="this.parentNode.previousElementSibling.className = 'custom-button ' + this.value;">
                            <option value="btn-primary">–û—Å–Ω–æ–≤–Ω–∞—è</option>
                            <option value="btn-secondary">–í—Ç–æ—Ä–∏—á–Ω–∞—è</option>
                            <option value="btn-success">–£—Å–ø–µ—Ö</option>
                            <option value="btn-warning">–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</option>
                            <option value="btn-danger">–û–ø–∞—Å–Ω–æ—Å—Ç—å</option>
                            <option value="btn-outline-primary">–ö–æ–Ω—Ç—É—Ä–Ω–∞—è</option>
                        </select>
                        <select class="button-size" onchange="this.parentNode.previousElementSibling.classList.toggle('btn-lg', this.value === 'large'); this.parentNode.previousElementSibling.classList.toggle('btn-sm', this.value === 'small');">
                            <option value="normal">–û–±—ã—á–Ω–∞—è</option>
                            <option value="small">–ú–∞–ª–µ–Ω—å–∫–∞—è</option>
                            <option value="large">–ë–æ–ª—å—à–∞—è</option>
                        </select>
                        <input type="text" placeholder="–°—Å—ã–ª–∫–∞ (URL)" class="button-link">
                    </div>
                </div>
            </div>
            ${this.getControlsTemplate()}
        `;
    }

    getVideoTemplate() {
        return `
            <div class="element-content">
                <div class="video-container">
                    <div class="video-placeholder" onclick="visualBuilder.managers.media?.selectVideo(this)">
                        <div class="placeholder-content">
                            <i class="bi bi-play-circle placeholder-icon"></i>
                            <h4>–î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ</h4>
                            <p>YouTube, Vimeo –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª</p>
                            <div class="video-options">
                                <button class="btn btn-secondary btn-sm" onclick="visualBuilder.managers.media?.addYouTube(this)">
                                    <i class="bi bi-youtube"></i> YouTube
                                </button>
                                <button class="btn btn-secondary btn-sm" onclick="visualBuilder.managers.media?.addVimeo(this)">
                                    <i class="bi bi-vimeo"></i> Vimeo
                                </button>
                                <button class="btn btn-secondary btn-sm" onclick="visualBuilder.managers.media?.uploadVideo(this)">
                                    <i class="bi bi-upload"></i> –ó–∞–≥—Ä—É–∑–∏—Ç—å
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            ${this.getControlsTemplate()}
        `;
    }

    getQuizTemplate() {
        return `
            <div class="element-content">
                <div class="quiz-container">
                    <h3 contenteditable="true" class="quiz-question" data-placeholder="–í–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞...">
                        –í–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞
                    </h3>
                    <div class="quiz-options">
                        <div class="quiz-option">
                            <label class="quiz-label">
                                <input type="radio" name="quiz_${Date.now()}" value="1">
                                <span contenteditable="true" data-placeholder="–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞...">–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ 1</span>
                                <button class="option-correct-btn" onclick="this.parentNode.parentNode.classList.toggle('correct')" title="–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π">
                                    <i class="bi bi-check-circle"></i>
                                </button>
                                <button class="option-remove-btn" onclick="this.parentNode.parentNode.remove()" title="–£–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç">
                                    <i class="bi bi-x-circle"></i>
                                </button>
                            </label>
                        </div>
                        <div class="quiz-option">
                            <label class="quiz-label">
                                <input type="radio" name="quiz_${Date.now()}" value="2">
                                <span contenteditable="true" data-placeholder="–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞...">–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ 2</span>
                                <button class="option-correct-btn" onclick="this.parentNode.parentNode.classList.toggle('correct')" title="–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π">
                                    <i class="bi bi-check-circle"></i>
                                </button>
                                <button class="option-remove-btn" onclick="this.parentNode.parentNode.remove()" title="–£–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç">
                                    <i class="bi bi-x-circle"></i>
                                </button>
                            </label>
                        </div>
                    </div>
                    <div class="quiz-controls">
                        <button class="btn btn-secondary btn-sm" onclick="visualBuilder.addQuizOption(this)">
                            <i class="bi bi-plus"></i> –î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç
                        </button>
                        <label class="quiz-setting">
                            <input type="checkbox"> –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
                        </label>
                        <label class="quiz-setting">
                            <input type="checkbox"> –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å
                        </label>
                    </div>
                    <div class="quiz-explanation" style="display: none;">
                        <label>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞):</label>
                        <textarea contenteditable="true" placeholder="–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞..."></textarea>
                    </div>
                </div>
            </div>
            ${this.getControlsTemplate()}
        `;
    }

    getFormTemplate() {
        return `
            <div class="element-content">
                <div class="form-container">
                    <h3 contenteditable="true" data-placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º—ã...">–§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏</h3>
                    <form class="custom-form">
                        <div class="form-field">
                            <label contenteditable="true">–ò–º—è *</label>
                            <input type="text" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è" required>
                        </div>
                        <div class="form-field">
                            <label contenteditable="true">Email *</label>
                            <input type="email" placeholder="your@email.com" required>
                        </div>
                        <div class="form-field">
                            <label contenteditable="true">–°–æ–æ–±—â–µ–Ω–∏–µ</label>
                            <textarea placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" rows="4"></textarea>
                        </div>
                        <div class="form-actions">
                            <button type="submit" class="btn btn-primary">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                            <button type="reset" class="btn btn-secondary">–û—á–∏—Å—Ç–∏—Ç—å</button>
                        </div>
                    </form>
                    <div class="form-builder">
                        <button class="btn btn-sm btn-secondary" onclick="visualBuilder.addFormField(this, 'text')">
                            <i class="bi bi-input-cursor-text"></i> –¢–µ–∫—Å—Ç
                        </button>
                        <button class="btn btn-sm btn-secondary" onclick="visualBuilder.addFormField(this, 'email')">
                            <i class="bi bi-envelope"></i> Email
                        </button>
                        <button class="btn btn-sm btn-secondary" onclick="visualBuilder.addFormField(this, 'textarea')">
                            <i class="bi bi-textarea"></i> –û–±–ª–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
                        </button>
                        <button class="btn btn-sm btn-secondary" onclick="visualBuilder.addFormField(this, 'select')">
                            <i class="bi bi-menu-button-wide"></i> –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫
                        </button>
                        <button class="btn btn-sm btn-secondary" onclick="visualBuilder.addFormField(this, 'checkbox')">
                            <i class="bi bi-check-square"></i> –ß–µ–∫–±–æ–∫—Å
                        </button>
                        <button class="btn btn-sm btn-secondary" onclick="visualBuilder.addFormField(this, 'radio')">
                            <i class="bi bi-radioactive"></i> –†–∞–¥–∏–æ –∫–Ω–æ–ø–∫–∏
                        </button>
                    </div>
                </div>
            </div>
            ${this.getControlsTemplate()}
        `;
    }

    getDentalChartTemplate() {
        return `
            <div class="element-content">
                <div class="dental-chart-container">
                    <h3 contenteditable="true" data-placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫...">–ó—É–±–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞</h3>
                    <div class="dental-chart">
                        <div class="chart-info">
                            <div class="patient-info">
                                <input type="text" placeholder="–ò–º—è –ø–∞—Ü–∏–µ–Ω—Ç–∞" class="patient-name">
                                <input type="date" class="visit-date">
                            </div>
                        </div>
                        <div class="teeth-container">
                            <div class="teeth-row upper-jaw">
                                <div class="jaw-label">–í–µ—Ä—Ö–Ω—è—è —á–µ–ª—é—Å—Ç—å</div>
                                <div class="teeth-grid">
                                    ${Array.from({length: 16}, (_, i) => `
                                        <div class="tooth healthy" data-number="${18 - i}" data-state="healthy" title="–ó—É–± ${18 - i}">
                                            <span class="tooth-number">${18 - i}</span>
                                            <div class="tooth-surface" data-surface="occlusal"></div>
                                            <div class="tooth-surface" data-surface="buccal"></div>
                                            <div class="tooth-surface" data-surface="lingual"></div>
                                            <div class="tooth-surface" data-surface="mesial"></div>
                                            <div class="tooth-surface" data-surface="distal"></div>
                                        </div>
                                    `).join('')}
                                </div>
                            </div>
                            <div class="teeth-row lower-jaw">
                                <div class="jaw-label">–ù–∏–∂–Ω—è—è —á–µ–ª—é—Å—Ç—å</div>
                                <div class="teeth-grid">
                                    ${Array.from({length: 16}, (_, i) => `
                                        <div class="tooth healthy" data-number="${i + 31}" data-state="healthy" title="–ó—É–± ${i + 31}">
                                            <span class="tooth-number">${i + 31}</span>
                                            <div class="tooth-surface" data-surface="occlusal"></div>
                                            <div class="tooth-surface" data-surface="buccal"></div>
                                            <div class="tooth-surface" data-surface="lingual"></div>
                                            <div class="tooth-surface" data-surface="mesial"></div>
                                            <div class="tooth-surface" data-surface="distal"></div>
                                        </div>
                                    `).join('')}
                                </div>
                            </div>
                        </div>
                        <div class="chart-tools">
                            <div class="tool-group">
                                <h4>–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑—É–±–∞:</h4>
                                <button class="tool-btn active" data-state="healthy" title="–ó–¥–æ—Ä–æ–≤—ã–π –∑—É–±">
                                    <div class="tool-color healthy"></div>
                                    –ó–¥–æ—Ä–æ–≤—ã–π
                                </button>
                                <button class="tool-btn" data-state="caries" title="–ö–∞—Ä–∏–µ—Å">
                                    <div class="tool-color caries"></div>
                                    –ö–∞—Ä–∏–µ—Å
                                </button>
                                <button class="tool-btn" data-state="filled" title="–ü–ª–æ–º–±–∞">
                                    <div class="tool-color filled"></div>
                                    –ü–ª–æ–º–±–∞
                                </button>
                                <button class="tool-btn" data-state="crown" title="–ö–æ—Ä–æ–Ω–∫–∞">
                                    <div class="tool-color crown"></div>
                                    –ö–æ—Ä–æ–Ω–∫–∞
                                </button>
                                <button class="tool-btn" data-state="missing" title="–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç">
                                    <div class="tool-color missing"></div>
                                    –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                                </button>
                                <button class="tool-btn" data-state="implant" title="–ò–º–ø–ª–∞–Ω—Ç">
                                    <div class="tool-color implant"></div>
                                    –ò–º–ø–ª–∞–Ω—Ç
                                </button>
                            </div>
                            <div class="tool-group">
                                <button class="btn btn-sm btn-secondary" onclick="visualBuilder.clearDentalChart(this)">
                                    <i class="bi bi-arrow-clockwise"></i> –°–±—Ä–æ—Å–∏—Ç—å
                                </button>
                                <button class="btn btn-sm btn-primary" onclick="visualBuilder.generateDentalReport(this)">
                                    <i class="bi bi-file-earmark-text"></i> –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            ${this.getControlsTemplate()}
        `;
    }

    getHeroTemplate() {
        return `
            <div class="element-content">
                <div class="hero-section">
                    <div class="hero-background">
                        <div class="hero-overlay"></div>
                        <div class="hero-pattern"></div>
                    </div>
                    <div class="hero-content">
                        <div class="hero-badge">
                            <span contenteditable="true" data-placeholder="–ë–µ–π–¥–∂...">üéì Dental Academy</span>
                        </div>
                        <h1 class="hero-title" contenteditable="true" data-placeholder="–ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫...">
                            –ò–∑—É—á–∞–π—Ç–µ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—é —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞–º–∏
                        </h1>
                        <p class="hero-subtitle" contenteditable="true" data-placeholder="–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫...">
                            –ü–æ–ª—É—á–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ –æ–±–ª–∞—Å—Ç–∏ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏ —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è.
                        </p>
                        <div class="hero-actions">
                            <button class="btn btn-primary btn-lg hero-cta">
                                <i class="bi bi-play-circle"></i>
                                <span contenteditable="true">–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ</span>
                            </button>
                            <button class="btn btn-outline-light btn-lg hero-secondary">
                                <i class="bi bi-info-circle"></i>
                                <span contenteditable="true">–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ</span>
                            </button>
                        </div>
                        <div class="hero-stats">
                            <div class="stat-item">
                                <div class="stat-number" contenteditable="true">1000+</div>
                                <div class="stat-label" contenteditable="true">–°—Ç—É–¥–µ–Ω—Ç–æ–≤</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-number" contenteditable="true">50+</div>
                                <div class="stat-label" contenteditable="true">–ö—É—Ä—Å–æ–≤</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-number" contenteditable="true">98%</div>
                                <div class="stat-label" contenteditable="true">–£—Å–ø–µ—à–Ω–æ—Å—Ç–∏</div>
                            </div>
                        </div>
                    </div>
                    <div class="hero-media">
                        <div class="media-placeholder" onclick="visualBuilder.managers.media?.selectHeroMedia(this)">
                            <i class="bi bi-image"></i>
                            <span>–î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ/–≤–∏–¥–µ–æ</span>
                        </div>
                    </div>
                </div>
            </div>
            ${this.getControlsTemplate()}
        `;
    }

    /**
     * –®–∞–±–ª–æ–Ω —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     */
    getControlsTemplate() {
        return `
            <div class="element-controls">
                <div class="control-group">
                    <button class="control-btn" onclick="visualBuilder.moveElement(this, 'up')" title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö">
                        <i class="bi bi-arrow-up"></i>
                    </button>
                    <button class="control-btn" onclick="visualBuilder.moveElement(this, 'down')" title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–Ω–∏–∑">
                        <i class="bi bi-arrow-down"></i>
                    </button>
                </div>
                <div class="control-group">
                    <button class="control-btn secondary" onclick="visualBuilder.duplicateElement(this)" title="–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å">
                        <i class="bi bi-files"></i>
                    </button>
                    <button class="control-btn warning" onclick="visualBuilder.editElement(this)" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                        <i class="bi bi-pencil"></i>
                    </button>
                </div>
                <div class="control-group">
                    <button class="control-btn" onclick="visualBuilder.toggleElementVisibility(this)" title="–°–∫—Ä—ã—Ç—å/–ü–æ–∫–∞–∑–∞—Ç—å">
                        <i class="bi bi-eye"></i>
                    </button>
                    <button class="control-btn danger" onclick="visualBuilder.deleteElement(this)" title="–£–¥–∞–ª–∏—Ç—å">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
            </div>
        `;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    async saveCustomComponent(element, name, description) {
        try {
            const template = element.outerHTML;
            const componentData = {
                name,
                description,
                template,
                category: 'custom',
                type: `custom_${Date.now()}`,
                userId: this.vb.config.currentUserId
            };

            const response = await fetch(`${this.vb.config.apiEndpoint}/components`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': this.vb.config.csrfToken
                },
                body: JSON.stringify(componentData)
            });

            if (response.ok) {
                const savedComponent = await response.json();
                this.customComponents.set(savedComponent.id, savedComponent);
                this.vb.showNotification('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É', 'success');
                return savedComponent;
            } else {
                throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', error);
            this.vb.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞', 'error');
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    async deleteCustomComponent(componentId) {
        try {
            const response = await fetch(`${this.vb.config.apiEndpoint}/components/${componentId}`, {
                method: 'DELETE',
                headers: {
                    'X-CSRFToken': this.vb.config.csrfToken
                }
            });

            if (response.ok) {
                this.customComponents.delete(componentId);
                this.vb.showNotification('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç —É–¥–∞–ª–µ–Ω', 'success');
                return true;
            } else {
                throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', error);
            this.vb.showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞', 'error');
            return false;
        }
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    exportComponent(element) {
        const componentData = {
            type: element.dataset.type,
            content: element.innerHTML,
            styles: this.extractElementStyles(element),
            timestamp: Date.now()
        };

        const blob = new Blob([JSON.stringify(componentData, null, 2)], {
            type: 'application/json'
        });
        
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `component-${element.dataset.type}-${Date.now()}.json`;
        a.click();
        
        URL.revokeObjectURL(url);
        this.vb.showNotification('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω', 'success');
    }

    /**
     * –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    async importComponent(file) {
        try {
            const text = await file.text();
            const componentData = JSON.parse(text);
            
            // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            const element = await this.vb.createElement(componentData.type);
            if (element && componentData.content) {
                element.innerHTML = componentData.content;
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                if (componentData.styles) {
                    this.applyElementStyles(element, componentData.styles);
                }
                
                this.vb.setupElementEvents(element);
                this.vb.showNotification('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω', 'success');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', error);
            this.vb.showNotification('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞', 'error');
        }
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    extractElementStyles(element) {
        const computedStyles = window.getComputedStyle(element);
        const relevantStyles = [
            'width', 'height', 'margin', 'padding', 'background', 'border',
            'border-radius', 'box-shadow', 'transform', 'position', 'z-index'
        ];
        
        const styles = {};
        relevantStyles.forEach(property => {
            styles[property] = computedStyles.getPropertyValue(property);
        });
        
        return styles;
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –∫ —ç–ª–µ–º–µ–Ω—Ç—É
     */
    applyElementStyles(element, styles) {
        Object.entries(styles).forEach(([property, value]) => {
            if (value && value !== 'none' && value !== 'auto') {
                element.style.setProperty(property, value);
            }
        });
    }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑—É–±–Ω–æ–π —Ñ–æ—Ä–º—É–ª–æ–π
 */
class DentalChartUtils {
    static getToothByNumber(chart, number) {
        return chart.querySelector(`[data-number="${number}"]`);
    }

    static setToothState(tooth, state) {
        tooth.dataset.state = state;
        tooth.className = `tooth ${state}`;
    }

    static getChartData(chart) {
        const teeth = chart.querySelectorAll('.tooth');
        const data = {};
        
        teeth.forEach(tooth => {
            data[tooth.dataset.number] = tooth.dataset.state || 'healthy';
        });
        
        return data;
    }

    static generateReport(chart) {
        const data = this.getChartData(chart);
        const stats = this.calculateStats(data);
        
        return {
            patientName: chart.querySelector('.patient-name')?.value || '–ü–∞—Ü–∏–µ–Ω—Ç',
            date: chart.querySelector('.visit-date')?.value || new Date().toISOString().split('T')[0],
            teethData: data,
            statistics: stats,
            recommendations: this.generateRecommendations(stats)
        };
    }

    static calculateStats(data) {
        const total = Object.keys(data).length;
        const states = {};
        
        Object.values(data).forEach(state => {
            states[state] = (states[state] || 0) + 1;
        });
        
        return {
            total,
            healthy: states.healthy || 0,
            caries: states.caries || 0,
            filled: states.filled || 0,
            missing: states.missing || 0,
            crown: states.crown || 0,
            implant: states.implant || 0,
            healthPercentage: Math.round(((states.healthy || 0) / total) * 100)
        };
    }

    static generateRecommendations(stats) {
        const recommendations = [];
        
        if (stats.caries > 0) {
            recommendations.push(`–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–µ—á–µ–Ω–∏–µ ${stats.caries} –∑—É–±–æ–≤ —Å –∫–∞—Ä–∏–µ—Å–æ–º`);
        }
        
        if (stats.missing > 0) {
            recommendations.push(`–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ ${stats.missing} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑—É–±–æ–≤`);
        }
        
        if (stats.healthPercentage < 70) {
            recommendations.push('–¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ');
        } else if (stats.healthPercentage > 90) {
            recommendations.push('–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–æ—Å—Ç–∏ —Ä—Ç–∞');
        }
        
        recommendations.push('–†–µ–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 6 –º–µ—Å—è—Ü–µ–≤');
        
        return recommendations;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.ComponentManager = ComponentManager;
window.DentalChartUtils = DentalChartUtils;