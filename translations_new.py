import os
import importlib.util

class ModularTranslations:
    def __init__(self):
        self.translations = {}
        # –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É - –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –≤—Ä—É—á–Ω—É—é
        # self.load_modules()
    
    def load_modules(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –º–æ–¥—É–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
        modules_dir = 'translations_modules'
        if not os.path.exists(modules_dir):
            print(f"‚ö†Ô∏è Directory {modules_dir} not found")
            return
        
        print(f"üìÇ Loading translations from {modules_dir}")
        for filename in os.listdir(modules_dir):
            if filename.endswith('.py') and not filename.startswith('__'):
                module_name = filename[:-3]
                module_path = os.path.join(modules_dir, filename)
                
                print(f"  üìÑ Loading {filename}")
                
                try:
                    spec = importlib.util.spec_from_file_location(module_name, module_path)
                    module = importlib.util.module_from_spec(spec)
                    spec.loader.exec_module(module)
                    
                    # –ò—â–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ –º–æ–¥—É–ª–µ
                    translation_found = False
                    for attr_name in dir(module):
                        if attr_name.endswith('_translations'):
                            print(f"    ‚úÖ Found translations: {attr_name}")
                            module_translations = getattr(module, attr_name)
                            self.merge_translations(module_translations)
                            translation_found = True
                    
                    if not translation_found:
                        print(f"    ‚ö†Ô∏è No translation dict found in {filename}")
                        
                except Exception as e:
                    print(f"    ‚ùå Error loading {filename}: {e}")
        
        print(f"üìä Total languages loaded: {list(self.translations.keys())}")
    
    def merge_translations(self, module_translations):
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã –∏–∑ –º–æ–¥—É–ª—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏"""
        for lang, translations in module_translations.items():
            if lang not in self.translations:
                self.translations[lang] = {}
            
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            self._deep_merge(self.translations[lang], translations)
    
    def _deep_merge(self, target, source):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä–∏"""
        for key, value in source.items():
            if isinstance(value, dict) and key in target and isinstance(target[key], dict):
                self._deep_merge(target[key], value)
            else:
                target[key] = value
    
    def get(self, key, lang='en', **kwargs):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –∫–ª—é—á–∞"""
        if lang not in self.translations:
            lang = 'en'
        
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É
        translation = self._get_nested_value(self.translations[lang], key)
        
        if translation is None and lang != 'en':
            translation = self._get_nested_value(self.translations['en'], key)
        
        if translation is None:
            return key
        
        if kwargs:
            try:
                return translation.format(**kwargs)
            except:
                return translation
        
        return translation
    
    def _get_nested_value(self, data, key):
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–º—É –∫–ª—é—á—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'module.subkey')"""
        keys = key.split('.')
        current = data
        
        for k in keys:
            if isinstance(current, dict) and k in current:
                current = current[k]
            else:
                return None
        
        return current

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_modular_translations = ModularTranslations()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∫–∞–∫ fallback
try:
    from translations import translations as original_translations
    _modular_translations.translations = original_translations
    print("üìö –ó–∞–≥—Ä—É–∂–µ–Ω—ã –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∫–∞–∫ fallback")
    
    # –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏
    _modular_translations.load_modules()
    
except ImportError:
    print("‚ö†Ô∏è –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –º–æ–¥—É–ª—å–Ω—ã–µ
    _modular_translations.load_modules()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def get_translation(key, lang='en', **kwargs):
    return _modular_translations.get(key, lang, **kwargs)

def setup_translations(app):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç Jinja2
    @app.context_processor
    def inject_translation():
        return {'t': get_translation}
    
    print("üåê –ú–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    return get_translation
