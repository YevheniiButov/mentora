/**
 * Visual Page Builder - Improved JavaScript
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è Dental Academy
 */

class VisualBuilder {
    constructor() {
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.state = {
            theme: localStorage.getItem('vb-theme') || 'light',
            selectedElement: null,
            zoom: 1,
            gridSnap: false,
            previewMode: false
        };

        // –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        this.history = {
            undoStack: [],
            redoStack: [],
            maxSteps: 50,
            isUndoRedoAction: false
        };

        // –°—á–µ—Ç—á–∏–∫–∏
        this.counters = {
            element: 0,
            save: 0
        };

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        this.config = {
            autoSaveInterval: 30000, // 30 —Å–µ–∫—É–Ω–¥
            notificationDuration: 3000,
            animationDuration: 300,
            maxFileSize: 10 * 1024 * 1024, // 10MB
            supportedImageTypes: ['image/jpeg', 'image/png', 'image/gif', 'image/webp'],
            supportedVideoTypes: ['video/mp4', 'video/webm', 'video/ogg']
        };

        // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
        this.dom = {};

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    async init() {
        try {
            this.cacheDOMElements();
            this.setupTheme();
            this.setupEventListeners();
            this.setupDragAndDrop();
            this.setupKeyboardShortcuts();
            this.setupAutoSave();
            this.loadSavedContent();
            
            await this.initializeComponents();
            await this.initializeAdvancedStyleEditor();
            await this.initializeManagers();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ toolbar
            this.addAdvancedStyleEditorButton();
            this.addFileBrowserButton();
            this.addHTMLButtons();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            this.loadDragDropSettings();
            
            this.showNotification('Visual Builder —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω', 'success');
            console.info('üé® Visual Builder –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Visual Builder:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'error');
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
     */
    async initializeComponents() {
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            this.components = {
                text: new TextComponent(this),
                image: new ImageComponent(this),
                button: new ButtonComponent(this),
                video: new VideoComponent(this),
                form: new FormComponent(this),
                quiz: new QuizComponent(this),
                dentalChart: new DentalChartComponent(this)
            };
            
            console.info('üé® –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:', error);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Advanced Style Editor
     */
    async initializeAdvancedStyleEditor() {
        try {
            const { AdvancedStyleEditor } = await import('./visual-builder/advanced-style-editor.js');
            this.advancedStyleEditor = new AdvancedStyleEditor(this);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ toolbar
            this.addAdvancedStyleEditorButton();
            
            console.info('üé® Advanced Style Editor –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Advanced Style Editor:', error);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
     */
    async initializeManagers() {
        try {
            // Media Manager
            const { MediaManager } = await import('./visual-builder/media-manager.js');
            this.mediaManager = new MediaManager(this);
            
            // Export Manager
            const { ExportManager } = await import('./visual-builder/export-manager.js');
            this.exportManager = new ExportManager(this);
            
            // Template Manager
            const { TemplateManager } = await import('./visual-builder/template-manager.js');
            this.templateManager = new TemplateManager(this);
            
            // File Browser
            const { FileBrowser } = await import('./visual-builder/file-browser.js');
            this.fileBrowser = new FileBrowser(this);
            
            // HTML Parser
            const { HTMLParser } = await import('./html-parser.js');
            this.htmlParser = new HTMLParser(this);
            
            // Visual Editor
            const { VisualEditor } = await import('./visual-editor.js');
            this.visualEditor = new VisualEditor(this);
            
            // Live Editor
            const { LiveEditor } = await import('./live-editor.js');
            this.liveEditor = new LiveEditor(this);
            
            // Component Library
            const { ComponentLibrary } = await import('./component-library.js');
            this.componentLibrary = new ComponentLibrary(this);
            
            // Drag & Drop Editor
            const { DragDropEditor } = await import('./drag-drop-editor.js');
            this.dragDropEditor = new DragDropEditor(this);
            
            // Undo/Redo Manager
            const { UndoRedoManager } = await import('./undo-redo-manager.js');
            this.undoRedoManager = new UndoRedoManager(this);
            
            // Keyboard Shortcuts Manager
            const { KeyboardShortcuts } = await import('./keyboard-shortcuts.js');
            this.keyboardShortcuts = new KeyboardShortcuts(this);
            
            // –ü–†–û–î–í–ò–ù–£–¢–´–ï –†–ï–î–ê–ö–¢–û–†–´
            // Advanced HTML Editor
            const { AdvancedHTMLEditor } = await import('./visual-builder/advanced-html-editor.js');
            this.htmlEditor = new AdvancedHTMLEditor(this);
            
            // Advanced Style Editor
            const { AdvancedStyleEditor } = await import('./visual-builder/advanced-style-editor.js');
            this.styleEditor = new AdvancedStyleEditor(this);
            
            // Responsive Design System
            const { ResponsiveDesign } = await import('./visual-builder/responsive-design.js');
            this.responsiveDesign = new ResponsiveDesign(this);
            
            console.info('üîß –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:', error);
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ Advanced Style Editor –≤ toolbar
     */
    addAdvancedStyleEditorButton() {
        const toolbarSection = this.dom.toolbar?.querySelector('.toolbar-section:last-child');
        if (toolbarSection) {
            const advancedBtn = document.createElement('button');
            advancedBtn.className = 'btn btn-secondary';
            advancedBtn.innerHTML = '<i class="bi bi-palette2"></i> Advanced';
            advancedBtn.title = 'Advanced Style Editor';
            advancedBtn.onclick = () => this.openAdvancedStyleEditor();
            
            // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–Ω–æ–ø–∫–æ–π
            const lastBtn = toolbarSection.lastElementChild;
            if (lastBtn) {
                toolbarSection.insertBefore(advancedBtn, lastBtn);
            } else {
                toolbarSection.appendChild(advancedBtn);
            }
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ File Browser –≤ toolbar
     */
    addFileBrowserButton() {
        const toolbarSection = this.dom.toolbar?.querySelector('.toolbar-section:last-child');
        if (toolbarSection) {
            const fileBrowserBtn = document.createElement('button');
            fileBrowserBtn.className = 'btn btn-secondary';
            fileBrowserBtn.innerHTML = '<i class="bi bi-folder2-open"></i> Files';
            fileBrowserBtn.title = 'File Browser';
            fileBrowserBtn.onclick = () => this.openFileBrowser();
            
            // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–Ω–æ–ø–∫–æ–π
            const lastBtn = toolbarSection.lastElementChild;
            if (lastBtn) {
                toolbarSection.insertBefore(fileBrowserBtn, lastBtn);
            } else {
                toolbarSection.appendChild(fileBrowserBtn);
            }
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ HTML —Ñ–∞–π–ª–æ–≤ –≤ toolbar
     */
    addHTMLButtons() {
        const toolbarSection = this.dom.toolbar?.querySelector('.toolbar-section:last-child');
        if (toolbarSection) {
            // –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è HTML —Ñ–∞–π–ª–∞
            const openHTMLBtn = document.createElement('button');
            openHTMLBtn.className = 'btn btn-secondary';
            openHTMLBtn.innerHTML = '<i class="bi bi-file-earmark-code"></i> HTML';
            openHTMLBtn.title = '–û—Ç–∫—Ä—ã—Ç—å HTML —Ñ–∞–π–ª';
            openHTMLBtn.onclick = () => this.loadHTMLFileFromBrowser();
            
            // –ö–Ω–æ–ø–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ HTML
            const importHTMLBtn = document.createElement('button');
            importHTMLBtn.className = 'btn btn-secondary';
            importHTMLBtn.innerHTML = '<i class="bi bi-upload"></i> –ò–º–ø–æ—Ä—Ç';
            importHTMLBtn.title = '–ò–º–ø–æ—Ä—Ç HTML';
            importHTMLBtn.onclick = () => this.importExistingHTML();
            
            // –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ HTML
            const exportHTMLBtn = document.createElement('button');
            exportHTMLBtn.className = 'btn btn-secondary';
            exportHTMLBtn.innerHTML = '<i class="bi bi-code-slash"></i> –≠–∫—Å–ø–æ—Ä—Ç';
            exportHTMLBtn.title = '–≠–∫—Å–ø–æ—Ä—Ç –≤ HTML';
            exportHTMLBtn.onclick = () => this.exportCanvasToHTML();
            
            // –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            const saveFileBtn = document.createElement('button');
            saveFileBtn.className = 'btn btn-success';
            saveFileBtn.innerHTML = '<i class="bi bi-save"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
            saveFileBtn.title = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª (Ctrl+S)';
            saveFileBtn.onclick = () => this.saveCurrentFile();
            
            // –ö–Ω–æ–ø–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
            const saveHistoryBtn = document.createElement('button');
            saveHistoryBtn.className = 'btn btn-info';
            saveHistoryBtn.innerHTML = '<i class="bi bi-clock-history"></i> –ò—Å—Ç–æ—Ä–∏—è';
            saveHistoryBtn.title = '–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π';
            saveHistoryBtn.onclick = () => this.showSaveHistory();
            
            // –ö–Ω–æ–ø–∫–∞ Component Library
            const componentLibraryBtn = document.createElement('button');
            componentLibraryBtn.className = 'btn btn-primary';
            componentLibraryBtn.innerHTML = '<i class="bi bi-puzzle"></i> –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã';
            componentLibraryBtn.title = '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤';
            componentLibraryBtn.onclick = () => this.openComponentLibrary();
            
            // –ö–Ω–æ–ø–∫–∞ Drag & Drop –Ω–∞—Å—Ç—Ä–æ–µ–∫
            const dragDropBtn = document.createElement('button');
            dragDropBtn.className = 'btn btn-warning';
            dragDropBtn.innerHTML = '<i class="bi bi-arrows-move"></i> Drag & Drop';
            dragDropBtn.title = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Drag & Drop';
            dragDropBtn.onclick = () => this.openDragDropSettings();
            
            // –ö–Ω–æ–ø–∫–∞ Undo/Redo –∏—Å—Ç–æ—Ä–∏–∏
            const undoRedoHistoryBtn = document.createElement('button');
            undoRedoHistoryBtn.className = 'btn btn-dark';
            undoRedoHistoryBtn.innerHTML = '<i class="bi bi-arrow-clockwise"></i> –ò—Å—Ç–æ—Ä–∏—è';
            undoRedoHistoryBtn.title = '–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π (Ctrl+Z/Y)';
            undoRedoHistoryBtn.onclick = () => this.openUndoRedoHistory();
            
            // –ö–Ω–æ–ø–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
            const keyboardShortcutsBtn = document.createElement('button');
            keyboardShortcutsBtn.className = 'btn btn-info';
            keyboardShortcutsBtn.innerHTML = '<i class="bi bi-keyboard"></i> –ö–ª–∞–≤–∏—à–∏';
            keyboardShortcutsBtn.title = '–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ (Ctrl+Shift+K)';
            keyboardShortcutsBtn.onclick = () => this.openKeyboardShortcuts();
            
            // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ HTML —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
            const advancedHTMLBtn = document.createElement('button');
            advancedHTMLBtn.className = 'btn btn-primary';
            advancedHTMLBtn.innerHTML = '<i class="bi bi-code-square"></i> HTML Editor';
            advancedHTMLBtn.title = '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π HTML —Ä–µ–¥–∞–∫—Ç–æ—Ä';
            advancedHTMLBtn.onclick = () => this.openAdvancedHTMLEditor();
            
            // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å—Ç–∏–ª–µ–π
            const advancedStyleBtn = document.createElement('button');
            advancedStyleBtn.className = 'btn btn-primary';
            advancedStyleBtn.innerHTML = '<i class="bi bi-palette2"></i> Style Editor';
            advancedStyleBtn.title = '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å—Ç–∏–ª–µ–π';
            advancedStyleBtn.onclick = () => this.openAdvancedStyleEditor();
            
            // –ö–Ω–æ–ø–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
            const responsiveBtn = document.createElement('button');
            responsiveBtn.className = 'btn btn-success';
            responsiveBtn.innerHTML = '<i class="bi bi-phone"></i> Responsive';
            responsiveBtn.title = '–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω';
            responsiveBtn.onclick = () => this.openResponsiveDesign();
            
            // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            const lastBtn = toolbarSection.lastElementChild;
            if (lastBtn) {
                toolbarSection.insertBefore(responsiveBtn, lastBtn);
                toolbarSection.insertBefore(advancedStyleBtn, lastBtn);
                toolbarSection.insertBefore(advancedHTMLBtn, lastBtn);
                toolbarSection.insertBefore(keyboardShortcutsBtn, lastBtn);
                toolbarSection.insertBefore(undoRedoHistoryBtn, lastBtn);
                toolbarSection.insertBefore(dragDropBtn, lastBtn);
                toolbarSection.insertBefore(componentLibraryBtn, lastBtn);
                toolbarSection.insertBefore(saveHistoryBtn, lastBtn);
                toolbarSection.insertBefore(saveFileBtn, lastBtn);
                toolbarSection.insertBefore(exportHTMLBtn, lastBtn);
                toolbarSection.insertBefore(importHTMLBtn, lastBtn);
                toolbarSection.insertBefore(openHTMLBtn, lastBtn);
            } else {
                toolbarSection.appendChild(openHTMLBtn);
                toolbarSection.appendChild(importHTMLBtn);
                toolbarSection.appendChild(exportHTMLBtn);
                toolbarSection.appendChild(saveFileBtn);
                toolbarSection.appendChild(saveHistoryBtn);
                toolbarSection.appendChild(componentLibraryBtn);
                toolbarSection.appendChild(dragDropBtn);
                toolbarSection.appendChild(undoRedoHistoryBtn);
                toolbarSection.appendChild(keyboardShortcutsBtn);
                toolbarSection.appendChild(advancedHTMLBtn);
                toolbarSection.appendChild(advancedStyleBtn);
                toolbarSection.appendChild(responsiveBtn);
            }
        }
    }

    /**
     * –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    cacheDOMElements() {
        this.dom = {
            builder: document.querySelector('.visual-builder'),
            canvas: document.getElementById('canvas'),
            layersList: document.getElementById('layers-list'),
            themeIcon: document.getElementById('theme-icon'),
            undoBtn: document.querySelector('[data-action="undo"]'),
            redoBtn: document.querySelector('[data-action="redo"]'),
            componentItems: document.querySelectorAll('.component-item'),
            toolbar: document.querySelector('.toolbar'),
            sidebar: document.querySelector('.sidebar'),
            layersPanel: document.querySelector('.layers-panel')
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const required = ['builder', 'canvas'];
        const missing = required.filter(key => !this.dom[key]);
        
        if (missing.length > 0) {
            throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ DOM —ç–ª–µ–º–µ–Ω—Ç—ã: ${missing.join(', ')}`);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
     */
    setupTheme() {
        this.applyTheme(this.state.theme);
        this.updateThemeIcon();
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
     */
    applyTheme(theme) {
        if (!['light', 'dark'].includes(theme)) {
            theme = 'light';
        }

        this.state.theme = theme;
        document.documentElement.setAttribute('data-theme', theme);
        localStorage.setItem('vb-theme', theme);
        this.updateThemeIcon();
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
     */
    toggleTheme() {
        const newTheme = this.state.theme === 'light' ? 'dark' : 'light';
        this.applyTheme(newTheme);
        this.showNotification(`–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${newTheme === 'light' ? '—Å–≤–µ—Ç–ª—É—é' : '—Ç–µ–º–Ω—É—é'}`, 'info');
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Ç–µ–º—ã
     */
    updateThemeIcon() {
        if (this.dom.themeIcon) {
            this.dom.themeIcon.textContent = this.state.theme === 'light' ? 'üåô' : '‚òÄÔ∏è';
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        document.addEventListener('click', this.handleGlobalClick.bind(this));
        document.addEventListener('keydown', this.handleGlobalKeydown.bind(this));
        
        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', this.debounce(this.handleResize.bind(this), 250));
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        window.addEventListener('beforeunload', this.handleBeforeUnload.bind(this));

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è canvas
        if (this.dom.canvas) {
            this.dom.canvas.addEventListener('click', this.handleCanvasClick.bind(this));
        }
    }

    /**
     * –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤
     */
    handleGlobalClick(event) {
        const target = event.target;

        // –°–Ω—è—Ç–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if (!target.closest('.draggable-element') && !target.closest('.element-controls')) {
            this.deselectAllElements();
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º
        if (target.closest('[data-action]')) {
            const action = target.closest('[data-action]').dataset.action;
            this.handleAction(action, event);
        }
    }

    /**
     * –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     */
    handleGlobalKeydown(event) {
        // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        if (event.ctrlKey || event.metaKey) {
            switch (event.key.toLowerCase()) {
                case 's':
                    event.preventDefault();
                    this.savePage();
                    break;
                case 'z':
                    event.preventDefault();
                    if (event.shiftKey) {
                        this.redo();
                    } else {
                        this.undo();
                    }
                    break;
                case 'y':
                    event.preventDefault();
                    this.redo();
                    break;
                case 'd':
                    event.preventDefault();
                    if (this.state.selectedElement) {
                        this.duplicateElement(this.state.selectedElement);
                    }
                    break;
                case 'a':
                    if (event.target === this.dom.canvas) {
                        event.preventDefault();
                        this.selectAllElements();
                    }
                    break;
            }
        }

        // –î—Ä—É–≥–∏–µ –∫–ª–∞–≤–∏—à–∏
        switch (event.key) {
            case 'Delete':
            case 'Backspace':
                if (this.state.selectedElement && event.target === document.body) {
                    event.preventDefault();
                    this.deleteElement(this.state.selectedElement);
                }
                break;
            case 'Escape':
                this.deselectAllElements();
                break;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
     */
    handleResize() {
        this.updateCanvasSize();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    handleBeforeUnload(event) {
        if (this.hasUnsavedChanges()) {
            const message = '–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É?';
            event.returnValue = message;
            return message;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π
     */
    handleAction(action, event) {
        const actions = {
            'undo': () => this.undo(),
            'redo': () => this.redo(),
            'save': () => this.savePage(),
            'preview': () => this.previewPage(),
            'export': () => this.exportPage(),
            'clear': () => this.clearCanvas(),
            'zoom-in': () => this.zoomIn(),
            'zoom-out': () => this.zoomOut(),
            'zoom-reset': () => this.resetZoom(),
            'toggle-theme': () => this.toggleTheme(),
            'toggle-grid': () => this.toggleGrid(),
            'toggle-snap': () => this.toggleSnap()
        };

        if (actions[action]) {
            actions[action]();
        } else {
            console.warn(`Unknown action: ${action}`);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag & drop
     */
    setupDragAndDrop() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        this.dom.componentItems.forEach(item => {
            this.setupComponentDragAndDrop(item);
        });

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è canvas
        this.setupCanvasDragAndDrop();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag & drop –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
     */
    setupComponentDragAndDrop(item) {
        item.addEventListener('dragstart', (event) => {
            const componentType = item.dataset.type;
            event.dataTransfer.setData('text/plain', componentType);
            event.dataTransfer.effectAllowed = 'copy';
            
            item.style.opacity = '0.5';
            this.showNotification('–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞ —Ö–æ–ª—Å—Ç', 'info');
        });

        item.addEventListener('dragend', () => {
            item.style.opacity = '1';
        });

        // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        item.addEventListener('keydown', (event) => {
            if (event.key === 'Enter' || event.key === ' ') {
                event.preventDefault();
                this.createElement(item.dataset.type);
            }
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ drag & drop –¥–ª—è canvas
     */
    setupCanvasDragAndDrop() {
        this.dom.canvas.addEventListener('dragover', (event) => {
            event.preventDefault();
            event.dataTransfer.dropEffect = 'copy';
            this.highlightDropZone(event);
        });

        this.dom.canvas.addEventListener('dragleave', (event) => {
            if (!this.dom.canvas.contains(event.relatedTarget)) {
                this.clearDropZoneHighlight();
            }
        });

        this.dom.canvas.addEventListener('drop', (event) => {
            event.preventDefault();
            const componentType = event.dataTransfer.getData('text/plain');
            
            if (componentType) {
                const rect = this.dom.canvas.getBoundingClientRect();
                const x = event.clientX - rect.left;
                const y = event.clientY - rect.top;
                
                this.createElement(componentType, { x, y });
            }
            
            this.clearDropZoneHighlight();
        });
    }

    /**
     * –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∑–æ–Ω—ã drop
     */
    highlightDropZone(event) {
        this.dom.canvas.style.background = 'rgba(102, 126, 234, 0.05)';
        this.dom.canvas.style.borderColor = 'var(--primary)';
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∑–æ–Ω—ã drop
     */
    clearDropZoneHighlight() {
        this.dom.canvas.style.background = '';
        this.dom.canvas.style.borderColor = '';
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
     */
    setupKeyboardShortcuts() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ initializeManagers
        // –ó–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
        console.info('‚å®Ô∏è –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    setupAutoSave() {
        setInterval(() => {
            this.autoSave();
        }, this.config.autoSaveInterval);
    }

    /**
     * –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
     */
    autoSave() {
        try {
            const content = this.getCanvasContent();
            localStorage.setItem('vb-autosave', JSON.stringify({
                content,
                timestamp: Date.now(),
                version: '1.0'
            }));
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
     */
    loadSavedContent() {
        try {
            const saved = localStorage.getItem('vb-autosave');
            if (saved) {
                const data = JSON.parse(saved);
                if (data.content && data.content.trim()) {
                    this.setCanvasContent(data.content);
                    console.info('üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç');
                }
            }
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ canvas
     */
    hasCanvasContent() {
        return this.dom.canvas.querySelectorAll('.draggable-element').length > 0;
    }

    /**
     * –ü–æ–∫–∞–∑ –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    showEmptyState() {
        if (!this.dom.canvas.querySelector('.canvas-empty')) {
            this.dom.canvas.innerHTML = `
                <div class="canvas-empty">
                    <div class="canvas-empty-icon">üé®</div>
                    <div>
                        <h3>–ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</h3>
                        <p>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å—é–¥–∞</p>
                    </div>
                </div>
            `;
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    setupExistingElements() {
        this.dom.canvas.querySelectorAll('.draggable-element').forEach(element => {
            this.setupElementEvents(element);
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    createElement(type, options = {}) {
        try {
            // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const emptyState = this.dom.canvas.querySelector('.canvas-empty');
            if (emptyState) {
                emptyState.remove();
            }

            // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
            const element = document.createElement('div');
            element.className = `draggable-element element-${type}`;
            element.dataset.type = type;
            element.dataset.id = `element_${++this.counters.element}`;

            // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            if (options.x !== undefined && options.y !== undefined) {
                element.style.position = 'absolute';
                element.style.left = `${options.x}px`;
                element.style.top = `${options.y}px`;
            }

            // –ö–æ–Ω—Ç–µ–Ω—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
            const content = this.getElementContent(type);
            element.innerHTML = content;

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ canvas
            this.dom.canvas.appendChild(element);

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            this.setupElementEvents(element);

            // –í—ã–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
            this.selectElement(element);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.addToHistory();
            this.updateLayersPanel();

            // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
            element.style.opacity = '0';
            element.style.transform = 'scale(0.8)';
            
            requestAnimationFrame(() => {
                element.style.transition = 'all 0.3s ease';
                element.style.opacity = '1';
                element.style.transform = 'scale(1)';
            });

            this.showNotification(`–°–æ–∑–¥–∞–Ω —ç–ª–µ–º–µ–Ω—Ç: ${this.getElementName(type)}`, 'success');
            return element;

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞', 'error');
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ —Ç–∏–ø—É
     */
    getElementContent(type) {
        const templates = {
            'text': this.getTextTemplate(),
            'image': this.getImageTemplate(),
            'button': this.getButtonTemplate(),
            'video': this.getVideoTemplate(),
            'quiz': this.getQuizTemplate(),
            'form': this.getFormTemplate(),
            'hero': this.getHeroTemplate(),
            'feature': this.getFeatureTemplate()
        };

        return templates[type] || templates['text'];
    }

    /**
     * –®–∞–±–ª–æ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    getTextTemplate() {
        return `
            <div class="element-content">
                <div contenteditable="true">
                    <h2>–ó–∞–≥–æ–ª–æ–≤–æ–∫</h2>
                    <p>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç –∑–¥–µ—Å—å. –≠—Ç–æ—Ç –±–ª–æ–∫ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –∫–ª–∏–∫–Ω–∏—Ç–µ –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–µ—á–∞—Ç–∞—Ç—å.</p>
                </div>
            </div>
            ${this.getControlsTemplate()}
        `;
    }

    getImageTemplate() {
        return `
            <div class="element-content">
                <div class="image-placeholder" onclick="visualBuilder.selectImage(this)">
                    <div style="text-align: center; padding: 2rem; border: 2px dashed #ccc; border-radius: 8px; cursor: pointer;">
                        <div style="font-size: 2rem; margin-bottom: 1rem;">üì∑</div>
                        <div>–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>
                        <div style="font-size: 0.875rem; color: #666; margin-top: 0.5rem;">
                            –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: JPG, PNG, GIF, WebP
                        </div>
                    </div>
                </div>
            </div>
            ${this.getControlsTemplate()}
        `;
    }

    getButtonTemplate() {
        return `
            <div class="element-content">
                <div style="text-align: center;">
                    <button contenteditable="true" style="padding: 12px 24px; background: var(--primary); color: white; border: none; border-radius: 8px; font-weight: 600; cursor: pointer; transition: all 0.2s ease;">
                        –ö–Ω–æ–ø–∫–∞
                    </button>
                </div>
            </div>
            ${this.getControlsTemplate()}
        `;
    }

    getVideoTemplate() {
        return `
            <div class="element-content">
                <div class="video-placeholder" onclick="visualBuilder.selectVideo(this)">
                    <div style="text-align: center; padding: 2rem; border: 2px dashed #ccc; border-radius: 8px; cursor: pointer;">
                        <div style="font-size: 2rem; margin-bottom: 1rem;">üé•</div>
                        <div>–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ</div>
                        <div style="font-size: 0.875rem; color: #666; margin-top: 0.5rem;">
                            –í–≤–µ–¥–∏—Ç–µ URL –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª
                        </div>
                    </div>
                </div>
            </div>
            ${this.getControlsTemplate()}
        `;
    }

    getQuizTemplate() {
        return `
            <div class="element-content">
                <h3 contenteditable="true" style="margin-bottom: 1rem;">–í–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞</h3>
                <div class="quiz-options">
                    <label style="display: block; margin: 0.5rem 0; cursor: pointer;">
                        <input type="radio" name="quiz_${this.counters.element}" style="margin-right: 0.5rem;">
                        <span contenteditable="true">–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ 1</span>
                    </label>
                    <label style="display: block; margin: 0.5rem 0; cursor: pointer;">
                        <input type="radio" name="quiz_${this.counters.element}" style="margin-right: 0.5rem;">
                        <span contenteditable="true">–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ 2</span>
                    </label>
                    <label style="display: block; margin: 0.5rem 0; cursor: pointer;">
                        <input type="radio" name="quiz_${this.counters.element}" style="margin-right: 0.5rem;">
                        <span contenteditable="true">–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ 3</span>
                    </label>
                </div>
                <button onclick="visualBuilder.addQuizOption(this)" style="margin-top: 1rem; padding: 0.5rem 1rem; background: var(--secondary); color: white; border: none; border-radius: 4px; cursor: pointer;">
                    + –î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç
                </button>
            </div>
            ${this.getControlsTemplate()}
        `;
    }

    getFormTemplate() {
        return `
            <div class="element-content">
                <form style="max-width: 500px; margin: 0 auto;">
                    <h3 contenteditable="true" style="margin-bottom: 1rem;">–§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏</h3>
                    <div style="margin-bottom: 1rem;">
                        <label style="display: block; margin-bottom: 0.5rem; font-weight: 500;">–ò–º—è:</label>
                        <input type="text" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è" style="width: 100%; padding: 0.75rem; border: 1px solid #ddd; border-radius: 4px;">
                    </div>
                    <div style="margin-bottom: 1rem;">
                        <label style="display: block; margin-bottom: 0.5rem; font-weight: 500;">Email:</label>
                        <input type="email" placeholder="your@email.com" style="width: 100%; padding: 0.75rem; border: 1px solid #ddd; border-radius: 4px;">
                    </div>
                    <div style="margin-bottom: 1rem;">
                        <label style="display: block; margin-bottom: 0.5rem; font-weight: 500;">–°–æ–æ–±—â–µ–Ω–∏–µ:</label>
                        <textarea placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" rows="4" style="width: 100%; padding: 0.75rem; border: 1px solid #ddd; border-radius: 4px; resize: vertical;"></textarea>
                    </div>
                    <button type="submit" style="padding: 0.75rem 1.5rem; background: var(--primary); color: white; border: none; border-radius: 4px; cursor: pointer; font-weight: 500;">
                        –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                    </button>
                </form>
            </div>
            ${this.getControlsTemplate()}
        `;
    }

    getHeroTemplate() {
        return `
            <div class="element-content">
                <div style="text-align: center; padding: 4rem 2rem; background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%); color: white; border-radius: 12px;">
                    <h1 contenteditable="true" style="font-size: 3rem; margin-bottom: 1rem; font-weight: bold;">
                        –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å
                    </h1>
                    <p contenteditable="true" style="font-size: 1.25rem; margin-bottom: 2rem; opacity: 0.9; max-width: 600px; margin-left: auto; margin-right: auto;">
                        –°–æ–∑–¥–∞–π—Ç–µ –ø–æ—Ç—Ä—è—Å–∞—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!
                    </p>
                    <div style="display: flex; gap: 1rem; justify-content: center; flex-wrap: wrap;">
                        <button style="padding: 1rem 2rem; background: white; color: var(--primary); border: none; border-radius: 8px; font-weight: 600; cursor: pointer; transition: all 0.2s ease;">
                            –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
                        </button>
                        <button style="padding: 1rem 2rem; background: transparent; color: white; border: 2px solid white; border-radius: 8px; font-weight: 600; cursor: pointer; transition: all 0.2s ease;">
                            –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ
                        </button>
                    </div>
                </div>
            </div>
            ${this.getControlsTemplate()}
        `;
    }

    getFeatureTemplate() {
        return `
            <div class="element-content">
                <div style="text-align: center; margin-bottom: 2rem;">
                    <h2 contenteditable="true" style="font-size: 2rem; margin-bottom: 1rem;">–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞</h2>
                    <p contenteditable="true" style="color: #666; font-size: 1.125rem;">–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –∏–º–µ–Ω–Ω–æ –Ω–∞—Å</p>
                </div>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 2rem;">
                    <div style="text-align: center; padding: 2rem; background: #f8f9fa; border-radius: 12px;">
                        <div style="font-size: 3rem; margin-bottom: 1rem;">‚ö°</div>
                        <h3 contenteditable="true" style="margin-bottom: 1rem;">–ë—ã—Å—Ç—Ä–æ</h3>
                        <p contenteditable="true" style="color: #666; line-height: 1.6;">–ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –∏ –∑–∞–≥—Ä—É–∑–∫–∏</p>
                    </div>
                    <div style="text-align: center; padding: 2rem; background: #f8f9fa; border-radius: 12px;">
                        <div style="font-size: 3rem; margin-bottom: 1rem;">üõ°Ô∏è</div>
                        <h3 contenteditable="true" style="margin-bottom: 1rem;">–ù–∞–¥–µ–∂–Ω–æ</h3>
                        <p contenteditable="true" style="color: #666; line-height: 1.6;">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö</p>
                    </div>
                    <div style="text-align: center; padding: 2rem; background: #f8f9fa; border-radius: 12px;">
                        <div style="font-size: 3rem; margin-bottom: 1rem;">üé®</div>
                        <h3 contenteditable="true" style="margin-bottom: 1rem;">–ö—Ä–∞—Å–∏–≤–æ</h3>
                        <p contenteditable="true" style="color: #666; line-height: 1.6;">–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω</p>
                    </div>
                </div>
            </div>
            ${this.getControlsTemplate()}
        `;
    }

    /**
     * –®–∞–±–ª–æ–Ω —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     */
    getControlsTemplate() {
        return `
            <div class="element-controls">
                <button class="control-btn" onclick="visualBuilder.moveElement(this, 'up')" title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö" aria-label="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö">
                    ‚Üë
                </button>
                <button class="control-btn secondary" onclick="visualBuilder.duplicateElement(this)" title="–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å" aria-label="–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å">
                    üìã
                </button>
                <button class="control-btn danger" onclick="visualBuilder.deleteElement(this)" title="–£–¥–∞–ª–∏—Ç—å" aria-label="–£–¥–∞–ª–∏—Ç—å">
                    üóëÔ∏è
                </button>
            </div>
        `;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ —Ç–∏–ø—É
     */
    getElementName(type) {
        const names = {
            'text': '–¢–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫',
            'image': '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
            'button': '–ö–Ω–æ–ø–∫–∞',
            'video': '–í–∏–¥–µ–æ',
            'quiz': '–¢–µ—Å—Ç',
            'form': '–§–æ—Ä–º–∞',
            'hero': 'Hero —Å–µ–∫—Ü–∏—è',
            'feature': '–ë–ª–æ–∫ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤'
        };
        return names[type] || '–≠–ª–µ–º–µ–Ω—Ç';
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    setupElementEvents(element) {
        // –ö–ª–∏–∫ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
        element.addEventListener('click', (event) => {
            event.stopPropagation();
            this.selectElement(element);
        });

        // –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        element.addEventListener('dblclick', (event) => {
            event.stopPropagation();
            this.editElement(element);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ contenteditable
        const editableElements = element.querySelectorAll('[contenteditable="true"]');
        editableElements.forEach(editable => {
            editable.addEventListener('input', this.debounce(() => {
                this.addToHistory();
            }, 1000));

            editable.addEventListener('blur', () => {
                this.addToHistory();
            });
        });

        // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
        this.setupElementDrag(element);
        this.addResizeHandles(element);
    }

    /**
     * –í—ã–¥–µ–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    selectElement(element) {
        this.deselectAllElements();
        element.classList.add('selected');
        this.state.selectedElement = element;
        this.updateLayersPanel();
        this.updatePropertiesPanel();
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º Advanced Style Editor –æ –≤—ã–±–æ—Ä–µ —ç–ª–µ–º–µ–Ω—Ç–∞
        if (this.advancedStyleEditor) {
            this.advancedStyleEditor.selectElement(element);
        }
        
        // –°–∫—Ä–æ–ª–ª–∏–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É, –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤–∏–¥–∏–º
        element.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }

    /**
     * –°–Ω—è—Ç–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å–æ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    deselectAllElements() {
        this.dom.canvas.querySelectorAll('.draggable-element').forEach(el => {
            el.classList.remove('selected');
        });
        this.state.selectedElement = null;
        this.updateLayersPanel();
    }

    /**
     * –í—ã–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    selectAllElements() {
        const elements = this.dom.canvas.querySelectorAll('.draggable-element');
        elements.forEach(el => el.classList.add('selected'));
        this.showNotification(`–í—ã–¥–µ–ª–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${elements.length}`, 'info');
    }

    /**
     * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    editElement(element) {
        const editableElement = element.querySelector('[contenteditable="true"]');
        if (editableElement) {
            editableElement.focus();
            
            // –í—ã–¥–µ–ª—è–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
            const range = document.createRange();
            range.selectNodeContents(editableElement);
            const selection = window.getSelection();
            selection.removeAllRanges();
            selection.addRange(range);
        }
    }

    /**
     * –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    moveElement(button, direction) {
        const element = button.closest('.draggable-element');
        if (!element) return;

        const canvas = this.dom.canvas;
        
        if (direction === 'up' && element.previousElementSibling) {
            canvas.insertBefore(element, element.previousElementSibling);
        } else if (direction === 'down' && element.nextElementSibling) {
            canvas.insertBefore(element.nextElementSibling, element);
        }
        
        this.addToHistory();
        this.updateLayersPanel();
        this.showNotification(`–≠–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω ${direction === 'up' ? '–≤–≤–µ—Ä—Ö' : '–≤–Ω–∏–∑'}`, 'info');
    }

    /**
     * –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    duplicateElement(buttonOrElement) {
        const element = buttonOrElement.closest ? 
            buttonOrElement.closest('.draggable-element') : 
            buttonOrElement;
            
        if (!element) return;

        const clone = element.cloneNode(true);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º ID
        clone.dataset.id = `element_${++this.counters.element}`;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        clone.classList.remove('selected');
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
        element.parentNode.insertBefore(clone, element.nextSibling);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–ª–æ–Ω–∞
        this.setupElementEvents(clone);
        
        // –í—ã–¥–µ–ª—è–µ–º –∫–ª–æ–Ω
        this.selectElement(clone);
        
        this.addToHistory();
        this.updateLayersPanel();
        this.showNotification('–≠–ª–µ–º–µ–Ω—Ç –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω', 'success');
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    deleteElement(buttonOrElement) {
        const element = buttonOrElement.closest ? 
            buttonOrElement.closest('.draggable-element') : 
            buttonOrElement;
            
        if (!element) return;

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç?')) {
            return;
        }

        // –ê–Ω–∏–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è
        element.style.transition = 'all 0.3s ease';
        element.style.opacity = '0';
        element.style.transform = 'scale(0.8)';
        
        setTimeout(() => {
            element.remove();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if (!this.hasCanvasContent()) {
                this.showEmptyState();
            }
            
            this.addToHistory();
            this.updateLayersPanel();
            this.showNotification('–≠–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω', 'warning');
        }, this.config.animationDuration);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å–ª–æ–µ–≤
     */
    updateLayersPanel() {
        if (!this.dom.layersList) return;

        const elements = this.dom.canvas.querySelectorAll('.draggable-element');
        
        if (elements.length === 0) {
            this.dom.layersList.innerHTML = `
                <div style="text-align: center; color: var(--text-secondary); padding: 2rem; font-style: italic;">
                    –ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                </div>
            `;
            return;
        }

        this.dom.layersList.innerHTML = '';
        
        elements.forEach((element, index) => {
            const layerItem = this.createLayerItem(element, index);
            this.dom.layersList.appendChild(layerItem);
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ª–æ—è
     */
    createLayerItem(element, index) {
        const layerItem = document.createElement('div');
        layerItem.className = 'layer-item';
        layerItem.dataset.elementIndex = index;
        
        if (element.classList.contains('selected')) {
            layerItem.classList.add('selected');
        }
        
        const elementType = element.dataset.type;
        const elementName = this.getElementName(elementType);
        
        layerItem.innerHTML = `
            <div class="layer-visibility">
                <input type="checkbox" checked onchange="visualBuilder.toggleElementVisibility(${index}, this.checked)" aria-label="–í–∏–¥–∏–º–æ—Å—Ç—å —Å–ª–æ—è">
            </div>
            <div class="layer-info">
                <div class="layer-name">${elementName}</div>
                <div class="layer-type">${elementType}</div>
            </div>
            <div class="layer-actions">
                <button onclick="visualBuilder.selectLayerElement(${index})" title="–í—ã–±—Ä–∞—Ç—å" aria-label="–í—ã–±—Ä–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç">üëÜ</button>
                <button onclick="visualBuilder.moveLayerElement(${index}, 'up')" title="–í–≤–µ—Ä—Ö" aria-label="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö">‚¨ÜÔ∏è</button>
                <button onclick="visualBuilder.moveLayerElement(${index}, 'down')" title="–í–Ω–∏–∑" aria-label="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–Ω–∏–∑">‚¨áÔ∏è</button>
            </div>
        `;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Å–ª–æ—é
        layerItem.addEventListener('click', () => {
            this.selectLayerElement(index);
        });
        
        return layerItem;
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    toggleElementVisibility(index, visible) {
        const elements = this.dom.canvas.querySelectorAll('.draggable-element');
        if (elements[index]) {
            elements[index].style.display = visible ? 'block' : 'none';
            this.addToHistory();
        }
    }

    /**
     * –í—ã–±–æ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –ø–∞–Ω–µ–ª–∏ —Å–ª–æ–µ–≤
     */
    selectLayerElement(index) {
        const elements = this.dom.canvas.querySelectorAll('.draggable-element');
        if (elements[index]) {
            this.selectElement(elements[index]);
        }
    }

    /**
     * –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –ø–∞–Ω–µ–ª–∏ —Å–ª–æ–µ–≤
     */
    moveLayerElement(index, direction) {
        const elements = this.dom.canvas.querySelectorAll('.draggable-element');
        const element = elements[index];
        
        if (!element) return;
        
        if (direction === 'up' && index > 0) {
            this.dom.canvas.insertBefore(element, elements[index - 1]);
        } else if (direction === 'down' && index < elements.length - 1) {
            this.dom.canvas.insertBefore(elements[index + 1], element);
        }
        
        this.addToHistory();
        this.updateLayersPanel();
    }

    /**
     * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–µ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π
     */
    addToHistory() {
        if (this.undoRedoManager) {
            this.undoRedoManager.saveStateDelayed('content_change');
        }
    }

    /**
     * –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
     */
    undo() {
        if (this.undoRedoManager) {
            this.undoRedoManager.undo();
        }
    }

    /**
     * –ü–æ–≤—Ç–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
     */
    redo() {
        if (this.undoRedoManager) {
            this.undoRedoManager.redo();
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –æ—Ç–º–µ–Ω—ã/–ø–æ–≤—Ç–æ—Ä–∞
     */
    updateUndoRedoButtons() {
        if (this.undoRedoManager) {
            this.undoRedoManager.updateUI();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ canvas
     */
    getCanvasContent() {
        return this.dom.canvas.innerHTML;
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ canvas
     */
    setCanvasContent(content) {
        this.dom.canvas.innerHTML = content;
        this.setupExistingElements();
        
        if (!this.hasCanvasContent()) {
            this.showEmptyState();
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ canvas
     */
    clearCanvas() {
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Ö–æ–ª—Å—Ç? –í—Å–µ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.')) {
            return;
        }

        this.showEmptyState();
        this.deselectAllElements();
        this.addToHistory();
        this.updateLayersPanel();
        this.showNotification('–•–æ–ª—Å—Ç –æ—á–∏—â–µ–Ω', 'warning');
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    savePage() {
        try {
            const content = this.getCanvasContent();
            const saveData = {
                content,
                timestamp: Date.now(),
                version: '1.0',
                saveNumber: ++this.counters.save
            };
            
            localStorage.setItem('vb-save', JSON.stringify(saveData));
            this.showNotification('–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', 'success');
            
            console.info('üíæ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', saveData);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã', 'error');
        }
    }

    /**
     * –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
     */
    previewPage() {
        const content = this.getCanvasContent();
        
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const cleanContent = content
            .replace(/<div class="element-controls">[\s\S]*?<\/div>/g, '')
            .replace(/contenteditable="true"/g, '')
            .replace(/class="draggable-element[^"]*"/g, 'class="preview-element"')
            .replace(/onclick="[^"]*"/g, '');
        
        const previewWindow = window.open('', '_blank', 'width=1200,height=800');
        if (previewWindow) {
            previewWindow.document.write(`
                <!DOCTYPE html>
                <html lang="ru">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä - Dental Academy</title>
                    <style>
                        * { margin: 0; padding: 0; box-sizing: border-box; }
                        body { 
                            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif; 
                            line-height: 1.6; 
                            color: #333; 
                            background: #fff;
                        }
                        .preview-element { 
                            margin: 1rem 0; 
                            border: none !important; 
                            background: transparent !important;
                        }
                        .element-content { 
                            padding: 1rem; 
                        }
                        .preview-toolbar {
                            position: fixed;
                            top: 20px;
                            right: 20px;
                            background: #333;
                            color: white;
                            padding: 10px 20px;
                            border-radius: 8px;
                            z-index: 1000;
                            font-size: 14px;
                        }
                        .preview-toolbar button {
                            background: #007bff;
                            color: white;
                            border: none;
                            padding: 5px 10px;
                            border-radius: 4px;
                            cursor: pointer;
                            margin-left: 10px;
                        }
                    </style>
                </head>
                <body>
                    <div class="preview-toolbar">
                        üìñ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
                        <button onclick="window.close()">–ó–∞–∫—Ä—ã—Ç—å</button>
                    </div>
                    <div style="max-width: 1200px; margin: 0 auto; padding: 40px 20px;">
                        ${cleanContent}
                    </div>
                </body>
                </html>
            `);
            previewWindow.document.close();
        } else {
            this.showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞', 'error');
        }
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    exportPage() {
        try {
            const content = this.getCanvasContent();
            const cleanContent = content
                .replace(/<div class="element-controls">[\s\S]*?<\/div>/g, '')
                .replace(/contenteditable="true"/g, '')
                .replace(/onclick="[^"]*"/g, '');

            const html = `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - Dental Academy</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif; 
            line-height: 1.6; 
            color: #333; 
        }
        .draggable-element { margin: 1rem 0; }
        .element-content { padding: 1rem; }
    </style>
</head>
<body>
    <div style="max-width: 1200px; margin: 0 auto; padding: 20px;">
        ${cleanContent}
    </div>
</body>
</html>`;

            this.downloadFile(html, 'page.html', 'text/html');
            this.showNotification('–°—Ç—Ä–∞–Ω–∏—Ü–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞', 'success');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã', 'error');
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
     */
    downloadFile(content, filename, mimeType) {
        const blob = new Blob([content], { type: mimeType });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        a.style.display = 'none';
        
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        
        URL.revokeObjectURL(url);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
     */
    hasUnsavedChanges() {
        try {
            const currentContent = this.getCanvasContent();
            const saved = localStorage.getItem('vb-save');
            
            if (!saved) return true;
            
            const savedData = JSON.parse(saved);
            return currentContent !== savedData.content;
        } catch {
            return true;
        }
    }

    /**
     * –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    showNotification(message, type = 'info', duration = null) {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        
        const icons = {
            success: '‚úÖ',
            error: '‚ùå',
            warning: '‚ö†Ô∏è',
            info: '‚ÑπÔ∏è'
        };
        
        const titles = {
            success: '–£—Å–ø–µ—à–Ω–æ',
            error: '–û—à–∏–±–∫–∞',
            warning: '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ',
            info: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
        };
        
        notification.innerHTML = `
            <div class="notification-icon">${icons[type]}</div>
            <div class="notification-content">
                <div class="notification-title">${titles[type]}</div>
                <div class="notification-message">${message}</div>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        requestAnimationFrame(() => {
            notification.classList.add('show');
        });
        
        // –ê–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ
        const hideTimeout = setTimeout(() => {
            this.hideNotification(notification);
        }, duration || this.config.notificationDuration);
        
        // –ö–ª–∏–∫ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è
        notification.addEventListener('click', () => {
            clearTimeout(hideTimeout);
            this.hideNotification(notification);
        });
        
        return notification;
    }

    /**
     * –°–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    hideNotification(notification) {
        notification.classList.remove('show');
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, this.config.animationDuration);
    }

    /**
     * –£—Ç–∏–ª–∏—Ç—ã
     */
    debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ canvas
     */
    updateCanvasSize() {
        // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ canvas
     */
    handleCanvasClick(event) {
        // –ï—Å–ª–∏ –∫–ª–∏–∫ –ø–æ –ø—É—Å—Ç–æ–º—É –º–µ—Å—Ç—É canvas
        if (event.target === this.dom.canvas) {
            this.deselectAllElements();
        }
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–¥–∏–∞
    
    /**
     * –í—ã–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    selectImage(placeholder) {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = this.config.supportedImageTypes.join(',');
        
        input.onchange = (event) => {
            const file = event.target.files[0];
            if (file) {
                this.handleImageUpload(file, placeholder);
            }
        };
        
        input.click();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    handleImageUpload(file, placeholder) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        if (file.size > this.config.maxFileSize) {
            this.showNotification('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB', 'error');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        if (!this.config.supportedImageTypes.includes(file.type)) {
            this.showNotification('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'error');
            return;
        }

        const reader = new FileReader();
        reader.onload = (e) => {
            placeholder.innerHTML = `
                <img src="${e.target.result}" alt="Uploaded image" style="max-width: 100%; height: auto; border-radius: 8px;">
                <div style="margin-top: 10px; font-size: 0.875rem; color: #666;">
                    ${file.name} (${(file.size / 1024 / 1024).toFixed(2)} MB)
                </div>
            `;
            this.addToHistory();
            this.showNotification('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ', 'success');
        };
        
        reader.onerror = () => {
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'error');
        };
        
        reader.readAsDataURL(file);
    }

    /**
     * –í—ã–±–æ—Ä –≤–∏–¥–µ–æ
     */
    selectVideo(placeholder) {
        const url = prompt('–í–≤–µ–¥–∏—Ç–µ URL –≤–∏–¥–µ–æ (YouTube, Vimeo) –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª:');
        if (url) {
            this.handleVideoUrl(url, placeholder);
        } else {
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = this.config.supportedVideoTypes.join(',');
            
            input.onchange = (event) => {
                const file = event.target.files[0];
                if (file) {
                    this.handleVideoUpload(file, placeholder);
                }
            };
            
            input.click();
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ URL –≤–∏–¥–µ–æ
     */
    handleVideoUrl(url, placeholder) {
        try {
            if (url.includes('youtube.com') || url.includes('youtu.be')) {
                const videoId = this.extractYouTubeId(url);
                if (videoId) {
                    placeholder.innerHTML = `
                        <iframe width="100%" height="315" src="https://www.youtube.com/embed/${videoId}" 
                                frameborder="0" allowfullscreen style="border-radius: 8px;"></iframe>
                    `;
                    this.addToHistory();
                    this.showNotification('YouTube –≤–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ', 'success');
                } else {
                    this.showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π URL YouTube', 'error');
                }
            } else if (url.includes('vimeo.com')) {
                const videoId = this.extractVimeoId(url);
                if (videoId) {
                    placeholder.innerHTML = `
                        <iframe width="100%" height="315" src="https://player.vimeo.com/video/${videoId}" 
                                frameborder="0" allowfullscreen style="border-radius: 8px;"></iframe>
                    `;
                    this.addToHistory();
                    this.showNotification('Vimeo –≤–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ', 'success');
                } else {
                    this.showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π URL Vimeo', 'error');
                }
            } else {
                // –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ
                placeholder.innerHTML = `
                    <video controls width="100%" style="border-radius: 8px;">
                        <source src="${url}" type="video/mp4">
                        –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ.
                    </video>
                `;
                this.addToHistory();
                this.showNotification('–í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ', 'success');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ URL:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ', 'error');
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞
     */
    handleVideoUpload(file, placeholder) {
        if (file.size > this.config.maxFileSize) {
            this.showNotification('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB', 'error');
            return;
        }

        const reader = new FileReader();
        reader.onload = (e) => {
            placeholder.innerHTML = `
                <video controls width="100%" style="border-radius: 8px;">
                    <source src="${e.target.result}" type="${file.type}">
                    –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ.
                </video>
                <div style="margin-top: 10px; font-size: 0.875rem; color: #666;">
                    ${file.name} (${(file.size / 1024 / 1024).toFixed(2)} MB)
                </div>
            `;
            this.addToHistory();
            this.showNotification('–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ', 'success');
        };
        
        reader.readAsDataURL(file);
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID YouTube –≤–∏–¥–µ–æ
     */
    extractYouTubeId(url) {
        const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/;
        const match = url.match(regExp);
        return (match && match[2].length === 11) ? match[2] : null;
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID Vimeo –≤–∏–¥–µ–æ
     */
    extractVimeoId(url) {
        const regExp = /vimeo\.com\/([0-9]+)/;
        const match = url.match(regExp);
        return match ? match[1] : null;
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—Å—Ç
     */
    addQuizOption(button) {
        const quizElement = button.closest('.element-content');
        const optionsContainer = quizElement.querySelector('.quiz-options');
        const optionCount = optionsContainer.querySelectorAll('label').length + 1;
        const radioName = quizElement.querySelector('input[type="radio"]').name;
        
        const newOption = document.createElement('label');
        newOption.style.cssText = 'display: block; margin: 0.5rem 0; cursor: pointer;';
        newOption.innerHTML = `
            <input type="radio" name="${radioName}" style="margin-right: 0.5rem;">
            <span contenteditable="true">–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ ${optionCount}</span>
        `;
        
        optionsContainer.appendChild(newOption);
        this.addToHistory();
        this.showNotification('–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω', 'success');
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ Advanced Style Editor
     */
    openAdvancedStyleEditor() {
        if (this.styleEditor) {
            if (this.state.selectedElement) {
                this.styleEditor.openStylePanel(this.state.selectedElement);
            } else {
                this.showNotification('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', 'warning');
            }
        } else {
            this.showNotification('Style Editor –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω', 'error');
        }
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ HTML —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
     */
    openAdvancedHTMLEditor() {
        if (this.htmlEditor) {
            // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —ç–ª–µ–º–µ–Ω—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
            if (this.state.selectedElement) {
                this.htmlEditor.editElementHTML({ closest: () => this.state.selectedElement });
            } else {
                // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç HTML
                this.htmlEditor.importExistingHTML();
            }
        } else {
            this.showNotification('HTML Editor –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω', 'error');
        }
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
     */
    openResponsiveDesign() {
        if (this.responsiveDesign) {
            this.responsiveDesign.showResponsivePanel();
        } else {
            this.showNotification('Responsive Design –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω', 'error');
        }
    }

    /**
     * –ò–º–ø–æ—Ä—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ HTML
     */
    importExistingHTML() {
        if (this.htmlEditor) {
            this.htmlEditor.importExistingHTML();
        } else {
            this.showNotification('HTML Editor –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω', 'error');
        }
    }

    /**
     * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∏–ª–µ–π —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    editElementStyles(controlBtn) {
        const element = controlBtn.closest('.draggable-element');
        if (this.styleEditor) {
            this.styleEditor.openStylePanel(element);
        } else {
            this.showNotification('Style Editor –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω', 'error');
        }
    }

    /**
     * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTML —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    editElementHTML(controlBtn) {
        const element = controlBtn.closest('.draggable-element');
        if (this.htmlEditor) {
            this.htmlEditor.editElementHTML(controlBtn);
        } else {
            this.showNotification('HTML Editor –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω', 'error');
        }
    }

    /**
     * –°–¥–µ–ª–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º
     */
    makeResponsive(controlBtn) {
        const element = controlBtn.closest('.draggable-element');
        if (this.responsiveDesign) {
            this.responsiveDesign.makeElementResponsive(element);
            this.showNotification('–≠–ª–µ–º–µ–Ω—Ç —Å–¥–µ–ª–∞–Ω –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º', 'success');
        } else {
            this.showNotification('Responsive Design –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω', 'error');
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å Box Model –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    showBoxModel() {
        if (this.state.selectedElement && this.advancedStyleEditor?.boxModel) {
            this.advancedStyleEditor.boxModel.showBoxModel(this.state.selectedElement);
        } else {
            this.showNotification('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç', 'warning');
        }
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –∫ —ç–ª–µ–º–µ–Ω—Ç—É
     */
    applyStylesToElement(element, styles) {
        if (!element || !styles) return;

        try {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º CSS —Å—Ç–∏–ª–∏
            if (styles.css) {
                Object.assign(element.style, styles.css);
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º CSS –∫–ª–∞—Å—Å—ã
            if (styles.classes) {
                element.className = styles.classes.join(' ');
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
            if (styles.customProperties) {
                Object.entries(styles.customProperties).forEach(([property, value]) => {
                    element.style.setProperty(property, value);
                });
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å —Å–≤–æ–π—Å—Ç–≤
            this.updatePropertiesPanel();
            
            console.info('‚úÖ –°—Ç–∏–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ —ç–ª–µ–º–µ–Ω—Ç—É:', styles);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π', 'error');
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å–≤–æ–π—Å—Ç–≤
     */
    updatePropertiesPanel() {
        const propertiesContent = document.getElementById('propertiesContent');
        if (!propertiesContent || !this.state.selectedElement) return;

        const element = this.state.selectedElement;
        const elementType = element.dataset.type;
        const elementName = this.getElementName(elementType);

        propertiesContent.innerHTML = `
            <div class="property-group">
                <h6 class="property-label">–≠–ª–µ–º–µ–Ω—Ç</h6>
                <p class="text-muted">${elementName} (${elementType})</p>
            </div>
            
            <div class="property-group">
                <h6 class="property-label">–û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏</h6>
                <div class="property-row">
                    <div>
                        <label class="form-label">–®–∏—Ä–∏–Ω–∞</label>
                        <input type="text" class="property-input" value="${element.style.width || ''}" 
                               onchange="visualBuilder.updateElementStyle('width', this.value)">
                    </div>
                    <div>
                        <label class="form-label">–í—ã—Å–æ—Ç–∞</label>
                        <input type="text" class="property-input" value="${element.style.height || ''}" 
                               onchange="visualBuilder.updateElementStyle('height', this.value)">
                    </div>
                </div>
                <div class="property-row">
                    <div>
                        <label class="form-label">–û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É</label>
                        <input type="text" class="property-input" value="${element.style.marginTop || ''}" 
                               onchange="visualBuilder.updateElementStyle('marginTop', this.value)">
                    </div>
                    <div>
                        <label class="form-label">–û—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É</label>
                        <input type="text" class="property-input" value="${element.style.marginBottom || ''}" 
                               onchange="visualBuilder.updateElementStyle('marginBottom', this.value)">
                    </div>
                </div>
            </div>
            
            <div class="property-group">
                <h6 class="property-label">–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h6>
                <button class="btn btn-primary btn-sm w-100" onclick="visualBuilder.openAdvancedStyleEditor()">
                    <i class="bi bi-palette2"></i>
                    Advanced Style Editor
                </button>
            </div>
        `;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    updateElementStyle(property, value) {
        if (!this.state.selectedElement) return;
        
        this.state.selectedElement.style[property] = value;
        this.addToHistory();
        this.showNotification(`–°—Ç–∏–ª—å ${property} –æ–±–Ω–æ–≤–ª–µ–Ω`, 'success');
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ Media Manager
     */
    openMediaManager() {
        if (this.mediaManager) {
            this.mediaManager.openMediaLibrary();
        } else {
            this.showNotification('Media Manager –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω', 'error');
        }
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ Export Manager
     */
    openExportManager() {
        if (this.exportManager) {
            this.exportManager.openExportDialog();
        } else {
            this.showNotification('Export Manager –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω', 'error');
        }
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ Template Manager
     */
    openTemplateManager() {
        if (this.templateManager) {
            this.templateManager.openTemplateLibrary();
        } else {
            this.showNotification('Template Manager –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω', 'error');
        }
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ File Browser
     */
    openFileBrowser() {
        if (this.fileBrowser) {
            this.fileBrowser.open();
        } else {
            this.showNotification('File Browser –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω', 'error');
        }
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ HTML —Ñ–∞–π–ª–∞ –≤ Visual Editor
     */
    openHTMLFile(filePath) {
        if (this.visualEditor) {
            this.visualEditor.openFile(filePath);
        } else {
            this.showNotification('Visual Editor –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω', 'error');
        }
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞
     */
    parseHTMLContent(htmlContent, filename = '') {
        if (this.htmlParser) {
            const elements = this.htmlParser.parseHTMLToElements(htmlContent, filename);
            this.addElementsToCanvas(elements);
            this.showNotification(`HTML —Ñ–∞–π–ª "${filename}" —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω`, 'success');
            return elements;
        } else {
            this.showNotification('HTML Parser –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω', 'error');
            return [];
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ canvas
     */
    addElementsToCanvas(elements) {
        // –û—á–∏—â–∞–µ–º canvas
        this.dom.canvas.innerHTML = '';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        elements.forEach(element => {
            this.dom.canvas.appendChild(element);
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.updateLayersPanel();
        this.addToHistory();
        
        console.info(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ canvas`);
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç canvas –≤ HTML
     */
    exportCanvasToHTML() {
        if (this.htmlParser) {
            const elements = this.dom.canvas.querySelectorAll('.draggable-element');
            const html = this.htmlParser.exportToHTML(elements);
            return html;
        } else {
            this.showNotification('HTML Parser –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω', 'error');
            return '';
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ HTML —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ File Browser
     */
    async loadHTMLFileFromBrowser() {
        if (this.fileBrowser) {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º File Browser –∏ –∂–¥–µ–º –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
            this.fileBrowser.open();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
            this.fileBrowser.onFileSelect = (filePath) => {
                if (filePath.endsWith('.html') || filePath.endsWith('.htm')) {
                    this.openHTMLFile(filePath);
                } else {
                    this.showNotification('–í—ã–±–µ—Ä–∏—Ç–µ HTML —Ñ–∞–π–ª', 'warning');
                }
            };
        } else {
            this.showNotification('File Browser –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω', 'error');
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
     */
    async saveCurrentFile() {
        if (this.liveEditor) {
            try {
                await this.liveEditor.saveFile();
                this.showNotification('–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
                this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞', 'error');
            }
        } else {
            this.showNotification('Live Editor –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω', 'error');
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
     */
    showSaveHistory() {
        if (this.liveEditor) {
            const history = this.liveEditor.state.saveHistory;
            this.showSaveHistoryModal(history);
        } else {
            this.showNotification('Live Editor –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω', 'error');
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
     */
    showSaveHistoryModal(history) {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.className = 'save-history';
        modal.innerHTML = `
            <div class="save-history-header">
                <h3 class="save-history-title">
                    <i class="bi bi-clock-history"></i>
                    –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
                </h3>
                <button class="save-history-close" onclick="this.closest('.save-history').remove()">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>
            <div class="save-history-body">
                ${this.generateSaveHistoryHTML(history)}
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        requestAnimationFrame(() => {
            modal.style.display = 'block';
        });
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
     */
    generateSaveHistoryHTML(history) {
        if (!history || history.length === 0) {
            return `
                <div style="text-align: center; padding: 2rem; color: var(--text-secondary);">
                    <i class="bi bi-clock-history" style="font-size: 3rem; margin-bottom: 1rem; opacity: 0.5;"></i>
                    <p>–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –ø—É—Å—Ç–∞</p>
                </div>
            `;
        }
        
        return history.map(save => `
            <div class="save-history-item ${save.success ? 'success' : 'error'}">
                <div class="save-history-icon">
                    <i class="bi ${save.success ? 'bi-check-lg' : 'bi-x-lg'}"></i>
                </div>
                <div class="save-history-info">
                    <div class="save-history-file">${save.filepath || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª'}</div>
                    <div class="save-history-time">${new Date(save.timestamp).toLocaleString()}</div>
                </div>
                <div class="save-history-type">
                    ${save.isAutoSave ? '–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ' : '–†—É—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ'}
                </div>
            </div>
        `).join('');
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    setCurrentFile(filePath) {
        if (this.liveEditor) {
            this.liveEditor.setCurrentFile(filePath);
            this.showNotification(`–û—Ç–∫—Ä—ã—Ç —Ñ–∞–π–ª: ${filePath}`, 'info');
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
     */
    hasUnsavedChanges() {
        if (this.liveEditor) {
            return this.liveEditor.hasUnsavedChanges();
        }
        return false;
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
     */
    async forceSaveAll() {
        if (this.liveEditor) {
            try {
                await this.liveEditor.forceSave();
                this.showNotification('–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
                this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π', 'error');
            }
        }
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ Component Library
     */
    openComponentLibrary() {
        if (this.componentLibrary) {
            this.showComponentLibraryModal();
        } else {
            this.showNotification('Component Library –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞', 'error');
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ Component Library
     */
    showComponentLibraryModal() {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.className = 'component-library-modal';
        modal.innerHTML = `
            <div class="component-library-content">
                <div class="component-library-header">
                    <h3 class="component-library-title">
                        <i class="bi bi-puzzle"></i>
                        –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                    </h3>
                    <button class="component-library-close" onclick="this.closest('.component-library-modal').remove()">
                        <i class="bi bi-x-lg"></i>
                    </button>
                </div>
                <div class="component-library-controls">
                    <div class="component-search">
                        <input type="text" id="componentSearch" placeholder="–ü–æ–∏—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...">
                    </div>
                    <div class="category-filter">
                        <select id="categoryFilter">
                            <option value="all">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                            <option value="text">–¢–µ–∫—Å—Ç</option>
                            <option value="media">–ú–µ–¥–∏–∞</option>
                            <option value="interactive">–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ</option>
                            <option value="layout">–ú–∞–∫–µ—Ç</option>
                            <option value="dental">–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è</option>
                        </select>
                    </div>
                </div>
                <div class="component-grid" id="componentGrid">
                    <!-- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        requestAnimationFrame(() => {
            modal.style.display = 'block';
        });
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Component Library
        if (this.componentLibrary) {
            this.componentLibrary.renderComponentGrid();
        }
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Drag & Drop
     */
    openDragDropSettings() {
        if (this.dragDropEditor) {
            this.showDragDropSettingsModal();
        } else {
            this.showNotification('Drag & Drop Editor –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω', 'error');
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Drag & Drop
     */
    showDragDropSettingsModal() {
        const config = this.dragDropEditor.getConfig();
        
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.className = 'drag-drop-settings-modal';
        modal.innerHTML = `
            <div class="drag-drop-settings-content">
                <div class="drag-drop-settings-header">
                    <h3 class="drag-drop-settings-title">
                        <i class="bi bi-arrows-move"></i>
                        –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Drag & Drop
                    </h3>
                    <button class="drag-drop-settings-close" onclick="this.closest('.drag-drop-settings-modal').remove()">
                        <i class="bi bi-x-lg"></i>
                    </button>
                </div>
                <div class="drag-drop-settings-body">
                    <div class="settings-section">
                        <h4>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h4>
                        <div class="setting-item">
                            <label class="setting-label">
                                <input type="checkbox" id="dragPreview" ${config.dragPreview ? 'checked' : ''}>
                                –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–µ–≤—å—é –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
                            </label>
                        </div>
                        <div class="setting-item">
                            <label class="setting-label">
                                <input type="checkbox" id="dropZoneHighlight" ${config.dropZoneHighlight ? 'checked' : ''}>
                                –ü–æ–¥—Å–≤–µ—á–∏–≤–∞—Ç—å –∑–æ–Ω—ã drop
                            </label>
                        </div>
                        <div class="setting-item">
                            <label class="setting-label">
                                <input type="checkbox" id="dropAnimation" ${config.dropAnimation ? 'checked' : ''}>
                                –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏ drop
                            </label>
                        </div>
                    </div>
                    
                    <div class="settings-section">
                        <h4>Snap –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h4>
                        <div class="setting-item">
                            <label class="setting-label">
                                <input type="checkbox" id="snapToGrid" ${config.snapToGrid ? 'checked' : ''}>
                                Snap to grid
                            </label>
                        </div>
                        <div class="setting-item">
                            <label class="setting-label">
                                <input type="checkbox" id="snapToElements" ${config.snapToElements ? 'checked' : ''}>
                                Snap –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º
                            </label>
                        </div>
                        <div class="setting-item">
                            <label class="setting-label">
                                –ü–æ—Ä–æ–≥ snap (px):
                                <input type="range" id="snapThreshold" min="5" max="20" value="${config.snapThreshold}">
                                <span id="snapThresholdValue">${config.snapThreshold}</span>
                            </label>
                        </div>
                    </div>
                    
                    <div class="settings-section">
                        <h4>–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ</h4>
                        <div class="setting-item">
                            <label class="setting-label">
                                <input type="checkbox" id="multiSelect" ${config.multiSelect ? 'checked' : ''}>
                                –†–∞–∑—Ä–µ—à–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                            </label>
                        </div>
                        <div class="setting-item">
                            <label class="setting-label">
                                –ó–∞–¥–µ—Ä–∂–∫–∞ drag (–º—Å):
                                <input type="range" id="dragDelay" min="100" max="500" value="${config.dragDelay}">
                                <span id="dragDelayValue">${config.dragDelay}</span>
                            </label>
                        </div>
                    </div>
                    
                    <div class="settings-section">
                        <h4>–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏</h4>
                        <div class="shortcuts-list">
                            <div class="shortcut-item">
                                <span class="shortcut-key">Shift</span>
                                <span class="shortcut-desc">–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ</span>
                            </div>
                            <div class="shortcut-item">
                                <span class="shortcut-key">Ctrl+G</span>
                                <span class="shortcut-desc">–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å snap to grid</span>
                            </div>
                            <div class="shortcut-item">
                                <span class="shortcut-key">Escape</span>
                                <span class="shortcut-desc">–û—Ç–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ</span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="drag-drop-settings-footer">
                    <button class="btn btn-secondary" onclick="this.closest('.drag-drop-settings-modal').remove()">
                        –û—Ç–º–µ–Ω–∞
                    </button>
                    <button class="btn btn-primary" onclick="visualBuilder.saveDragDropSettings()">
                        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    </button>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        requestAnimationFrame(() => {
            modal.style.display = 'block';
        });
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è range inputs
        this.setupRangeInputs();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ range inputs
     */
    setupRangeInputs() {
        const snapThreshold = document.getElementById('snapThreshold');
        const snapThresholdValue = document.getElementById('snapThresholdValue');
        const dragDelay = document.getElementById('dragDelay');
        const dragDelayValue = document.getElementById('dragDelayValue');
        
        if (snapThreshold && snapThresholdValue) {
            snapThreshold.addEventListener('input', (e) => {
                snapThresholdValue.textContent = e.target.value;
            });
        }
        
        if (dragDelay && dragDelayValue) {
            dragDelay.addEventListener('input', (e) => {
                dragDelayValue.textContent = e.target.value;
            });
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Drag & Drop
     */
    saveDragDropSettings() {
        if (!this.dragDropEditor) return;

        const newConfig = {
            dragPreview: document.getElementById('dragPreview')?.checked || false,
            dropZoneHighlight: document.getElementById('dropZoneHighlight')?.checked || false,
            dropAnimation: document.getElementById('dropAnimation')?.checked || false,
            snapToGrid: document.getElementById('snapToGrid')?.checked || false,
            snapToElements: document.getElementById('snapToElements')?.checked || false,
            multiSelect: document.getElementById('multiSelect')?.checked || false,
            snapThreshold: parseInt(document.getElementById('snapThreshold')?.value || '10'),
            dragDelay: parseInt(document.getElementById('dragDelay')?.value || '200')
        };

        this.dragDropEditor.updateConfig(newConfig);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        localStorage.setItem('vb-dragdrop-config', JSON.stringify(newConfig));
        
        this.showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Drag & Drop —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.querySelector('.drag-drop-settings-modal');
        if (modal) {
            modal.remove();
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Drag & Drop
     */
    loadDragDropSettings() {
        try {
            const saved = localStorage.getItem('vb-dragdrop-config');
            if (saved && this.dragDropEditor) {
                const config = JSON.parse(saved);
                this.dragDropEditor.updateConfig(config);
                console.info('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Drag & Drop –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            }
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Drag & Drop:', error);
        }
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ Undo/Redo
     */
    openUndoRedoHistory() {
        if (this.undoRedoManager) {
            this.undoRedoManager.showHistoryPanel();
        } else {
            this.showNotification('Undo/Redo Manager –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω', 'error');
        }
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
     */
    openKeyboardShortcuts() {
        if (this.keyboardShortcuts) {
            this.keyboardShortcuts.showShortcutsHelp();
        } else {
            this.showNotification('Keyboard Shortcuts Manager –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω', 'error');
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    setupElementDrag(element) {
        let isDragging = false;
        let startX = 0;
        let startY = 0;
        let startLeft = 0;
        let startTop = 0;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ mousedown –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç
        element.addEventListener('mousedown', (e) => {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if (e.target.closest('.element-controls button')) return;
            
            isDragging = true;
            startX = e.clientX;
            startY = e.clientY;
            startLeft = parseInt(element.style.left) || 0;
            startTop = parseInt(element.style.top) || 0;

            element.classList.add('dragging');
            document.addEventListener('mousemove', handleDrag);
            document.addEventListener('mouseup', stopDrag);
            
            e.preventDefault();
        });

        const handleDrag = (e) => {
            if (!isDragging) return;

            const deltaX = e.clientX - startX;
            const deltaY = e.clientY - startY;
            
            let newLeft = startLeft + deltaX;
            let newTop = startTop + deltaY;

            // Snap to grid if enabled
            if (this.state.gridSnap) {
                const gridSize = 20;
                newLeft = Math.round(newLeft / gridSize) * gridSize;
                newTop = Math.round(newTop / gridSize) * gridSize;
            }

            element.style.left = `${newLeft}px`;
            element.style.top = `${newTop}px`;
        };

        const stopDrag = () => {
            if (!isDragging) return;
            
            isDragging = false;
            element.classList.remove('dragging');
            
            document.removeEventListener('mousemove', handleDrag);
            document.removeEventListener('mouseup', stopDrag);
            
            this.addToHistory();
        };
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ handles –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
     */
    addResizeHandles(element) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ handles
        if (element.querySelector('.resize-handles')) return;

        const handles = document.createElement('div');
        handles.className = 'resize-handles';
        handles.innerHTML = `
            <div class="resize-handle nw" data-direction="nw"></div>
            <div class="resize-handle ne" data-direction="ne"></div>
            <div class="resize-handle sw" data-direction="sw"></div>
            <div class="resize-handle se" data-direction="se"></div>
            <div class="resize-handle n" data-direction="n"></div>
            <div class="resize-handle s" data-direction="s"></div>
            <div class="resize-handle w" data-direction="w"></div>
            <div class="resize-handle e" data-direction="e"></div>
        `;
        
        element.appendChild(handles);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ resize
        this.setupResizeHandlers(element, handles);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
     */
    setupResizeHandlers(element, handles) {
        let isResizing = false;
        let startX = 0;
        let startY = 0;
        let startWidth = 0;
        let startHeight = 0;
        let startLeft = 0;
        let startTop = 0;
        let direction = '';

        const startResize = (e) => {
            if (!e.target.classList.contains('resize-handle')) return;
            
            isResizing = true;
            direction = e.target.dataset.direction;
            
            const rect = element.getBoundingClientRect();
            startX = e.clientX;
            startY = e.clientY;
            startWidth = rect.width;
            startHeight = rect.height;
            startLeft = parseInt(element.style.left) || 0;
            startTop = parseInt(element.style.top) || 0;

            element.classList.add('resizing');
            
            document.addEventListener('mousemove', handleResize);
            document.addEventListener('mouseup', stopResize);
            
            e.preventDefault();
            e.stopPropagation();
        };

        const handleResize = (e) => {
            if (!isResizing) return;

            const deltaX = e.clientX - startX;
            const deltaY = e.clientY - startY;
            
            let newWidth = startWidth;
            let newHeight = startHeight;
            let newLeft = startLeft;
            let newTop = startTop;

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            switch (direction) {
                case 'se': // –ü—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
                    newWidth = Math.max(50, startWidth + deltaX);
                    newHeight = Math.max(30, startHeight + deltaY);
                    break;
                case 'sw': // –õ–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
                    newWidth = Math.max(50, startWidth - deltaX);
                    newHeight = Math.max(30, startHeight + deltaY);
                    newLeft = startLeft + deltaX;
                    break;
                case 'ne': // –ü—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
                    newWidth = Math.max(50, startWidth + deltaX);
                    newHeight = Math.max(30, startHeight - deltaY);
                    newTop = startTop + deltaY;
                    break;
                case 'nw': // –õ–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
                    newWidth = Math.max(50, startWidth - deltaX);
                    newHeight = Math.max(30, startHeight - deltaY);
                    newLeft = startLeft + deltaX;
                    newTop = startTop + deltaY;
                    break;
                case 'e': // –ü—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
                    newWidth = Math.max(50, startWidth + deltaX);
                    break;
                case 'w': // –õ–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞
                    newWidth = Math.max(50, startWidth - deltaX);
                    newLeft = startLeft + deltaX;
                    break;
                case 's': // –ù–∏–∂–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞
                    newHeight = Math.max(30, startHeight + deltaY);
                    break;
                case 'n': // –í–µ—Ä—Ö–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞
                    newHeight = Math.max(30, startHeight - deltaY);
                    newTop = startTop + deltaY;
                    break;
            }

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏ –ø–æ–∑–∏—Ü–∏—é
            element.style.width = `${newWidth}px`;
            element.style.height = `${newHeight}px`;
            element.style.left = `${newLeft}px`;
            element.style.top = `${newTop}px`;
        };

        const stopResize = () => {
            if (!isResizing) return;
            
            isResizing = false;
            element.classList.remove('resizing');
            
            document.removeEventListener('mousemove', handleResize);
            document.removeEventListener('mouseup', stopResize);
            
            this.addToHistory();
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –≤—Å–µ handles
        handles.querySelectorAll('.resize-handle').forEach(handle => {
            handle.addEventListener('mousedown', startResize);
        });
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
let visualBuilder;

// –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–æ–π
function toggleTheme() {
    if (visualBuilder) {
        visualBuilder.toggleTheme();
    }
}

// –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
function moveElement(button, direction) {
    if (visualBuilder) {
        visualBuilder.moveElement(button, direction);
    }
}

function duplicateElement(button) {
    if (visualBuilder) {
        visualBuilder.duplicateElement(button);
    }
}

function deleteElement(button) {
    if (visualBuilder) {
        visualBuilder.deleteElement(button);
    }
}

// –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ö–æ–ª—Å—Ç–æ–º
function clearCanvas() {
    if (visualBuilder) {
        visualBuilder.clearCanvas();
    }
}

function savePage() {
    if (visualBuilder) {
        visualBuilder.savePage();
    }
}

function previewPage() {
    if (visualBuilder) {
        visualBuilder.previewPage();
    }
}

function exportPage() {
    if (visualBuilder) {
        visualBuilder.exportPage();
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏
function undo() {
    if (visualBuilder) {
        visualBuilder.undo();
    }
}

function redo() {
    if (visualBuilder) {
        visualBuilder.redo();
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –∑—É–º–∞
function zoomIn() {
    if (visualBuilder) {
        visualBuilder.showNotification('–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∞', 'info');
    }
}

function zoomOut() {
    if (visualBuilder) {
        visualBuilder.showNotification('–£–º–µ–Ω—å—à–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–∞', 'info');
    }
}

function resetZoom() {
    if (visualBuilder) {
        visualBuilder.showNotification('–ú–∞—Å—à—Ç–∞–± —Å–±—Ä–æ—à–µ–Ω', 'info');
    }
}

// –§—É–Ω–∫—Ü–∏–∏ —Å–ª–æ–µ–≤
function toggleElementVisibility(index, visible) {
    if (visualBuilder) {
        visualBuilder.toggleElementVisibility(index, visible);
    }
}

function selectLayerElement(index) {
    if (visualBuilder) {
        visualBuilder.selectLayerElement(index);
    }
}

function moveLayerElement(index, direction) {
    if (visualBuilder) {
        visualBuilder.moveLayerElement(index, direction);
    }
}

function toggleLayersPanel() {
    const panel = document.querySelector('.layers-panel');
    const content = document.getElementById('layers-content');
    
    if (content) {
        content.style.display = content.style.display === 'none' ? 'block' : 'none';
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', function() {
    try {
        console.info('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Visual Builder...');
        visualBuilder = new VisualBuilder();
        
        // –î–µ–ª–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        window.visualBuilder = visualBuilder;
        
        console.info('‚úÖ Visual Builder —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        const errorMessage = document.createElement('div');
        errorMessage.innerHTML = `
            <div style="position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); 
                        background: #fee; border: 1px solid #fcc; border-radius: 8px; 
                        padding: 20px; max-width: 400px; text-align: center; z-index: 10000;">
                <h3 style="color: #c33; margin-bottom: 10px;">‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
                <p style="margin-bottom: 15px;">Visual Builder –Ω–µ —Å–º–æ–≥ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.</p>
                <button onclick="location.reload()" style="background: #c33; color: white; border: none; 
                                padding: 8px 16px; border-radius: 4px; cursor: pointer;">
                    –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                </button>
            </div>
        `;
        document.body.appendChild(errorMessage);
    }
});