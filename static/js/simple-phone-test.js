// simple-phone-test.js - –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∞–Ω–∏–º–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
console.log('üì± Simple Phone Test Loaded');

// –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', function() {
    console.log('üì± DOM Loaded - Simple Phone Test');
    
    // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const phoneContainer = document.querySelector('.device-mockup');
    const screenSlides = document.getElementById('screenSlides');
    const indicators = document.querySelectorAll('.indicator');
    
    console.log('üì± Found elements:', {
        phoneContainer: !!phoneContainer,
        screenSlides: !!screenSlides,
        indicatorsCount: indicators.length
    });
    
    // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    if (phoneContainer && screenSlides && indicators.length > 0) {
        console.log('‚úÖ All phone elements found, testing animation...');
        
        let currentScreen = 0;
        const totalScreens = 4;
        
        // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
        function switchScreen(screenIndex) {
            if (screenIndex < 0 || screenIndex >= totalScreens) return;
            
            currentScreen = screenIndex;
            const offset = -screenIndex * 25; // 25% –Ω–∞ —ç–∫—Ä–∞–Ω
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é
            screenSlides.style.transform = `translateX(${offset}%)`;
            console.log(`üì± Switched to screen ${screenIndex + 1}, offset: ${offset}%`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            indicators.forEach((indicator, index) => {
                indicator.classList.toggle('active', index === screenIndex);
            });
        }
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
        let autoInterval = null;
        
        function startAutoSwitch() {
            if (autoInterval) clearInterval(autoInterval);
            
            autoInterval = setInterval(() => {
                const nextScreen = (currentScreen + 1) % totalScreens;
                switchScreen(nextScreen);
            }, 3000);
            
            console.log('üì± Auto switch started');
        }
        
        function stopAutoSwitch() {
            if (autoInterval) {
                clearInterval(autoInterval);
                autoInterval = null;
                console.log('üì± Auto switch stopped');
            }
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        indicators.forEach((indicator, index) => {
            indicator.addEventListener('click', () => {
                switchScreen(index);
                stopAutoSwitch();
                // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                setTimeout(startAutoSwitch, 5000);
            });
        });
        
        // Touch/swipe –ø–æ–¥–¥–µ—Ä–∂–∫–∞
        let startX = 0;
        let currentX = 0;
        
        phoneContainer.addEventListener('touchstart', (e) => {
            startX = e.touches[0].clientX;
        });
        
        phoneContainer.addEventListener('touchmove', (e) => {
            currentX = e.touches[0].clientX;
        });
        
        phoneContainer.addEventListener('touchend', () => {
            const diff = startX - currentX;
            const threshold = 50;
            
            if (Math.abs(diff) > threshold) {
                if (diff > 0 && currentScreen < totalScreens - 1) {
                    // –°–≤–∞–π–ø –≤–ª–µ–≤–æ - —Å–ª–µ–¥—É—é—â–∏–π —ç–∫—Ä–∞–Ω
                    switchScreen(currentScreen + 1);
                } else if (diff < 0 && currentScreen > 0) {
                    // –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ - –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫—Ä–∞–Ω
                    switchScreen(currentScreen - 1);
                }
                
                stopAutoSwitch();
                setTimeout(startAutoSwitch, 5000);
            }
        });
        
        // Mouse hover –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        phoneContainer.addEventListener('mouseenter', stopAutoSwitch);
        phoneContainer.addEventListener('mouseleave', startAutoSwitch);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
        setTimeout(startAutoSwitch, 1000);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        window.simplePhoneTest = {
            switchScreen,
            startAutoSwitch,
            stopAutoSwitch,
            currentScreen: () => currentScreen
        };
        
        console.log('‚úÖ Simple phone animation initialized successfully!');
        console.log('üîß Test functions available: window.simplePhoneTest');
        
    } else {
        console.log('‚ùå Phone elements not found:', {
            phoneContainer: !!phoneContainer,
            screenSlides: !!screenSlides,
            indicatorsCount: indicators.length
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º device-mockup
        const allDeviceElements = document.querySelectorAll('[class*="device"]');
        console.log('üîç All device-related elements:', allDeviceElements);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å id screenSlides
        const allScreenElements = document.querySelectorAll('[id*="screen"]');
        console.log('üîç All screen-related elements:', allScreenElements);
    }
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ window.onload
window.addEventListener('load', function() {
    console.log('üì± Window Loaded - Simple Phone Test');
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    const phoneContainer = document.querySelector('.device-mockup');
    if (phoneContainer) {
        console.log('‚úÖ Phone container found on window load');
    } else {
        console.log('‚ùå Phone container still not found on window load');
    }
}); 