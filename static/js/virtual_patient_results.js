// Enhanced Virtual Patient Results JavaScript
/**
 * Enhanced JavaScript –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
 * –í–∫–ª—é—á–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏–∏, –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
 */

class EnhancedVirtualPatientResults {
    constructor() {
        this.chart = null;
        this.animationObserver = null;
        this.particles = [];
        this.isInitialized = false;
        this.tooltip = null;
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
     */
    init() {
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.initializeAll());
        } else {
            this.initializeAll();
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
     */
    initializeAll() {
        try {
            console.log('üöÄ Initializing Enhanced Virtual Patient Results...');
            
            this.createParticleSystem();
            this.initializeScrollAnimations();
            this.createCompetencyChart();
            this.animateCounters();
            this.initializeTooltips();
            this.setupInteractiveEffects();
            this.animateProgressBars();
            this.initializeGamificationEffects();
            
            this.isInitialized = true;
            console.log('‚úÖ Enhanced Virtual Patient Results initialized successfully!');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
            this.showNotification(window.t('system_loaded', window.lang) + ' üéâ', 'success');
            
        } catch (error) {
            console.error('‚ùå Error initializing Enhanced Virtual Patient Results:', error);
            this.showNotification(window.t('system_load_error', window.lang), 'error');
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É —á–∞—Å—Ç–∏—Ü –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
     */
    createParticleSystem() {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —á–∞—Å—Ç–∏—Ü, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        let particleContainer = document.querySelector('.particle-container');
        if (!particleContainer) {
            particleContainer = document.createElement('div');
            particleContainer.className = 'particle-container';
            document.body.appendChild(particleContainer);
        }

        // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—ã
        for (let i = 0; i < 5; i++) {
            const particle = document.createElement('div');
            particle.className = 'particle';
            particle.style.top = `${Math.random() * 100}%`;
            particle.style.left = `${Math.random() * 100}%`;
            particle.style.animationDelay = `${Math.random() * 20}s`;
            particleContainer.appendChild(particle);
            this.particles.push(particle);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–π –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
     */
    initializeScrollAnimations() {
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        this.animationObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('revealed');
                    
                    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    if (entry.target.classList.contains('metric-card')) {
                        this.animateMetricCard(entry.target);
                    }
                    
                    if (entry.target.classList.contains('reward-card')) {
                        this.animateRewardCard(entry.target);
                    }
                }
            });
        }, observerOptions);

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        const elementsToAnimate = document.querySelectorAll(
            '.performance-overview, .metric-card, .reward-card, .competency-analysis, .decision-timeline'
        );
        
        elementsToAnimate.forEach(el => {
            el.classList.add('scroll-reveal');
            this.animationObserver.observe(el);
        });
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
     */
    getCompetencyData() {
        let empathyScore = 50;
        let clinicalScore = 50;
        let communicationScore = 50;

        // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        const competencyMetrics = document.querySelectorAll('.competency-metric');
        
        competencyMetrics.forEach(metric => {
            const nameElement = metric.querySelector('.competency-name');
            const scoreElement = metric.querySelector('.competency-score');
            
            if (nameElement && scoreElement) {
                const name = nameElement.textContent.toLowerCase();
                const scoreText = scoreElement.textContent.replace(/[^\d]/g, '');
                const score = parseInt(scoreText) || 50;
                
                // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                const scaledScore = Math.max(score, 15);
                
                if (name.includes('—ç–º–ø–∞—Ç–∏—è') || name.includes('–µ–º–ø–∞—Ç—ñ—è') || name.includes('empathy')) {
                    empathyScore = scaledScore;
                } else if (name.includes('–∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ') || name.includes('–∫–ª—ñ–Ω—ñ—á–Ω—ñ') || name.includes('clinical')) {
                    clinicalScore = scaledScore;
                } else if (name.includes('–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è') || name.includes('–∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è') || name.includes('communication')) {
                    communicationScore = scaledScore;
                }
            }
        });

        const efficiencyScore = this.calculateEfficiency();
        const decisionScore = this.calculateDecisionQuality();

        const data = {
            empathy: empathyScore,
            clinical: clinicalScore,
            communication: communicationScore,
            efficiency: efficiencyScore,
            decision: decisionScore
        };

        console.log('üìä Competency data for chart:', data);
        return data;
    }

    /**
     * –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
     */
    calculateEfficiency() {
        const timeElements = document.querySelectorAll('.metric-value');
        let timeSpent = 360; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 6 –º–∏–Ω—É—Ç

        timeElements.forEach(element => {
            const parent = element.closest('.metric-card');
            if (parent) {
                const label = parent.querySelector('.metric-label');
                if (label && label.textContent.includes(window.t('scenario_time', window.lang))) {
                    const timeText = element.textContent;
                    const minutes = parseInt(timeText);
                    if (!isNaN(minutes)) {
                        timeSpent = minutes * 60;
                    }
                }
            }
        });

        // –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: —á–µ–º –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —Ç–µ–º –≤—ã—à–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if (timeSpent < 300) return 90;      // –ú–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç - –æ—Ç–ª–∏—á–Ω–æ
        if (timeSpent < 600) return 75;      // –ú–µ–Ω–µ–µ 10 –º–∏–Ω—É—Ç - —Ö–æ—Ä–æ—à–æ
        if (timeSpent < 900) return 60;      // –ú–µ–Ω–µ–µ 15 –º–∏–Ω—É—Ç - —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ
        if (timeSpent < 1200) return 45;     // –ú–µ–Ω–µ–µ 20 –º–∏–Ω—É—Ç - –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
        return 30;                           // –ë–æ–ª–µ–µ 20 –º–∏–Ω—É—Ç - –º–µ–¥–ª–µ–Ω–Ω–æ
    }

    /**
     * –†–∞—Å—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ—à–µ–Ω–∏–π
     */
    calculateDecisionQuality() {
        const scoreDisplay = document.querySelector('.score-value');
        if (scoreDisplay) {
            const scoreText = scoreDisplay.textContent;
            const scoreParts = scoreText.split('/');
            if (scoreParts.length === 2) {
                const totalScore = parseInt(scoreParts[0]);
                const maxScore = parseInt(scoreParts[1]);
                const percentage = maxScore > 0 ? (totalScore / maxScore) * 100 : 0;
                return Math.max(0, Math.min(100, Math.round(percentage)));
            }
        }
        return 50;
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é —Ä–∞–¥–∞—Ä–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π
     */
    createCompetencyChart() {
        const ctx = document.getElementById('competencyChart');
        
        if (!ctx) {
            console.warn('‚ö†Ô∏è Competency chart canvas not found');
            return;
        }
        
        if (typeof Chart === 'undefined') {
            console.error('‚ùå Chart.js not available');
            return;
        }
        
        const data = this.getCompetencyData();

        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫
        if (this.chart) {
            this.chart.destroy();
        }

        try {
            this.chart = new Chart(ctx, {
                type: 'radar',
                data: {
                    labels: [
                        window.t('empathy', window.lang),
                        window.t('clinical_skills', window.lang),
                        window.t('communication', window.lang),
                        window.t('efficiency', window.lang),
                        window.t('decision_quality', window.lang)
                    ],
                    datasets: [{
                        label: window.t('your_results', window.lang),
                        data: [
                            data.empathy,
                            data.clinical,
                            data.communication,
                            data.efficiency,
                            data.decision
                        ],
                        backgroundColor: 'rgba(102, 126, 234, 0.2)',
                        borderColor: 'rgba(102, 126, 234, 1)',
                        pointBackgroundColor: 'rgba(102, 126, 234, 1)',
                        pointBorderColor: '#fff',
                        pointHoverBackgroundColor: '#fff',
                        pointHoverBorderColor: 'rgba(102, 126, 234, 1)'
                    }]
                },
                options: {
                    scales: {
                        r: {
                            angleLines: {
                                display: true
                            },
                            suggestedMin: 0,
                            suggestedMax: 100
                        }
                    }
                }
            });
        } catch (error) {
            console.error('‚ùå Error creating competency chart:', error);
        }
    }

    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
     */
    animateCounters() {
        const counters = document.querySelectorAll('.metric-value, .reward-value, .score-value');
        
        counters.forEach((counter, index) => {
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
            setTimeout(() => {
                this.animateCounter(counter);
            }, index * 200);
        });
    }

    /**
     * –ê–Ω–∏–º–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫
     */
    animateCounter(element) {
        const text = element.textContent;
        const numbers = text.match(/\d+/g);
        
        if (!numbers) return;
        
        const target = parseInt(numbers[0]);
        const duration = 2000;
        const steps = 60;
        const increment = target / steps;
        const stepDuration = duration / steps;
        
        let current = 0;
        element.style.transform = 'scale(1.1)';
        
        const timer = setInterval(() => {
            current += increment;
            const displayValue = Math.min(Math.ceil(current), target);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            const newText = text.replace(/\d+/, displayValue);
            element.textContent = newText;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–ª—å—Å–∞—Ü–∏—é –Ω–∞ –≤–∞–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö
            if (displayValue === target) {
                element.style.transform = 'scale(1)';
                element.style.transition = 'transform 0.3s ease';
                clearInterval(timer);
                
                // –§–∏–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
                setTimeout(() => {
                    element.style.transform = 'scale(1.05)';
                    setTimeout(() => {
                        element.style.transform = 'scale(1)';
                    }, 150);
                }, 100);
            }
        }, stepDuration);
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
     */
    initializeTooltips() {
        const tooltipElements = document.querySelectorAll('[data-tooltip]');
        
        tooltipElements.forEach(element => {
            element.classList.add('tooltip');
            
            element.addEventListener('mouseenter', (e) => {
                this.showTooltip(e.target);
            });
            
            element.addEventListener('mouseleave', (e) => {
                this.hideTooltip();
            });
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
     */
    setupInteractiveEffects() {
        // –ú–∞–≥–Ω–∏—Ç–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ –∫–∞—Ä—Ç–æ—á–µ–∫
        const interactiveElements = document.querySelectorAll(
            '.metric-card, .reward-card, .competency-metric, .decision-score'
        );
        
        interactiveElements.forEach(element => {
            element.classList.add('magnetic-hover');
            
            element.addEventListener('mouseenter', (e) => {
                this.addInteractiveGlow(e.target);
            });
            
            element.addEventListener('mouseleave', (e) => {
                this.removeInteractiveGlow(e.target);
            });
        });

        // Ripple —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const clickableElements = document.querySelectorAll('.metric-card, .reward-card');
        clickableElements.forEach(element => {
            element.classList.add('button-ripple');
        });
    }

    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
     */
    animateProgressBars() {
        const progressBars = document.querySelectorAll('.progress-fill');
        
        progressBars.forEach((bar, index) => {
            setTimeout(() => {
                const width = bar.style.width || '0%';
                bar.style.width = '0%';
                bar.style.transition = 'width 2s cubic-bezier(0.4, 0.0, 0.2, 1)';
                
                requestAnimationFrame(() => {
                    bar.style.width = width;
                });
            }, index * 300);
        });
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
     */
    initializeGamificationEffects() {
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥
        const rewardCards = document.querySelectorAll('.reward-card');
        rewardCards.forEach((card, index) => {
            setTimeout(() => {
                card.style.transform = 'translateY(0) scale(1)';
                card.style.opacity = '1';
            }, index * 150);
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–≥—Ä–∞–¥
        rewardCards.forEach(card => {
            card.addEventListener('click', () => {
                this.celebrateReward(card);
            });
        });

        // –ê–Ω–∏–º–∞—Ü–∏—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã —Å—á–µ—Ç–∞
        this.animateScoreCircle();
    }

    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è –∫—Ä—É–≥–æ–≤–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å—á–µ—Ç–∞
     */
    animateScoreCircle() {
        const progressRing = document.querySelector('.progress-ring');
        const scoreValue = document.querySelector('.score-value');
        
        if (!progressRing || !scoreValue) return;
        
        const scoreText = scoreValue.textContent;
        const scoreParts = scoreText.split('/');
        
        if (scoreParts.length === 2) {
            const current = parseInt(scoreParts[0]);
            const max = parseInt(scoreParts[1]);
            const percentage = (current / max) * 100;
            
            // –†–∞–¥–∏—É—Å –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏
            const radius = 52;
            const circumference = 2 * Math.PI * radius;
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º stroke-dasharray
            progressRing.style.strokeDasharray = circumference;
            progressRing.style.strokeDashoffset = circumference;
            
            // –ê–Ω–∏–º–∏—Ä—É–µ–º
            setTimeout(() => {
                const offset = circumference - (percentage / 100) * circumference;
                progressRing.style.transition = 'stroke-dashoffset 2s cubic-bezier(0.4, 0.0, 0.2, 1)';
                progressRing.style.strokeDashoffset = offset;
            }, 500);
        }
    }

    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è –º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
     */
    animateMetricCard(card) {
        card.style.transform = 'translateY(20px)';
        card.style.opacity = '0';
        
        requestAnimationFrame(() => {
            card.style.transition = 'all 0.6s cubic-bezier(0.175, 0.885, 0.32, 1.275)';
            card.style.transform = 'translateY(0)';
            card.style.opacity = '1';
        });
    }

    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞–≥—Ä–∞–¥
     */
    animateRewardCard(card) {
        card.style.transform = 'scale(0.8) rotate(-5deg)';
        card.style.opacity = '0';
        
        requestAnimationFrame(() => {
            card.style.transition = 'all 0.8s cubic-bezier(0.175, 0.885, 0.32, 1.275)';
            card.style.transform = 'scale(1) rotate(0deg)';
            card.style.opacity = '1';
        });
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
     */
    addInteractiveGlow(element) {
        element.classList.add('interactive-glow');
    }

    /**
     * –£–±–∏—Ä–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
     */
    removeInteractiveGlow(element) {
        element.classList.remove('interactive-glow');
    }

    /**
     * –ü—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
     */
    celebrateReward(rewardCard) {
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏—è
        const celebration = document.createElement('div');
        celebration.className = 'achievement-celebration';
        document.body.appendChild(celebration);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
        rewardCard.style.transform = 'scale(1.1)';
        rewardCard.style.transition = 'transform 0.3s ease';
        
        setTimeout(() => {
            rewardCard.style.transform = 'scale(1)';
        }, 300);
        
        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏—è
        setTimeout(() => {
            if (celebration.parentNode) {
                celebration.parentNode.removeChild(celebration);
            }
        }, 2000);
        
        this.showNotification(window.t('reward_received', window.lang) + ' üèÜ', 'success');
    }

    /**
     * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.textContent = message;
        
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 10000;
            transition: all 0.3s ease;
            transform: translateX(100%);
        `;
        
        // –°—Ç–∏–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if (type === 'success') {
            notification.style.background = 'linear-gradient(135deg, #10b981, #059669)';
        } else if (type === 'error') {
            notification.style.background = 'linear-gradient(135deg, #ef4444, #dc2626)';
        } else {
            notification.style.background = 'linear-gradient(135deg, #3b82f6, #2563eb)';
        }
        
        document.body.appendChild(notification);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        requestAnimationFrame(() => {
            notification.style.transform = 'translateX(0)';
        });
        
        // –°–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 3000);
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—É —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
     */
    updateChart() {
        if (this.chart) {
            const data = this.getCompetencyData();
            this.chart.data.datasets[0].data = [
                data.empathy,
                data.clinical,
                data.communication,
                data.efficiency,
                data.decision
            ];
            this.chart.update('active');
        }
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–µ—á–∞—Ç–∏
     */
    setupPrintEffects() {
        window.addEventListener('beforeprint', () => {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –ø–µ—á–∞—Ç—å—é
            document.body.style.animation = 'none';
            const animatedElements = document.querySelectorAll('*');
            animatedElements.forEach(el => {
                el.style.animation = 'none';
                el.style.transition = 'none';
            });
        });
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã (–¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤)
     */
    destroy() {
        if (this.animationObserver) {
            this.animationObserver.disconnect();
        }
        
        if (this.chart) {
            this.chart.destroy();
        }
        
        // –£–¥–∞–ª—è–µ–º —á–∞—Å—Ç–∏—Ü—ã
        this.particles.forEach(particle => {
            if (particle.parentNode) {
                particle.parentNode.removeChild(particle);
            }
        });
        
        console.log('üßπ Enhanced Virtual Patient Results destroyed');
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
     */
    showTooltip(element) {
        const tooltipText = element.getAttribute('data-tooltip');
        if (!tooltipText) return;

        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        if (!this.tooltip) {
            this.tooltip = document.createElement('div');
            this.tooltip.className = 'tooltip-content';
            document.body.appendChild(this.tooltip);
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –ø–æ–∑–∏—Ü–∏—é
        this.tooltip.textContent = tooltipText;
        this.tooltip.style.display = 'block';

        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        const rect = element.getBoundingClientRect();
        const tooltipRect = this.tooltip.getBoundingClientRect();

        this.tooltip.style.left = `${rect.left + (rect.width / 2) - (tooltipRect.width / 2)}px`;
        this.tooltip.style.top = `${rect.bottom + 10}px`;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        this.tooltip.classList.add('tooltip-visible');
    }

    /**
     * –°–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
     */
    hideTooltip() {
        if (this.tooltip) {
            this.tooltip.classList.remove('tooltip-visible');
            setTimeout(() => {
                if (this.tooltip) {
                    this.tooltip.style.display = 'none';
                }
            }, 200);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
const enhancedVpResults = new EnhancedVirtualPatientResults();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
window.EnhancedVirtualPatientResults = EnhancedVirtualPatientResults;
window.vpResults = enhancedVpResults;

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', (e) => {
    console.error('üö® Global error in Virtual Patient Results:', e.error);
});

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
if ('requestIdleCallback' in window) {
    requestIdleCallback(() => {
        // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫–æ–≥–¥–∞ –±—Ä–∞—É–∑–µ—Ä —Å–≤–æ–±–æ–¥–µ–Ω
        enhancedVpResults.setupPrintEffects();
    });
}