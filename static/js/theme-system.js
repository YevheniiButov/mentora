/* ===== –§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø THEME-SYSTEM.JS ===== */
/* static/js/theme-system.js */

(function() {
    'use strict';
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    if (window.ThemeSystemInitialized) {
        console.log('‚ÑπÔ∏è Theme system already initialized');
        return;
    }
    
    class RobustThemeSystem {
        constructor() {
            this.storageKey = 'theme';
            this.currentTheme = null;
            this.isInitialized = false;
            this.isTransitioning = false;
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            this.initialize();
        }
        
        initialize() {
            try {
                console.log('üé® Initializing theme system...');
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–µ–º—É
                this.currentTheme = this.detectTheme();
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
                this.applyTheme(this.currentTheme, false);
                
                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
                this.setupGlobalFunctions();
                
                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å —Å–∏—Å—Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
                this.setupSystemThemeWatcher();
                
                this.isInitialized = true;
                console.log('‚úÖ Theme system initialized successfully');
                
            } catch (error) {
                console.error('‚ùå Error initializing theme system:', error);
                this.fallbackInitialization();
            }
        }
        
        detectTheme() {
            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
            const savedTheme = localStorage.getItem(this.storageKey);
            if (savedTheme === 'light' || savedTheme === 'dark') {
                console.log('üíæ Using saved theme:', savedTheme);
                return savedTheme;
            }
            
            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π DOM –∞—Ç—Ä–∏–±—É—Ç
            const domTheme = document.documentElement.getAttribute('data-theme');
            if (domTheme === 'light' || domTheme === 'dark') {
                console.log('üåê Using DOM theme:', domTheme);
                return domTheme;
            }
            
            // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            try {
                if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
                    console.log('üåô Using system dark theme');
                    return 'dark';
                }
            } catch (e) {
                console.warn('‚ö†Ô∏è Could not detect system theme preference');
            }
            
            console.log('‚òÄÔ∏è Defaulting to light theme');
            return 'light';
        }
        
        applyTheme(theme, skipValidation = false) {
            if (!skipValidation && theme !== 'light' && theme !== 'dark') {
                console.warn(`‚ö†Ô∏è Invalid theme: ${theme}, defaulting to light`);
                theme = 'light';
            }
            
            console.log(`üé® Applying theme: ${theme}`);
            
            try {
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ document (–æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–±)
                document.documentElement.setAttribute('data-theme', theme);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º body –∫–ª–∞—Å—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ —Å—Ç–∏–ª—è–º–∏
                document.body.classList.remove('theme-light', 'theme-dark');
                document.body.classList.add(`theme-${theme}`);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É
                this.currentTheme = theme;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
                localStorage.setItem(this.storageKey, theme);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
                this.updateToggleButtons(theme);
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º—ã
                this.dispatchThemeEvent(theme);
                
                console.log(`‚úÖ Theme successfully applied: ${theme}`);
                return theme;
                
            } catch (error) {
                console.error('‚ùå Error applying theme:', error);
                return this.currentTheme;
            }
        }
        
        toggleTheme() {
            const currentTheme = this.getCurrentTheme();
            const newTheme = currentTheme === 'light' ? 'dark' : 'light';
            
            console.log(`üîÑ Toggling theme: ${currentTheme} ‚Üí ${newTheme}`);
            
            const result = this.applyTheme(newTheme);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.showThemeNotification(newTheme);
            
            return result;
        }
        
        getCurrentTheme() {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º DOM –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã
            const domTheme = document.documentElement.getAttribute('data-theme');
            if (domTheme === 'light' || domTheme === 'dark') {
                this.currentTheme = domTheme;
                return domTheme;
            }
            
            return this.currentTheme;
        }
        
        updateToggleButtons(theme) {
            try {
                // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫
                const selectors = [
                    '.theme-toggle',
                    '.theme-toggle-inline',
                    '[data-theme-toggle]',
                    '[onclick*="toggleTheme"]',
                    'button[class*="theme"]',
                    '.theme-btn',
                    '[aria-label*="—Ç–µ–º"]',
                    '[aria-label*="theme"]'
                ];
                
                const buttons = document.querySelectorAll(selectors.join(', '));
                console.log(`üîÑ Updating ${buttons.length} theme toggle buttons`);
                
                if (buttons.length === 0) {
                    console.warn('‚ö†Ô∏è No theme toggle buttons found');
                    return;
                }
                
                buttons.forEach((button, index) => {
                    try {
                        this.updateSingleButton(button, theme, index);
                    } catch (error) {
                        console.warn(`‚ö†Ô∏è Error updating button ${index}:`, error);
                    }
                });
                
            } catch (error) {
                console.error('‚ùå Error updating toggle buttons:', error);
            }
        }
        
        updateSingleButton(button, theme, index = 0) {
            const icon = button.querySelector('i, .icon, .theme-icon, [class*="icon"], .fas, .bi');
            const text = button.querySelector('.theme-text, span:not([class*="icon"]), .text');
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ç–µ–º—É (—á—Ç–æ –ø–æ–∫–∞–∂–µ—Ç –∫–Ω–æ–ø–∫–∞)
            const nextTheme = theme === 'dark' ? 'light' : 'dark';
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É
            if (icon) {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã, —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞—Å—Å—ã –∏–∫–æ–Ω–æ–∫
                const baseClasses = icon.className
                    .replace(/\b(fa-moon|fa-sun|bi-moon|bi-sun|moon|sun)\b/gi, '')
                    .replace(/\s+/g, ' ')
                    .trim();
                
                icon.className = baseClasses;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–∫–æ–Ω–∫—É
                if (nextTheme === 'light') {
                    if (baseClasses.includes('fa')) {
                        icon.classList.add('fa-sun');
                    } else {
                        icon.classList.add('bi-sun');
                    }
                } else {
                    if (baseClasses.includes('fa')) {
                        icon.classList.add('fa-moon');
                    } else {
                        icon.classList.add('bi-moon');
                    }
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            if (text) {
                const newText = nextTheme === 'light' ? '–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞' : '–¢–µ–º–Ω–∞—è —Ç–µ–º–∞';
                text.textContent = newText;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º ARIA –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            const ariaLabel = `–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ ${nextTheme === 'light' ? '—Å–≤–µ—Ç–ª—É—é' : '—Ç–µ–º–Ω—É—é'} —Ç–µ–º—É`;
            button.setAttribute('aria-label', ariaLabel);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º aria-pressed –¥–ª—è –∫–Ω–æ–ø–æ–∫
            if (button.tagName === 'BUTTON' || button.getAttribute('role') === 'button') {
                button.setAttribute('aria-pressed', theme === 'dark' ? 'true' : 'false');
            }
            
            console.log(`‚úÖ Updated button ${index}: ${theme} theme, next: ${nextTheme}`);
        }
        
        setupEventDelegation() {
            console.log('üîó Setting up event delegation for theme toggles');
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —á–µ—Ä–µ–∑ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            document.addEventListener('click', (e) => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–ª–∏–∫–Ω—É–ª–∏ –ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
                const themeButton = e.target.closest([
                    '.theme-toggle',
                    '.theme-toggle-inline',
                    '[data-theme-toggle]',
                    '[onclick*="toggleTheme"]',
                    'button[class*="theme"]',
                    '.theme-btn'
                ].join(', '));
                
                if (themeButton) {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    console.log('üñ±Ô∏è Theme toggle button clicked:', themeButton.className || themeButton.tagName);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
                    this.addClickEffect(themeButton);
                    
                    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–º—É
                    this.toggleTheme();
                }
            }, true); // –ò—Å–ø–æ–ª—å–∑—É–µ–º capturing phase –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            
            // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
            document.addEventListener('keydown', (e) => {
                if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key.toLowerCase() === 't') {
                    e.preventDefault();
                    console.log('‚å®Ô∏è Theme toggle via keyboard shortcut');
                    this.toggleTheme();
                }
            });
        }
        
        setupGlobalFunctions() {
            console.log('üåê Setting up global functions');
            
            // –û—Å–Ω–æ–≤–Ω–∞—è –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            window.toggleTheme = () => {
                console.log('üåê Global toggleTheme() called');
                return this.toggleTheme();
            };
            
            // –û–±—ä–µ–∫—Ç themeSystem –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Å–∫—Ä–∏–ø—Ç–∞–º–∏
            window.themeSystem = {
                getCurrentTheme: () => this.getCurrentTheme(),
                setTheme: (theme) => this.applyTheme(theme),
                toggleTheme: () => this.toggleTheme(),
                isInitialized: true,
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                isDark: () => this.getCurrentTheme() === 'dark',
                isLight: () => this.getCurrentTheme() === 'light',
                
                // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                getDebugInfo: () => ({
                    currentTheme: this.getCurrentTheme(),
                    isInitialized: this.isInitialized,
                    savedTheme: localStorage.getItem(this.storageKey),
                    buttonsCount: document.querySelectorAll('.theme-toggle, .theme-toggle-inline, [data-theme-toggle]').length
                })
            };
            
            // –ö–ª–∞—Å—Å –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
            window.ThemeSystem = RobustThemeSystem;
            
            console.log('‚úÖ Global functions ready');
        }
        
        setupSystemThemeWatcher() {
            try {
                if (window.matchMedia) {
                    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
                    
                    const handleSystemChange = (e) => {
                        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —Ç–µ–º—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±–∏—Ä–∞–ª –≤—Ä—É—á–Ω—É—é
                        const hasManualChoice = localStorage.getItem(this.storageKey);
                        if (!hasManualChoice) {
                            const systemTheme = e.matches ? 'dark' : 'light';
                            console.log(`üîÑ Auto-switching to system theme: ${systemTheme}`);
                            this.applyTheme(systemTheme);
                        }
                    };
                    
                    if (mediaQuery.addEventListener) {
                        mediaQuery.addEventListener('change', handleSystemChange);
                    } else {
                        mediaQuery.addListener(handleSystemChange);
                    }
                    
                    console.log('üëÅÔ∏è System theme watcher enabled');
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è Could not setup system theme watcher:', error);
            }
        }
        
        addClickEffect(button) {
            try {
                button.style.transform = 'scale(0.95)';
                button.style.transition = 'transform 0.1s ease';
                
                setTimeout(() => {
                    button.style.transform = '';
                    setTimeout(() => {
                        button.style.transition = '';
                    }, 100);
                }, 150);
            } catch (error) {
                console.warn('‚ö†Ô∏è Could not add click effect:', error);
            }
        }
        
        dispatchThemeEvent(theme) {
            try {
                const event = new CustomEvent('themeChanged', {
                    detail: { 
                        theme: theme,
                        timestamp: Date.now(),
                        source: 'RobustThemeSystem'
                    },
                    bubbles: true
                });
                document.dispatchEvent(event);
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                ['themeChange', 'theme-changed', 'themeUpdated'].forEach(eventName => {
                    const compatEvent = new CustomEvent(eventName, {
                        detail: { theme },
                        bubbles: true
                    });
                    document.dispatchEvent(compatEvent);
                });
                
            } catch (error) {
                console.warn('‚ö†Ô∏è Could not dispatch theme event:', error);
            }
        }
        
        showThemeNotification(theme) {
            const message = theme === 'dark' ? 'üåô –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ –≤–∫–ª—é—á–µ–Ω–∞' : '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞ –≤–∫–ª—é—á–µ–Ω–∞';
            
            try {
                // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                if (window.showFlashMessage) {
                    window.showFlashMessage('info', message, 2000);
                } else if (window.navigationSystem && window.navigationSystem.showNotification) {
                    window.navigationSystem.showNotification(message, 'info', 2000);
                } else {
                    console.log(`üì¢ ${message}`);
                }
            } catch (error) {
                console.log(`üì¢ ${message}`);
            }
        }
        
        fallbackInitialization() {
            console.log('üÜò Attempting fallback initialization');
            
            try {
                // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
                const theme = localStorage.getItem(this.storageKey) || 'light';
                document.documentElement.setAttribute('data-theme', theme);
                
                window.toggleTheme = () => {
                    const current = document.documentElement.getAttribute('data-theme') || 'light';
                    const newTheme = current === 'light' ? 'dark' : 'light';
                    document.documentElement.setAttribute('data-theme', newTheme);
                    localStorage.setItem(this.storageKey, newTheme);
                    console.log(`üîÑ Fallback toggle: ${current} ‚Üí ${newTheme}`);
                    return newTheme;
                };
                
                console.log('‚úÖ Fallback initialization successful');
            } catch (error) {
                console.error('‚ùå Fallback initialization failed:', error);
            }
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
    function initializeThemeSystem() {
        try {
            if (!window.themeSystemInstance) {
                window.themeSystemInstance = new RobustThemeSystem();
                window.ThemeSystemInitialized = true;
                console.log('üéâ Theme system fully initialized and ready!');
            }
        } catch (error) {
            console.error('‚ùå Critical error in theme system initialization:', error);
            // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –±–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            window.toggleTheme = () => {
                const current = document.documentElement.getAttribute('data-theme') || 'light';
                const newTheme = current === 'light' ? 'dark' : 'light';
                document.documentElement.setAttribute('data-theme', newTheme);
                localStorage.setItem('theme', newTheme);
                return newTheme;
            };
        }
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏ –≤—Ö–æ–¥–∞
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeThemeSystem);
    } else {
        initializeThemeSystem();
    }
    
    // –†–µ–∑–µ—Ä–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    window.addEventListener('load', () => {
        if (!window.ThemeSystemInitialized) {
            console.log('üîÑ Backup theme system initialization');
            initializeThemeSystem();
        }
    });
    
    console.log('üé® Theme system script loaded successfully');
    
})();

// –°—Ç–∏–ª–∏ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º
if (!document.getElementById('theme-system-styles')) {
    const style = document.createElement('style');
    style.id = 'theme-system-styles';
    style.textContent = `
        /* –ü–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–µ–º—ã */
        :root {
            --theme-transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;
        }
        
        * {
            transition: var(--theme-transition);
        }
        
        /* –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */
        .interactive-card,
        .card:hover,
        .module-card:hover,
        .subject-card:hover,
        [class*="hover"]:hover {
            transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1),
                        box-shadow 0.3s cubic-bezier(0.4, 0, 0.2, 1),
                        var(--theme-transition) !important;
        }
        
        /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã */
        .theme-toggle,
        .theme-toggle-inline,
        [data-theme-toggle] {
            transition: all 0.2s ease !important;
        }
        
        .theme-toggle:hover,
        .theme-toggle-inline:hover,
        [data-theme-toggle]:hover {
            transform: scale(1.05);
        }
        
        /* –§–æ–∫—É—Å –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ */
        .theme-toggle:focus-visible,
        .theme-toggle-inline:focus-visible,
        [data-theme-toggle]:focus-visible {
            outline: 2px solid var(--primary-500, #3ECDC1);
            outline-offset: 2px;
        }
        
        /* –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π –¥–ª—è –ª—é–¥–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ */
        @media (prefers-reduced-motion: reduce) {
            * {
                transition: none !important;
                animation: none !important;
            }
        }
    `;
    document.head.appendChild(style);
}
