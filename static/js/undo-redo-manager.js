/**
 * Undo/Redo Manager –¥–ª—è Visual Builder
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–º–µ–Ω—ã –∏ –ø–æ–≤—Ç–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
 */

class UndoRedoManager {
    constructor(visualBuilder) {
        this.visualBuilder = visualBuilder;
        this.history = [];
        this.currentIndex = -1;
        this.maxHistory = 50;
        this.isUndoRedoAction = false;
        this.batchOperations = [];
        this.batchTimeout = null;
        this.batchDelay = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
        
        // –¢–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π
        this.operationTypes = {
            ELEMENT_CREATE: 'element_create',
            ELEMENT_DELETE: 'element_delete',
            ELEMENT_MOVE: 'element_move',
            ELEMENT_DUPLICATE: 'element_duplicate',
            ELEMENT_EDIT: 'element_edit',
            ELEMENT_STYLE: 'element_style',
            ELEMENT_RESIZE: 'element_resize',
            ELEMENT_VISIBILITY: 'element_visibility',
            ELEMENT_ORDER: 'element_order',
            CONTENT_CHANGE: 'content_change',
            STYLE_CHANGE: 'style_change',
            LAYOUT_CHANGE: 'layout_change',
            BATCH_OPERATION: 'batch_operation',
            CANVAS_CLEAR: 'canvas_clear',
            CANVAS_LOAD: 'canvas_load'
        };
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        this.config = {
            autoSave: true,
            saveOnContentChange: true,
            saveOnStyleChange: true,
            saveOnLayoutChange: true,
            maxHistorySize: 50,
            batchTimeout: 1000,
            compressHistory: true,
            detailedLogging: false
        };
        
        this.init();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    init() {
        this.setupEventListeners();
        this.createInitialState();
        console.info('üîÑ Undo/Redo Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ contenteditable —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
        document.addEventListener('input', this.handleContentChange.bind(this), true);
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π
        const observer = new MutationObserver(this.handleDOMChanges.bind(this));
        observer.observe(this.visualBuilder.dom.canvas, {
            childList: true,
            subtree: true,
            attributes: true,
            attributeFilter: ['style', 'class', 'data-*']
        });
        
        // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        document.addEventListener('keydown', this.handleKeyboardShortcuts.bind(this));
        
        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
        document.addEventListener('blur', this.handleBlur.bind(this), true);
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    createInitialState() {
        const initialState = this.captureState('initial_state');
        this.saveState(initialState);
    }
    
    /**
     * –ó–∞—Ö–≤–∞—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    captureState(operationType, details = {}) {
        const canvas = this.visualBuilder.dom.canvas;
        const elements = Array.from(canvas.querySelectorAll('.draggable-element')).map(element => {
            return {
                id: element.dataset.id,
                type: element.dataset.type,
                content: element.innerHTML,
                styles: this.getElementStyles(element),
                position: this.getElementPosition(element),
                classes: element.className,
                attributes: this.getElementAttributes(element)
            };
        });
        
        return {
            timestamp: Date.now(),
            operationType,
            details,
            elements,
            canvasStyles: this.getElementStyles(canvas),
            selectedElement: this.visualBuilder.state.selectedElement?.dataset.id || null,
            zoom: this.visualBuilder.state.zoom,
            gridSnap: this.visualBuilder.state.gridSnap
        };
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    getElementStyles(element) {
        const computedStyles = window.getComputedStyle(element);
        const importantStyles = [
            'position', 'top', 'left', 'width', 'height',
            'margin', 'padding', 'border', 'background',
            'color', 'font-size', 'font-weight', 'text-align',
            'display', 'flex-direction', 'justify-content', 'align-items',
            'opacity', 'transform', 'z-index'
        ];
        
        const styles = {};
        importantStyles.forEach(property => {
            const value = computedStyles.getPropertyValue(property);
            if (value && value !== 'normal' && value !== 'none') {
                styles[property] = value;
            }
        });
        
        return styles;
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    getElementPosition(element) {
        const rect = element.getBoundingClientRect();
        const canvasRect = this.visualBuilder.dom.canvas.getBoundingClientRect();
        
        return {
            x: rect.left - canvasRect.left,
            y: rect.top - canvasRect.top,
            width: rect.width,
            height: rect.height
        };
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    getElementAttributes(element) {
        const attributes = {};
        for (let attr of element.attributes) {
            if (attr.name.startsWith('data-') || attr.name === 'class') {
                attributes[attr.name] = attr.value;
            }
        }
        return attributes;
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    saveState(state) {
        if (this.isUndoRedoAction) return;
        
        // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –ø—Ä–∏ –Ω–æ–≤–æ–º –¥–µ–π—Å—Ç–≤–∏–∏
        if (this.currentIndex < this.history.length - 1) {
            this.history = this.history.slice(0, this.currentIndex + 1);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.history.push(state);
        this.currentIndex++;
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if (this.history.length > this.config.maxHistorySize) {
            this.history.shift();
            this.currentIndex--;
        }
        
        // –°–∂–∏–º–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if (this.config.compressHistory) {
            this.compressHistory();
        }
        
        this.updateUI();
        this.logState('–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ', state);
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π (–¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π)
     */
    saveStateDelayed(operationType, details = {}) {
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
        if (this.batchTimeout) {
            clearTimeout(this.batchTimeout);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –ø–∞–∫–µ—Ç
        this.batchOperations.push({ operationType, details });
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
        this.batchTimeout = setTimeout(() => {
            if (this.batchOperations.length > 0) {
                const state = this.captureState('batch_operation', {
                    operations: this.batchOperations
                });
                this.saveState(state);
                this.batchOperations = [];
            }
        }, this.config.batchTimeout);
    }
    
    /**
     * –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
     */
    undo() {
        if (this.canUndo()) {
            this.isUndoRedoAction = true;
            
            this.currentIndex--;
            const previousState = this.history[this.currentIndex];
            this.restoreState(previousState);
            
            this.isUndoRedoAction = false;
            this.updateUI();
            
            this.visualBuilder.showNotification('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', 'info');
            this.logState('–û—Ç–º–µ–Ω–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ', previousState);
        }
    }
    
    /**
     * –ü–æ–≤—Ç–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
     */
    redo() {
        if (this.canRedo()) {
            this.isUndoRedoAction = true;
            
            this.currentIndex++;
            const nextState = this.history[this.currentIndex];
            this.restoreState(nextState);
            
            this.isUndoRedoAction = false;
            this.updateUI();
            
            this.visualBuilder.showNotification('–î–µ–π—Å—Ç–≤–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–æ', 'info');
            this.logState('–ü–æ–≤—Ç–æ—Ä–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ', nextState);
        }
    }
    
    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    restoreState(state) {
        const canvas = this.visualBuilder.dom.canvas;
        
        // –û—á–∏—â–∞–µ–º canvas
        canvas.innerHTML = '';
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        state.elements.forEach(elementData => {
            const element = this.createElementFromState(elementData);
            if (element) {
                canvas.appendChild(element);
            }
        });
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ canvas
        this.applyStyles(canvas, state.canvasStyles);
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        if (state.selectedElement) {
            const selectedElement = canvas.querySelector(`[data-id="${state.selectedElement}"]`);
            if (selectedElement) {
                this.visualBuilder.selectElement(selectedElement);
            }
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.visualBuilder.state.zoom = state.zoom;
        this.visualBuilder.state.gridSnap = state.gridSnap;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.visualBuilder.updateLayersPanel();
        this.visualBuilder.updatePropertiesPanel();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        this.visualBuilder.setupExistingElements();
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    createElementFromState(elementData) {
        const element = document.createElement('div');
        element.className = `draggable-element element-${elementData.type}`;
        element.dataset.id = elementData.id;
        element.dataset.type = elementData.type;
        element.innerHTML = elementData.content;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
        this.applyStyles(element, elementData.styles);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å—ã
        if (elementData.classes) {
            element.className = elementData.classes;
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
        Object.entries(elementData.attributes).forEach(([name, value]) => {
            element.setAttribute(name, value);
        });
        
        return element;
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –∫ —ç–ª–µ–º–µ–Ω—Ç—É
     */
    applyStyles(element, styles) {
        Object.entries(styles).forEach(([property, value]) => {
            element.style.setProperty(property, value);
        });
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω—ã
     */
    canUndo() {
        return this.currentIndex > 0;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–∞
     */
    canRedo() {
        return this.currentIndex < this.history.length - 1;
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
     */
    updateUI() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ undo/redo
        const undoBtn = this.visualBuilder.dom.undoBtn;
        const redoBtn = this.visualBuilder.dom.redoBtn;
        
        if (undoBtn) {
            undoBtn.disabled = !this.canUndo();
        }
        
        if (redoBtn) {
            redoBtn.disabled = !this.canRedo();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        this.updateHistoryIndicator();
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
     */
    updateHistoryIndicator() {
        const indicator = document.getElementById('historyIndicator');
        if (indicator) {
            const canUndo = this.canUndo();
            const canRedo = this.canRedo();
            
            indicator.innerHTML = `
                <div class="history-info">
                    <span class="history-count">${this.currentIndex + 1}/${this.history.length}</span>
                    <span class="history-status">
                        ${canUndo ? 'üîÑ' : '‚èπÔ∏è'} ${canRedo ? 'üîÑ' : '‚èπÔ∏è'}
                    </span>
                </div>
            `;
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞
     */
    handleContentChange(event) {
        if (this.isUndoRedoAction) return;
        
        const target = event.target;
        if (target.closest('.draggable-element') && target.hasAttribute('contenteditable')) {
            this.saveStateDelayed(this.operationTypes.CONTENT_CHANGE, {
                elementId: target.closest('.draggable-element').dataset.id,
                property: 'content',
                value: target.innerHTML
            });
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π DOM
     */
    handleDOMChanges(mutations) {
        if (this.isUndoRedoAction) return;
        
        mutations.forEach(mutation => {
            if (mutation.type === 'childList') {
                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                mutation.addedNodes.forEach(node => {
                    if (node.nodeType === Node.ELEMENT_NODE && node.classList.contains('draggable-element')) {
                        this.saveStateDelayed(this.operationTypes.ELEMENT_CREATE, {
                            elementId: node.dataset.id,
                            elementType: node.dataset.type
                        });
                    }
                });
                
                mutation.removedNodes.forEach(node => {
                    if (node.nodeType === Node.ELEMENT_NODE && node.classList.contains('draggable-element')) {
                        this.saveStateDelayed(this.operationTypes.ELEMENT_DELETE, {
                            elementId: node.dataset.id,
                            elementType: node.dataset.type
                        });
                    }
                });
            } else if (mutation.type === 'attributes') {
                // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
                const element = mutation.target;
                if (element.classList.contains('draggable-element')) {
                    if (mutation.attributeName === 'style') {
                        this.saveStateDelayed(this.operationTypes.ELEMENT_STYLE, {
                            elementId: element.dataset.id,
                            property: 'style',
                            value: element.getAttribute('style')
                        });
                    } else if (mutation.attributeName === 'class') {
                        this.saveStateDelayed(this.operationTypes.ELEMENT_STYLE, {
                            elementId: element.dataset.id,
                            property: 'class',
                            value: element.getAttribute('class')
                        });
                    }
                }
            }
        });
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
     */
    handleKeyboardShortcuts(event) {
        if (event.ctrlKey || event.metaKey) {
            switch (event.key.toLowerCase()) {
                case 'z':
                    event.preventDefault();
                    if (event.shiftKey) {
                        this.redo();
                    } else {
                        this.undo();
                    }
                    break;
                case 'y':
                    event.preventDefault();
                    this.redo();
                    break;
            }
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞
     */
    handleBlur(event) {
        if (this.config.autoSave && !this.isUndoRedoAction) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
            setTimeout(() => {
                if (!this.batchTimeout) {
                    const state = this.captureState('blur_save');
                    this.saveState(state);
                }
            }, 100);
        }
    }
    
    /**
     * –°–∂–∞—Ç–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
     */
    compressHistory() {
        if (this.history.length < this.config.maxHistorySize * 0.8) return;
        
        const compressedHistory = [];
        let i = 0;
        
        while (i < this.history.length) {
            const current = this.history[i];
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if (this.isMinorChange(current)) {
                i++;
                continue;
            }
            
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Ö–æ–∂–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            let similarCount = 1;
            while (i + similarCount < this.history.length && 
                   this.areSimilarOperations(current, this.history[i + similarCount])) {
                similarCount++;
            }
            
            if (similarCount > 1) {
                // –°–æ–∑–¥–∞–µ–º —Å–∂–∞—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                const compressedState = this.compressSimilarStates(
                    this.history.slice(i, i + similarCount)
                );
                compressedHistory.push(compressedState);
                i += similarCount;
            } else {
                compressedHistory.push(current);
                i++;
            }
        }
        
        this.history = compressedHistory;
        this.currentIndex = Math.min(this.currentIndex, this.history.length - 1);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
     */
    isMinorChange(state) {
        return state.operationType === 'content_change' && 
               state.details.value && 
               state.details.value.length < 10;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Ö–æ–∂–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    areSimilarOperations(state1, state2) {
        return state1.operationType === state2.operationType &&
               state1.details.elementId === state2.details.elementId &&
               Math.abs(state1.timestamp - state2.timestamp) < 5000; // 5 —Å–µ–∫—É–Ω–¥
    }
    
    /**
     * –°–∂–∞—Ç–∏–µ –ø–æ—Ö–æ–∂–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
     */
    compressSimilarStates(states) {
        // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã
        return states[states.length - 1];
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
     */
    clearHistory() {
        this.history = [];
        this.currentIndex = -1;
        this.batchOperations = [];
        this.updateUI();
        this.visualBuilder.showNotification('–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞', 'info');
    }
    
    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏
     */
    exportHistory() {
        const historyData = {
            timestamp: Date.now(),
            version: '1.0',
            history: this.history,
            currentIndex: this.currentIndex,
            config: this.config
        };
        
        const dataStr = JSON.stringify(historyData, null, 2);
        const dataBlob = new Blob([dataStr], { type: 'application/json' });
        const url = URL.createObjectURL(dataBlob);
        
        const link = document.createElement('a');
        link.href = url;
        link.download = `visual-builder-history-${Date.now()}.json`;
        link.click();
        
        URL.revokeObjectURL(url);
        this.visualBuilder.showNotification('–ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞', 'success');
    }
    
    /**
     * –ò–º–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏
     */
    importHistory(file) {
        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const historyData = JSON.parse(e.target.result);
                
                if (historyData.version && historyData.history) {
                    this.history = historyData.history;
                    this.currentIndex = historyData.currentIndex || 0;
                    
                    if (historyData.config) {
                        Object.assign(this.config, historyData.config);
                    }
                    
                    this.updateUI();
                    this.visualBuilder.showNotification('–ò—Å—Ç–æ—Ä–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞', 'success');
                } else {
                    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏:', error);
                this.visualBuilder.showNotification('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏', 'error');
            }
        };
        reader.readAsText(file);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
     */
    getHistoryStats() {
        const stats = {
            totalStates: this.history.length,
            currentIndex: this.currentIndex,
            canUndo: this.canUndo(),
            canRedo: this.canRedo(),
            operationTypes: {},
            memoryUsage: this.estimateMemoryUsage()
        };
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π
        this.history.forEach(state => {
            const type = state.operationType;
            stats.operationTypes[type] = (stats.operationTypes[type] || 0) + 1;
        });
        
        return stats;
    }
    
    /**
     * –û—Ü–µ–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
     */
    estimateMemoryUsage() {
        const historyString = JSON.stringify(this.history);
        return historyString.length * 2; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤ –±–∞–π—Ç–∞—Ö
    }
    
    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
     */
    logState(message, state) {
        if (this.config.detailedLogging) {
            console.log(`üîÑ ${message}:`, {
                operationType: state.operationType,
                timestamp: new Date(state.timestamp).toLocaleTimeString(),
                elementsCount: state.elements.length,
                details: state.details
            });
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    getConfig() {
        return { ...this.config };
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    updateConfig(newConfig) {
        Object.assign(this.config, newConfig);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (this.config.maxHistorySize < this.history.length) {
            this.history = this.history.slice(-this.config.maxHistorySize);
            this.currentIndex = Math.min(this.currentIndex, this.history.length - 1);
        }
        
        this.updateUI();
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
     */
    createHistoryIndicator() {
        const indicator = document.createElement('div');
        indicator.id = 'historyIndicator';
        indicator.className = 'history-indicator';
        indicator.innerHTML = `
            <div class="history-info">
                <span class="history-count">1/1</span>
                <span class="history-status">‚èπÔ∏è ‚èπÔ∏è</span>
            </div>
        `;
        
        return indicator;
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å –∏—Å—Ç–æ—Ä–∏–∏
     */
    showHistoryPanel() {
        const stats = this.getHistoryStats();
        const historyHTML = this.generateHistoryHTML();
        
        const modal = document.createElement('div');
        modal.className = 'history-panel-modal';
        modal.innerHTML = `
            <div class="history-panel-content">
                <div class="history-panel-header">
                    <h3 class="history-panel-title">
                        <i class="bi bi-clock-history"></i>
                        –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
                    </h3>
                    <button class="history-panel-close" onclick="this.closest('.history-panel-modal').remove()">
                        <i class="bi bi-x-lg"></i>
                    </button>
                </div>
                <div class="history-panel-body">
                    <div class="history-stats">
                        <div class="stat-item">
                            <span class="stat-label">–í—Å–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π:</span>
                            <span class="stat-value">${stats.totalStates}</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è:</span>
                            <span class="stat-value">${stats.currentIndex + 1}</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-label">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:</span>
                            <span class="stat-value">${(stats.memoryUsage / 1024).toFixed(1)} KB</span>
                        </div>
                    </div>
                    <div class="history-list">
                        ${historyHTML}
                    </div>
                </div>
                <div class="history-panel-footer">
                    <button class="btn btn-secondary" onclick="undoRedoManager.clearHistory()">
                        <i class="bi bi-trash"></i>
                        –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
                    </button>
                    <button class="btn btn-info" onclick="undoRedoManager.exportHistory()">
                        <i class="bi bi-download"></i>
                        –≠–∫—Å–ø–æ—Ä—Ç
                    </button>
                    <button class="btn btn-primary" onclick="this.closest('.history-panel-modal').remove()">
                        –ó–∞–∫—Ä—ã—Ç—å
                    </button>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        requestAnimationFrame(() => {
            modal.style.display = 'block';
        });
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
     */
    generateHistoryHTML() {
        if (this.history.length === 0) {
            return `
                <div class="history-empty">
                    <i class="bi bi-clock-history"></i>
                    <p>–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</p>
                </div>
            `;
        }
        
        return this.history.map((state, index) => {
            const isCurrent = index === this.currentIndex;
            const operationName = this.getOperationName(state.operationType);
            const time = new Date(state.timestamp).toLocaleTimeString();
            
            return `
                <div class="history-item ${isCurrent ? 'current' : ''}" 
                     onclick="undoRedoManager.goToState(${index})">
                    <div class="history-item-icon">
                        <i class="bi ${this.getOperationIcon(state.operationType)}"></i>
                    </div>
                    <div class="history-item-info">
                        <div class="history-item-title">${operationName}</div>
                        <div class="history-item-time">${time}</div>
                    </div>
                    <div class="history-item-status">
                        ${isCurrent ? 'üìç' : ''}
                    </div>
                </div>
            `;
        }).join('');
    }
    
    /**
     * –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
     */
    goToState(index) {
        if (index >= 0 && index < this.history.length) {
            this.isUndoRedoAction = true;
            this.currentIndex = index;
            const state = this.history[index];
            this.restoreState(state);
            this.isUndoRedoAction = false;
            this.updateUI();
            
            this.visualBuilder.showNotification(`–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é ${index + 1}`, 'info');
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    getOperationName(operationType) {
        const names = {
            'element_create': '–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞',
            'element_delete': '–£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞',
            'element_move': '–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞',
            'element_duplicate': '–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞',
            'element_edit': '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞',
            'element_style': '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π',
            'element_resize': '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞',
            'element_visibility': '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏',
            'element_order': '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞',
            'content_change': '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
            'style_change': '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π',
            'layout_change': '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–∞–∫–µ—Ç–∞',
            'batch_operation': '–ì—Ä—É–ø–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–π',
            'canvas_clear': '–û—á–∏—Å—Ç–∫–∞ —Ö–æ–ª—Å—Ç–∞',
            'canvas_load': '–ó–∞–≥—Ä—É–∑–∫–∞ —Ö–æ–ª—Å—Ç–∞',
            'initial_state': '–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
            'blur_save': '–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ'
        };
        
        return names[operationType] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è';
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    getOperationIcon(operationType) {
        const icons = {
            'element_create': 'bi-plus-circle',
            'element_delete': 'bi-trash',
            'element_move': 'bi-arrows-move',
            'element_duplicate': 'bi-files',
            'element_edit': 'bi-pencil',
            'element_style': 'bi-palette',
            'element_resize': 'bi-arrows-angle-expand',
            'element_visibility': 'bi-eye',
            'element_order': 'bi-list-ol',
            'content_change': 'bi-text-paragraph',
            'style_change': 'bi-palette2',
            'layout_change': 'bi-grid-3x3',
            'batch_operation': 'bi-collection',
            'canvas_clear': 'bi-trash3',
            'canvas_load': 'bi-folder2-open',
            'initial_state': 'bi-house',
            'blur_save': 'bi-save'
        };
        
        return icons[operationType] || 'bi-question-circle';
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = UndoRedoManager;
} 