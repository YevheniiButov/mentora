/**
 * Drag & Drop Editor –¥–ª—è Visual Builder
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
 */

class DragDropEditor {
    constructor(visualBuilder) {
        this.visualBuilder = visualBuilder;
        this.isDragging = false;
        this.dragElement = null;
        this.dropZones = [];
        this.selectedElements = [];
        this.dragOffset = { x: 0, y: 0 };
        this.snapToGrid = true;
        this.gridSize = 20;
        this.multiSelectMode = false;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ drag & drop
        this.state = {
            isDragging: false,
            dragType: null, // 'component', 'element', 'multi'
            dragData: null,
            dropTarget: null,
            dragPreview: null,
            snapLines: { horizontal: [], vertical: [] }
        };
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        this.config = {
            snapThreshold: 10,
            dropZoneHighlight: true,
            dragPreview: true,
            snapToGrid: true,
            snapToElements: true,
            multiSelect: true,
            dragDelay: 200,
            dropAnimation: true
        };
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Drag & Drop Editor
     */
    init() {
        this.setupEventListeners();
        this.createDropZones();
        this.setupKeyboardShortcuts();
        
        console.info('üéØ Drag & Drop Editor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        document.addEventListener('mousedown', this.handleMouseDown.bind(this));
        document.addEventListener('mousemove', this.handleMouseMove.bind(this));
        document.addEventListener('mouseup', this.handleMouseUp.bind(this));
        
        // Drag & Drop —Å–æ–±—ã—Ç–∏—è
        document.addEventListener('dragstart', this.handleDragStart.bind(this));
        document.addEventListener('dragover', this.handleDragOver.bind(this));
        document.addEventListener('dragleave', this.handleDragLeave.bind(this));
        document.addEventListener('drop', this.handleDrop.bind(this));
        document.addEventListener('dragend', this.handleDragEnd.bind(this));
        
        // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        document.addEventListener('keydown', this.handleKeyDown.bind(this));
        document.addEventListener('keyup', this.handleKeyUp.bind(this));
        
        // –°–æ–±—ã—Ç–∏—è canvas
        const canvas = document.getElementById('canvas');
        if (canvas) {
            canvas.addEventListener('click', this.handleCanvasClick.bind(this));
            canvas.addEventListener('dblclick', this.handleCanvasDoubleClick.bind(this));
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∑–æ–Ω drop
     */
    createDropZones() {
        const canvas = document.getElementById('canvas');
        if (!canvas) return;

        // –û—Å–Ω–æ–≤–Ω–∞—è –∑–æ–Ω–∞ drop –Ω–∞ canvas
        this.addDropZone(canvas, {
            type: 'canvas',
            accept: ['component', 'element'],
            highlight: true,
            snapToGrid: true
        });

        // –ó–æ–Ω—ã drop –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        this.createContainerDropZones();
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∑–æ–Ω drop –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
     */
    createContainerDropZones() {
        const containers = document.querySelectorAll('.editable-container, .editable-section, .editable-grid');
        
        containers.forEach(container => {
            this.addDropZone(container, {
                type: 'container',
                accept: ['component', 'element'],
                highlight: true,
                snapToGrid: false,
                insertMode: 'append'
            });
        });
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–æ–Ω—ã drop
     */
    addDropZone(element, options = {}) {
        const dropZone = {
            element,
            type: options.type || 'general',
            accept: options.accept || ['component', 'element'],
            highlight: options.highlight !== false,
            snapToGrid: options.snapToGrid !== false,
            insertMode: options.insertMode || 'replace',
            active: false
        };

        this.dropZones.push(dropZone);
        
        // –î–æ–±–∞–≤–ª—è–µ–º CSS –∫–ª–∞—Å—Å—ã
        element.classList.add('drop-zone');
        element.setAttribute('data-drop-type', dropZone.type);
        
        return dropZone;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
     */
    handleDragStart(event) {
        const target = event.target;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        if (target.closest('.component-item')) {
            this.startComponentDrag(event, target);
        } else if (target.closest('.draggable-element')) {
            this.startElementDrag(event, target);
        } else if (target.closest('.selected-element')) {
            this.startMultiDrag(event);
        }
    }

    /**
     * –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    startComponentDrag(event, element) {
        const componentKey = element.dataset.componentKey;
        if (!componentKey) return;

        this.state.dragType = 'component';
        this.state.dragData = { componentKey };
        this.state.isDragging = true;
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        this.createDragPreview(event, element);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è transfer
        event.dataTransfer.setData('text/plain', JSON.stringify({
            type: 'component',
            componentKey: componentKey
        }));
        event.dataTransfer.effectAllowed = 'copy';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã
        element.classList.add('dragging');
        
        console.info(`üéØ –ù–∞—á–∞—Ç–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${componentKey}`);
    }

    /**
     * –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    startElementDrag(event, element) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç —á–∞—Å—Ç—å—é –≤—ã–¥–µ–ª–µ–Ω–∏—è
        if (this.selectedElements.length > 1 && this.selectedElements.includes(element)) {
            this.startMultiDrag(event);
            return;
        }

        this.state.dragType = 'element';
        this.state.dragData = { element };
        this.state.isDragging = true;
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        const rect = element.getBoundingClientRect();
        this.dragOffset = {
            x: event.clientX - rect.left,
            y: event.clientY - rect.top
        };
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é
        this.createDragPreview(event, element);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã
        element.classList.add('dragging');
        
        console.info('üéØ –ù–∞—á–∞—Ç–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞');
    }

    /**
     * –ù–∞—á–∞–ª–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
     */
    startMultiDrag(event) {
        if (this.selectedElements.length <= 1) return;

        this.state.dragType = 'multi';
        this.state.dragData = { elements: [...this.selectedElements] };
        this.state.isDragging = true;
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        this.createMultiDragPreview(event);
        
        console.info(`üéØ –ù–∞—á–∞—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ ${this.selectedElements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
     */
    createDragPreview(event, element) {
        if (!this.config.dragPreview) return;

        const preview = element.cloneNode(true);
        preview.classList.add('drag-preview');
        preview.style.position = 'fixed';
        preview.style.pointerEvents = 'none';
        preview.style.zIndex = '10000';
        preview.style.opacity = '0.8';
        preview.style.transform = 'rotate(5deg) scale(0.9)';
        
        document.body.appendChild(preview);
        this.state.dragPreview = preview;
        
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é
        this.updateDragPreviewPosition(event);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
     */
    createMultiDragPreview(event) {
        if (!this.config.dragPreview) return;

        const preview = document.createElement('div');
        preview.className = 'multi-drag-preview';
        preview.innerHTML = `
            <div class="multi-drag-count">${this.selectedElements.length}</div>
            <div class="multi-drag-label">—ç–ª–µ–º–µ–Ω—Ç–æ–≤</div>
        `;
        preview.style.position = 'fixed';
        preview.style.pointerEvents = 'none';
        preview.style.zIndex = '10000';
        
        document.body.appendChild(preview);
        this.state.dragPreview = preview;
        
        this.updateDragPreviewPosition(event);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–µ–≤—å—é
     */
    updateDragPreviewPosition(event) {
        if (!this.state.dragPreview) return;

        const preview = this.state.dragPreview;
        const offset = this.state.dragType === 'element' ? this.dragOffset : { x: 0, y: 0 };
        
        preview.style.left = `${event.clientX - offset.x}px`;
        preview.style.top = `${event.clientY - offset.y}px`;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
     */
    handleDragOver(event) {
        event.preventDefault();
        
        if (!this.state.isDragging) return;

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–µ–≤—å—é
        this.updateDragPreviewPosition(event);
        
        // –ù–∞—Ö–æ–¥–∏–º –∑–æ–Ω—É drop
        const dropZone = this.findDropZone(event.target);
        if (dropZone) {
            this.highlightDropZone(dropZone, true);
            this.state.dropTarget = dropZone;
        } else {
            this.clearDropZoneHighlights();
            this.state.dropTarget = null;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º snap lines
        if (this.config.snapToElements) {
            this.showSnapLines(event);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∑–æ–Ω—ã drop
     */
    handleDragLeave(event) {
        if (!this.state.isDragging) return;

        const dropZone = this.findDropZone(event.target);
        if (dropZone && !dropZone.element.contains(event.relatedTarget)) {
            this.highlightDropZone(dropZone, false);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ drop
     */
    handleDrop(event) {
        event.preventDefault();
        
        if (!this.state.isDragging) return;

        const dropZone = this.findDropZone(event.target);
        if (!dropZone) return;

        try {
            // –í—ã–ø–æ–ª–Ω—è–µ–º drop –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            switch (this.state.dragType) {
                case 'component':
                    this.handleComponentDrop(event, dropZone);
                    break;
                case 'element':
                    this.handleElementDrop(event, dropZone);
                    break;
                case 'multi':
                    this.handleMultiDrop(event, dropZone);
                    break;
            }
            
            console.info('‚úÖ Drop –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ drop:', error);
            this.visualBuilder?.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞', 'error');
        }
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.clearDragState();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ drop –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    handleComponentDrop(event, dropZone) {
        const componentKey = this.state.dragData.componentKey;
        if (!componentKey) return;

        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        const component = this.visualBuilder?.componentLibrary?.getComponent(componentKey);
        if (!component) return;

        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        const element = this.createComponentElement(component);
        
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç
        this.positionElementInDropZone(element, event, dropZone);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ drop zone
        this.insertElementInDropZone(element, dropZone);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º Visual Builder
        if (this.visualBuilder) {
            this.visualBuilder.addToHistory();
            this.visualBuilder.updateLayersPanel();
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ drop —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    handleElementDrop(event, dropZone) {
        const element = this.state.dragData.element;
        if (!element) return;

        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç
        this.positionElementInDropZone(element, event, dropZone);
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –Ω–æ–≤—É—é –∑–æ–Ω—É
        this.moveElementToDropZone(element, dropZone);
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º Visual Builder
        if (this.visualBuilder) {
            this.visualBuilder.addToHistory();
            this.visualBuilder.updateLayersPanel();
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ drop
     */
    handleMultiDrop(event, dropZone) {
        const elements = this.state.dragData.elements;
        if (!elements || elements.length === 0) return;

        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        elements.forEach(element => {
            this.positionElementInDropZone(element, event, dropZone);
            this.moveElementToDropZone(element, dropZone);
        });
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º Visual Builder
        if (this.visualBuilder) {
            this.visualBuilder.addToHistory();
            this.visualBuilder.updateLayersPanel();
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    createComponentElement(component) {
        const element = document.createElement('div');
        element.className = 'draggable-element';
        element.dataset.componentType = component.category;
        element.dataset.componentId = `component_${Date.now()}`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        element.innerHTML = component.template;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
        Object.assign(element.style, component.defaultStyles);
        
        return element;
    }

    /**
     * –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∑–æ–Ω–µ drop
     */
    positionElementInDropZone(element, event, dropZone) {
        const dropRect = dropZone.element.getBoundingClientRect();
        const canvasRect = document.getElementById('canvas')?.getBoundingClientRect();
        
        if (!canvasRect) return;

        // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ canvas
        let x = event.clientX - canvasRect.left;
        let y = event.clientY - canvasRect.top;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º snap to grid
        if (dropZone.snapToGrid && this.config.snapToGrid) {
            x = Math.round(x / this.gridSize) * this.gridSize;
            y = Math.round(y / this.gridSize) * this.gridSize;
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        element.style.position = 'absolute';
        element.style.left = `${x}px`;
        element.style.top = `${y}px`;
    }

    /**
     * –í—Å—Ç–∞–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∑–æ–Ω—É drop
     */
    insertElementInDropZone(element, dropZone) {
        switch (dropZone.insertMode) {
            case 'append':
                dropZone.element.appendChild(element);
                break;
            case 'prepend':
                dropZone.element.insertBefore(element, dropZone.element.firstChild);
                break;
            case 'replace':
                dropZone.element.innerHTML = '';
                dropZone.element.appendChild(element);
                break;
            default:
                dropZone.element.appendChild(element);
        }
    }

    /**
     * –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∑–æ–Ω—É drop
     */
    moveElementToDropZone(element, dropZone) {
        dropZone.element.appendChild(element);
    }

    /**
     * –ü–æ–∏—Å–∫ –∑–æ–Ω—ã drop
     */
    findDropZone(target) {
        const dropZoneElement = target.closest('.drop-zone');
        if (!dropZoneElement) return null;

        return this.dropZones.find(zone => zone.element === dropZoneElement);
    }

    /**
     * –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∑–æ–Ω—ã drop
     */
    highlightDropZone(dropZone, highlight) {
        if (!dropZone.highlight) return;

        dropZone.active = highlight;
        
        if (highlight) {
            dropZone.element.classList.add('drop-zone-active');
        } else {
            dropZone.element.classList.remove('drop-zone-active');
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∑–æ–Ω drop
     */
    clearDropZoneHighlights() {
        this.dropZones.forEach(zone => {
            this.highlightDropZone(zone, false);
        });
    }

    /**
     * –ü–æ–∫–∞–∑ snap lines
     */
    showSnapLines(event) {
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ snap lines
        this.clearSnapLines();
        
        const canvas = document.getElementById('canvas');
        if (!canvas) return;

        const canvasRect = canvas.getBoundingClientRect();
        const mouseX = event.clientX - canvasRect.left;
        const mouseY = event.clientY - canvasRect.top;
        
        // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è snap
        const elements = canvas.querySelectorAll('.draggable-element:not(.dragging)');
        
        elements.forEach(element => {
            const elementRect = element.getBoundingClientRect();
            const elementLeft = elementRect.left - canvasRect.left;
            const elementTop = elementRect.top - canvasRect.top;
            const elementRight = elementLeft + elementRect.width;
            const elementBottom = elementTop + elementRect.height;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ snap lines
            if (Math.abs(mouseY - elementTop) < this.config.snapThreshold) {
                this.createSnapLine('horizontal', elementTop);
            }
            if (Math.abs(mouseY - elementBottom) < this.config.snapThreshold) {
                this.createSnapLine('horizontal', elementBottom);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ snap lines
            if (Math.abs(mouseX - elementLeft) < this.config.snapThreshold) {
                this.createSnapLine('vertical', elementLeft);
            }
            if (Math.abs(mouseX - elementRight) < this.config.snapThreshold) {
                this.createSnapLine('vertical', elementRight);
            }
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ snap line
     */
    createSnapLine(direction, position) {
        const line = document.createElement('div');
        line.className = `snap-line snap-line-${direction}`;
        line.style.position = 'absolute';
        line.style.backgroundColor = '#3ECDC1';
        line.style.zIndex = '9999';
        line.style.pointerEvents = 'none';
        
        if (direction === 'horizontal') {
            line.style.left = '0';
            line.style.top = `${position}px`;
            line.style.width = '100%';
            line.style.height = '2px';
        } else {
            line.style.top = '0';
            line.style.left = `${position}px`;
            line.style.width = '2px';
            line.style.height = '100%';
        }
        
        const canvas = document.getElementById('canvas');
        if (canvas) {
            canvas.appendChild(line);
            this.state.snapLines[direction].push(line);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ snap lines
     */
    clearSnapLines() {
        Object.values(this.state.snapLines).flat().forEach(line => {
            if (line.parentNode) {
                line.parentNode.removeChild(line);
            }
        });
        
        this.state.snapLines = { horizontal: [], vertical: [] };
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
     */
    handleDragEnd(event) {
        this.clearDragState();
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
     */
    clearDragState() {
        // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å—ã
        document.querySelectorAll('.dragging').forEach(el => {
            el.classList.remove('dragging');
        });
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–≤—å—é
        if (this.state.dragPreview) {
            this.state.dragPreview.remove();
            this.state.dragPreview = null;
        }
        
        // –û—á–∏—â–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
        this.clearDropZoneHighlights();
        this.clearSnapLines();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.state = {
            isDragging: false,
            dragType: null,
            dragData: null,
            dropTarget: null,
            dragPreview: null,
            snapLines: { horizontal: [], vertical: [] }
        };
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º—ã—à–∏
     */
    handleMouseDown(event) {
        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        if (event.ctrlKey || event.metaKey) {
            this.multiSelectMode = true;
        }
    }

    handleMouseMove(event) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–µ–≤—å—é –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
        if (this.state.isDragging && this.state.dragPreview) {
            this.updateDragPreviewPosition(event);
        }
    }

    handleMouseUp(event) {
        this.multiSelectMode = false;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
     */
    handleKeyDown(event) {
        switch (event.key) {
            case 'Escape':
                if (this.state.isDragging) {
                    this.cancelDrag();
                }
                break;
            case 'Shift':
                this.multiSelectMode = true;
                break;
            case 'g':
                if (event.ctrlKey || event.metaKey) {
                    this.toggleSnapToGrid();
                }
                break;
        }
    }

    handleKeyUp(event) {
        if (event.key === 'Shift') {
            this.multiSelectMode = false;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ canvas
     */
    handleCanvasClick(event) {
        // –õ–æ–≥–∏–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const element = event.target.closest('.draggable-element');
        if (element) {
            this.selectElement(element, this.multiSelectMode);
        } else {
            this.clearSelection();
        }
    }

    handleCanvasDoubleClick(event) {
        // –õ–æ–≥–∏–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const element = event.target.closest('.draggable-element');
        if (element) {
            this.editElement(element);
        }
    }

    /**
     * –í—ã–¥–µ–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    selectElement(element, multiSelect = false) {
        if (!multiSelect) {
            this.clearSelection();
        }
        
        if (!this.selectedElements.includes(element)) {
            this.selectedElements.push(element);
            element.classList.add('selected-element');
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è
     */
    clearSelection() {
        this.selectedElements.forEach(element => {
            element.classList.remove('selected-element');
        });
        this.selectedElements = [];
    }

    /**
     * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    editElement(element) {
        const editableElement = element.querySelector('[contenteditable="true"]');
        if (editableElement) {
            editableElement.focus();
            const range = document.createRange();
            range.selectNodeContents(editableElement);
            const selection = window.getSelection();
            selection.removeAllRanges();
            selection.addRange(range);
        }
    }

    /**
     * –û—Ç–º–µ–Ω–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
     */
    cancelDrag() {
        this.clearDragState();
        console.info('‚ùå –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ snap to grid
     */
    toggleSnapToGrid() {
        this.config.snapToGrid = !this.config.snapToGrid;
        this.visualBuilder?.showNotification(
            `Snap to grid ${this.config.snapToGrid ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}`,
            'info'
        );
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
     */
    setupKeyboardShortcuts() {
        // –£–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ handleKeyDown
        console.info('‚å®Ô∏è –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ Drag & Drop –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    getState() {
        return this.state;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    getConfig() {
        return this.config;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    updateConfig(newConfig) {
        Object.assign(this.config, newConfig);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
let dragDropEditor;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', function() {
    if (window.visualBuilder) {
        dragDropEditor = new DragDropEditor(window.visualBuilder);
        window.dragDropEditor = dragDropEditor;
        console.info('üéØ Drag & Drop Editor –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
    }
}); 