/**
 * Live Editor –¥–ª—è Visual Builder
 * –ñ–∏–≤–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
 */

class LiveEditor {
    constructor(visualBuilder) {
        this.visualBuilder = visualBuilder;
        this.isDirty = false;
        this.autoSaveTimer = null;
        this.currentFile = null;
        this.lastSavedContent = null;
        this.saveInProgress = false;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        this.config = {
            autoSaveDelay: 3000, // 3 —Å–µ–∫—É–Ω–¥—ã
            maxAutoSaveAttempts: 3,
            showSaveIndicator: true,
            backupBeforeSave: true
        };
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ
        this.state = {
            isEditing: false,
            hasUnsavedChanges: false,
            lastSaveTime: null,
            saveHistory: [],
            errorCount: 0
        };
        
        // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
        this.dom = {};
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Live Editor
     */
    init() {
        this.createSaveIndicator();
        this.setupLiveEditing();
        this.setupAutoSave();
        this.setupEventListeners();
        
        console.info('‚ö° Live Editor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    createSaveIndicator() {
        const indicator = document.createElement('div');
        indicator.className = 'save-indicator';
        indicator.id = 'saveIndicator';
        indicator.innerHTML = `
            <div class="save-indicator-content">
                <div class="save-status">
                    <i class="bi bi-check-circle-fill save-success" style="display: none;"></i>
                    <i class="bi bi-arrow-clockwise save-loading" style="display: none;"></i>
                    <i class="bi bi-exclamation-circle-fill save-error" style="display: none;"></i>
                    <span class="save-text">–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ</span>
                </div>
                <div class="save-time" id="saveTime"></div>
            </div>
        `;
        
        document.body.appendChild(indicator);
        this.dom.saveIndicator = indicator;
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∂–∏–≤–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    setupLiveEditing() {
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ contenteditable —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
        document.addEventListener('input', this.handleInputChange.bind(this));
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–µ
        document.addEventListener('change', this.handleFormChange.bind(this));
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ drag & drop
        document.addEventListener('drop', this.handleDropChange.bind(this));
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ
        document.addEventListener('keyup', this.handleKeyChange.bind(this));
        
        console.info('üìù –ñ–∏–≤–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ');
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ input
     */
    handleInputChange(event) {
        const target = event.target;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º
        if (this.isEditableElement(target)) {
            this.markAsDirty();
            this.scheduleAutoSave();
            this.updateSaveIndicator('editing');
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–µ
     */
    handleFormChange(event) {
        const target = event.target;
        
        if (target.matches('input, textarea, select')) {
            this.markAsDirty();
            this.scheduleAutoSave();
            this.updateSaveIndicator('editing');
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–∏ drop
     */
    handleDropChange(event) {
        if (event.target.closest('.draggable-element') || event.target.closest('.canvas')) {
            this.markAsDirty();
            this.scheduleAutoSave();
            this.updateSaveIndicator('editing');
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–ª–∞–≤–∏—à
     */
    handleKeyChange(event) {
        const target = event.target;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º
        if (this.isEditableElement(target) || target.matches('.code-editor')) {
            this.markAsDirty();
            this.scheduleAutoSave();
            this.updateSaveIndicator('editing');
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º
     */
    isEditableElement(element) {
        return element.hasAttribute('contenteditable') || 
               element.classList.contains('editable-element') ||
               element.closest('.draggable-element') ||
               element.matches('input, textarea, select');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    setupAutoSave() {
        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setInterval(() => {
            if (this.state.hasUnsavedChanges && !this.saveInProgress) {
                this.autoSave();
            }
        }, 30000);
        
        console.info('üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.addEventListener('beforeunload', (event) => {
            if (this.state.hasUnsavedChanges) {
                event.preventDefault();
                event.returnValue = '–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É?';
                return event.returnValue;
            }
        });

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
        document.addEventListener('blur', () => {
            if (this.state.hasUnsavedChanges) {
                this.scheduleAutoSave();
            }
        }, true);

        // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        document.addEventListener('keydown', (event) => {
            if (event.ctrlKey || event.metaKey) {
                switch (event.key.toLowerCase()) {
                    case 's':
                        event.preventDefault();
                        this.saveFile();
                        break;
                    case 'shift':
                        if (event.key === 'S') {
                            event.preventDefault();
                            this.saveFileAs();
                        }
                        break;
                }
            }
        });
    }

    /**
     * –û—Ç–º–µ—Ç–∫–∞ –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π
     */
    markAsDirty() {
        this.isDirty = true;
        this.state.hasUnsavedChanges = true;
        this.updateSaveIndicator('dirty');
    }

    /**
     * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    scheduleAutoSave() {
        if (this.autoSaveTimer) {
            clearTimeout(this.autoSaveTimer);
        }
        
        this.autoSaveTimer = setTimeout(() => {
            this.autoSave();
        }, this.config.autoSaveDelay);
    }

    /**
     * –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
     */
    async autoSave() {
        if (this.saveInProgress || !this.state.hasUnsavedChanges) {
            return;
        }
        
        try {
            this.saveInProgress = true;
            this.updateSaveIndicator('saving');
            
            await this.saveFile(true); // true = –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            
            this.state.errorCount = 0;
            this.updateSaveIndicator('saved');
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
            this.state.errorCount++;
            
            if (this.state.errorCount >= this.config.maxAutoSaveAttempts) {
                this.updateSaveIndicator('error');
                this.visualBuilder.showNotification('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é.', 'error');
            } else {
                this.updateSaveIndicator('retry');
                // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                setTimeout(() => this.autoSave(), 5000);
            }
        } finally {
            this.saveInProgress = false;
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
     */
    async saveFile(isAutoSave = false) {
        if (!this.currentFile) {
            throw new Error('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω');
        }
        
        try {
            this.saveInProgress = true;
            this.updateSaveIndicator('saving');
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –∫–æ–Ω—Ç–µ–Ω—Ç
            const content = this.generateHTMLFromEditor();
            
            // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            if (this.config.backupBeforeSave && this.lastSavedContent) {
                await this.createBackup();
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const response = await fetch('/api/visual-builder/files/save', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': this.visualBuilder.config.csrfToken
                },
                body: JSON.stringify({
                    filepath: this.currentFile,
                    content: content,
                    isAutoSave: isAutoSave,
                    timestamp: Date.now()
                })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            
            if (data.success) {
                this.lastSavedContent = content;
                this.isDirty = false;
                this.state.hasUnsavedChanges = false;
                this.state.lastSaveTime = new Date();
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
                this.addToSaveHistory({
                    timestamp: Date.now(),
                    filepath: this.currentFile,
                    isAutoSave: isAutoSave,
                    success: true
                });
                
                this.updateSaveIndicator('saved');
                
                if (!isAutoSave) {
                    this.visualBuilder.showNotification('–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
                }
                
                console.info(`‚úÖ –§–∞–π–ª "${this.currentFile}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω`);
                return data;
            } else {
                throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞');
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
            this.updateSaveIndicator('error');
            this.visualBuilder.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞', 'error');
            throw error;
        } finally {
            this.saveInProgress = false;
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–∞–∫
     */
    async saveFileAs() {
        const newPath = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É:', this.currentFile);
        if (!newPath) return;
        
        const originalPath = this.currentFile;
        this.currentFile = newPath;
        
        try {
            await this.saveFile();
            this.visualBuilder.showNotification(`–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ "${newPath}"`, 'success');
        } catch (error) {
            this.currentFile = originalPath;
            throw error;
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
     */
    generateHTMLFromEditor() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω
        if (this.visualBuilder.visualEditor && this.visualBuilder.visualEditor.state.mode === 'code') {
            // –†–µ–∂–∏–º –∫–æ–¥–∞ - –±–µ—Ä–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ code editor
            return this.visualBuilder.visualEditor.dom.codeEditor.value;
        } else if (this.visualBuilder.visualEditor && this.visualBuilder.visualEditor.state.mode === 'split') {
            // –†–µ–∂–∏–º split - –±–µ—Ä–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ split code editor
            return this.visualBuilder.visualEditor.dom.splitCodeEditor.value;
        } else {
            // –í–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º canvas
            return this.visualBuilder.exportCanvasToHTML();
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
     */
    async createBackup() {
        try {
            const backupPath = this.currentFile.replace('.html', `.backup.${Date.now()}.html`);
            
            const response = await fetch('/api/visual-builder/files/save', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': this.visualBuilder.config.csrfToken
                },
                body: JSON.stringify({
                    filepath: backupPath,
                    content: this.lastSavedContent,
                    isBackup: true
                })
            });
            
            if (response.ok) {
                console.info(`üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${backupPath}`);
            }
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é:', error);
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
     */
    addToSaveHistory(saveInfo) {
        this.state.saveHistory.push(saveInfo);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if (this.state.saveHistory.length > 50) {
            this.state.saveHistory.shift();
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    updateSaveIndicator(status) {
        if (!this.dom.saveIndicator) return;
        
        const indicator = this.dom.saveIndicator;
        const successIcon = indicator.querySelector('.save-success');
        const loadingIcon = indicator.querySelector('.save-loading');
        const errorIcon = indicator.querySelector('.save-error');
        const saveText = indicator.querySelector('.save-text');
        const saveTime = indicator.querySelector('#saveTime');
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∏–∫–æ–Ω–∫–∏
        successIcon.style.display = 'none';
        loadingIcon.style.display = 'none';
        errorIcon.style.display = 'none';
        
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã
        indicator.className = 'save-indicator';
        
        switch (status) {
            case 'saved':
                successIcon.style.display = 'inline';
                saveText.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ';
                indicator.classList.add('saved');
                if (this.state.lastSaveTime) {
                    saveTime.textContent = this.state.lastSaveTime.toLocaleTimeString();
                }
                break;
                
            case 'saving':
                loadingIcon.style.display = 'inline';
                saveText.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
                indicator.classList.add('saving');
                saveTime.textContent = '';
                break;
                
            case 'dirty':
                saveText.textContent = '–ù–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ';
                indicator.classList.add('dirty');
                saveTime.textContent = '';
                break;
                
            case 'editing':
                saveText.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...';
                indicator.classList.add('editing');
                saveTime.textContent = '';
                break;
                
            case 'error':
                errorIcon.style.display = 'inline';
                saveText.textContent = '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è';
                indicator.classList.add('error');
                saveTime.textContent = '';
                break;
                
            case 'retry':
                loadingIcon.style.display = 'inline';
                saveText.textContent = '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...';
                indicator.classList.add('retry');
                saveTime.textContent = '';
                break;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        indicator.style.display = 'block';
        
        // –°–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if (status === 'saved') {
            setTimeout(() => {
                indicator.style.display = 'none';
            }, 3000);
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
     */
    setCurrentFile(filePath) {
        this.currentFile = filePath;
        this.lastSavedContent = null;
        this.isDirty = false;
        this.state.hasUnsavedChanges = false;
        this.state.errorCount = 0;
        
        console.info(`üìÅ –¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª: ${filePath}`);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
     */
    hasUnsavedChanges() {
        return this.state.hasUnsavedChanges;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π
     */
    getSaveStats() {
        return {
            totalSaves: this.state.saveHistory.length,
            lastSaveTime: this.state.lastSaveTime,
            errorCount: this.state.errorCount,
            isDirty: this.isDirty,
            currentFile: this.currentFile
        };
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    clear() {
        this.currentFile = null;
        this.lastSavedContent = null;
        this.isDirty = false;
        this.state.hasUnsavedChanges = false;
        this.state.errorCount = 0;
        this.state.saveHistory = [];
        
        if (this.autoSaveTimer) {
            clearTimeout(this.autoSaveTimer);
            this.autoSaveTimer = null;
        }
        
        this.updateSaveIndicator('saved');
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
     */
    forceSave() {
        if (this.state.hasUnsavedChanges) {
            return this.saveFile();
        }
        return Promise.resolve();
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
let liveEditor;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', function() {
    if (window.visualBuilder) {
        liveEditor = new LiveEditor(window.visualBuilder);
        window.liveEditor = liveEditor;
        console.info('‚ö° Live Editor –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
    }
}); 