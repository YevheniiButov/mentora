/**
 * Visual Editor –¥–ª—è HTML —Ñ–∞–π–ª–æ–≤
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è HTML Parser —Å Visual Builder
 */

class VisualEditor {
    constructor(visualBuilder) {
        this.visualBuilder = visualBuilder;
        this.htmlParser = null;
        this.currentFile = null;
        this.isEditing = false;
        this.originalContent = null;
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        this.state = {
            mode: 'visual', // visual, code, split
            autoSave: true,
            showLineNumbers: true,
            wordWrap: true,
            theme: 'light'
        };
        
        // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
        this.dom = {};
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Visual Editor
     */
    async init() {
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º HTML Parser
            const { HTMLParser } = await import('./html-parser.js');
            this.htmlParser = new HTMLParser(this.visualBuilder);
            
            this.createEditorUI();
            this.setupEventListeners();
            this.setupKeyboardShortcuts();
            
            console.info('üé® Visual Editor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Visual Editor:', error);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ UI —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
     */
    createEditorUI() {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        const modal = document.createElement('div');
        modal.className = 'visual-editor-modal';
        modal.id = 'visualEditorModal';
        modal.innerHTML = `
            <div class="visual-editor-content">
                <div class="visual-editor-header">
                    <div class="visual-editor-title">
                        <i class="bi bi-file-earmark-code"></i>
                        <span id="editorTitle">Visual Editor</span>
                    </div>
                    <div class="visual-editor-actions">
                        <div class="editor-mode-toggle">
                            <button class="btn btn-sm btn-secondary" data-mode="visual" onclick="visualEditor.setMode('visual')">
                                <i class="bi bi-eye"></i> Visual
                            </button>
                            <button class="btn btn-sm btn-secondary" data-mode="code" onclick="visualEditor.setMode('code')">
                                <i class="bi bi-code-slash"></i> Code
                            </button>
                            <button class="btn btn-sm btn-secondary" data-mode="split" onclick="visualEditor.setMode('split')">
                                <i class="bi bi-layout-split"></i> Split
                            </button>
                        </div>
                        <button class="btn btn-sm btn-success" onclick="visualEditor.saveFile()" id="saveFileBtn">
                            <i class="bi bi-save"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                        </button>
                        <button class="btn btn-sm btn-info" onclick="visualEditor.previewFile()" id="previewFileBtn">
                            <i class="bi bi-eye"></i> –ü—Ä–æ—Å–º–æ—Ç—Ä
                        </button>
                        <button class="btn btn-sm btn-ghost" onclick="visualEditor.close()" title="–ó–∞–∫—Ä—ã—Ç—å">
                            <i class="bi bi-x-lg"></i>
                        </button>
                    </div>
                </div>
                
                <div class="visual-editor-toolbar">
                    <div class="editor-controls">
                        <button class="btn btn-sm btn-secondary" onclick="visualEditor.toggleAutoSave()" id="autoSaveBtn">
                            <i class="bi bi-check-circle"></i> –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
                        </button>
                        <button class="btn btn-sm btn-secondary" onclick="visualEditor.toggleLineNumbers()" id="lineNumbersBtn">
                            <i class="bi bi-list-ol"></i> –ù–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫
                        </button>
                        <button class="btn btn-sm btn-secondary" onclick="visualEditor.toggleWordWrap()" id="wordWrapBtn">
                            <i class="bi bi-text-wrap"></i> –ü–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫
                        </button>
                        <button class="btn btn-sm btn-secondary" onclick="visualEditor.toggleTheme()" id="themeBtn">
                            <i class="bi bi-moon"></i> –¢–µ–º–∞
                        </button>
                    </div>
                    <div class="editor-info">
                        <span id="fileInfo">–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω</span>
                        <span id="cursorInfo">Ln 1, Col 1</span>
                    </div>
                </div>
                
                <div class="visual-editor-body">
                    <!-- Visual Mode -->
                    <div class="editor-panel visual-panel" id="visualPanel">
                        <div class="visual-canvas" id="visualCanvas">
                            <div class="canvas-placeholder">
                                <i class="bi bi-file-earmark-text"></i>
                                <p>–í—ã–±–µ—Ä–∏—Ç–µ HTML —Ñ–∞–π–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</p>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Code Mode -->
                    <div class="editor-panel code-panel" id="codePanel" style="display: none;">
                        <div class="code-editor-wrapper">
                            <div class="line-numbers" id="lineNumbers"></div>
                            <textarea class="code-editor" id="codeEditor" spellcheck="false"></textarea>
                        </div>
                    </div>
                    
                    <!-- Split Mode -->
                    <div class="editor-panel split-panel" id="splitPanel" style="display: none;">
                        <div class="split-container">
                            <div class="split-panel-left">
                                <div class="code-editor-wrapper">
                                    <div class="line-numbers" id="splitLineNumbers"></div>
                                    <textarea class="code-editor" id="splitCodeEditor" spellcheck="false"></textarea>
                                </div>
                            </div>
                            <div class="split-divider"></div>
                            <div class="split-panel-right">
                                <div class="visual-canvas" id="splitVisualCanvas"></div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="visual-editor-footer">
                    <div class="editor-status">
                        <span id="statusMessage">–ì–æ—Ç–æ–≤</span>
                    </div>
                    <div class="editor-stats">
                        <span id="elementCount">–≠–ª–µ–º–µ–Ω—Ç–æ–≤: 0</span>
                        <span id="wordCount">–°–ª–æ–≤: 0</span>
                        <span id="charCount">–°–∏–º–≤–æ–ª–æ–≤: 0</span>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // –ö—ç—à–∏—Ä—É–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç—ã
        this.dom = {
            modal: modal,
            title: modal.querySelector('#editorTitle'),
            visualPanel: modal.querySelector('#visualPanel'),
            codePanel: modal.querySelector('#codePanel'),
            splitPanel: modal.querySelector('#splitPanel'),
            visualCanvas: modal.querySelector('#visualCanvas'),
            codeEditor: modal.querySelector('#codeEditor'),
            splitCodeEditor: modal.querySelector('#splitCodeEditor'),
            splitVisualCanvas: modal.querySelector('#splitVisualCanvas'),
            lineNumbers: modal.querySelector('#lineNumbers'),
            splitLineNumbers: modal.querySelector('#splitLineNumbers'),
            fileInfo: modal.querySelector('#fileInfo'),
            cursorInfo: modal.querySelector('#cursorInfo'),
            statusMessage: modal.querySelector('#statusMessage'),
            elementCount: modal.querySelector('#elementCount'),
            wordCount: modal.querySelector('#wordCount'),
            charCount: modal.querySelector('#charCount'),
            autoSaveBtn: modal.querySelector('#autoSaveBtn'),
            lineNumbersBtn: modal.querySelector('#lineNumbersBtn'),
            wordWrapBtn: modal.querySelector('#wordWrapBtn'),
            themeBtn: modal.querySelector('#themeBtn')
        };
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º CodeMirror –¥–ª—è code editor
        this.initCodeEditor();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Code Editor
     */
    initCodeEditor() {
        // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
        this.setupCodeEditor(this.dom.codeEditor);
        this.setupCodeEditor(this.dom.splitCodeEditor);
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Code Editor
     */
    setupCodeEditor(textarea) {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        textarea.style.fontFamily = "'Fira Code', 'Courier New', monospace";
        textarea.style.fontSize = '14px';
        textarea.style.lineHeight = '1.5';
        textarea.style.tabSize = '2';
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ Tab
        textarea.addEventListener('keydown', (e) => {
            if (e.key === 'Tab') {
                e.preventDefault();
                const start = textarea.selectionStart;
                const end = textarea.selectionEnd;
                
                textarea.value = textarea.value.substring(0, start) + '  ' + textarea.value.substring(end);
                textarea.selectionStart = textarea.selectionEnd = start + 2;
            }
        });
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫
        textarea.addEventListener('input', () => {
            this.updateLineNumbers(textarea);
            this.updateStats();
            this.updateCursorInfo(textarea);
        });
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
        textarea.addEventListener('click', () => {
            this.updateCursorInfo(textarea);
        });
        
        textarea.addEventListener('keyup', () => {
            this.updateCursorInfo(textarea);
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –ö–ª–∏–∫ –ø–æ –º–æ–¥–∞–ª—å–Ω–æ–º—É –æ–∫–Ω—É
        this.dom.modal.addEventListener('click', (e) => {
            if (e.target === this.dom.modal) {
                this.close();
            }
        });

        // –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        document.addEventListener('keydown', (e) => {
            if (!this.isEditing) return;
            
            if (e.ctrlKey || e.metaKey) {
                switch (e.key.toLowerCase()) {
                    case 's':
                        e.preventDefault();
                        this.saveFile();
                        break;
                    case 'p':
                        e.preventDefault();
                        this.previewFile();
                        break;
                    case '1':
                        e.preventDefault();
                        this.setMode('visual');
                        break;
                    case '2':
                        e.preventDefault();
                        this.setMode('code');
                        break;
                    case '3':
                        e.preventDefault();
                        this.setMode('split');
                        break;
                }
            }
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
     */
    setupKeyboardShortcuts() {
        // –£–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ setupEventListeners
        console.info('‚å®Ô∏è –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ Visual Editor –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
     */
    async openFile(filePath) {
        try {
            this.currentFile = filePath;
            this.isEditing = true;
            
            this.showLoading('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            const response = await fetch('/api/visual-builder/files/open', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': this.visualBuilder.config.csrfToken
                },
                body: JSON.stringify({ filepath: filePath })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            
            if (data.success) {
                const content = data.content;
                this.originalContent = content;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                this.updateFileInfo(filePath);
                this.setContent(content);
                
                // –ü–∞—Ä—Å–∏–º HTML –≤ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                if (this.htmlParser) {
                    const elements = this.htmlParser.parseHTMLToElements(content, filePath);
                    this.updateElementCount(elements.length);
                }
                
                this.open();
                this.showStatus('–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                
                console.info(`‚úÖ –§–∞–π–ª "${filePath}" –æ—Ç–∫—Ä—ã—Ç –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ`);
            } else {
                throw new Error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞');
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞:', error);
            this.showStatus('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞', 'error');
        } finally {
            this.hideLoading();
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
     */
    setContent(content) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ code editor
        this.dom.codeEditor.value = content;
        this.dom.splitCodeEditor.value = content;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫
        this.updateLineNumbers(this.dom.codeEditor);
        this.updateLineNumbers(this.dom.splitCodeEditor);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        this.updateStats();
        
        // –ü–∞—Ä—Å–∏–º –≤ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if (this.htmlParser) {
            const elements = this.htmlParser.parseHTMLToElements(content, this.currentFile);
            this.setVisualContent(elements);
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
     */
    setVisualContent(elements) {
        // –û—á–∏—â–∞–µ–º canvas
        this.dom.visualCanvas.innerHTML = '';
        this.dom.splitVisualCanvas.innerHTML = '';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        elements.forEach(element => {
            const clone = element.cloneNode(true);
            this.dom.visualCanvas.appendChild(clone);
            this.dom.splitVisualCanvas.appendChild(clone.cloneNode(true));
        });
        
        // –ï—Å–ª–∏ –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º placeholder
        if (elements.length === 0) {
            this.showCanvasPlaceholder(this.dom.visualCanvas);
            this.showCanvasPlaceholder(this.dom.splitVisualCanvas);
        }
    }

    /**
     * –ü–æ–∫–∞–∑ placeholder –¥–ª—è canvas
     */
    showCanvasPlaceholder(canvas) {
        canvas.innerHTML = `
            <div class="canvas-placeholder">
                <i class="bi bi-file-earmark-text"></i>
                <p>HTML –∫–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –∑–¥–µ—Å—å</p>
            </div>
        `;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
     */
    async saveFile() {
        if (!this.currentFile) {
            this.showStatus('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω', 'error');
            return;
        }
        
        try {
            this.showLoading('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞...');
            
            let content;
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
            if (this.state.mode === 'code') {
                content = this.dom.codeEditor.value;
            } else if (this.state.mode === 'split') {
                content = this.dom.splitCodeEditor.value;
            } else {
                // –í–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º HTML
                const elements = this.dom.visualCanvas.querySelectorAll('.draggable-element');
                content = this.htmlParser.exportToHTML(elements);
            }
            
            const response = await fetch('/api/visual-builder/files/save', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': this.visualBuilder.config.csrfToken
                },
                body: JSON.stringify({
                    filepath: this.currentFile,
                    content: content
                })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            
            if (data.success) {
                this.originalContent = content;
                this.showStatus('–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
                console.info(`‚úÖ –§–∞–π–ª "${this.currentFile}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω`);
            } else {
                throw new Error(data.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞');
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
            this.showStatus('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞', 'error');
        } finally {
            this.hideLoading();
        }
    }

    /**
     * –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞
     */
    previewFile() {
        if (!this.currentFile) {
            this.showStatus('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω', 'error');
            return;
        }
        
        try {
            let content;
            
            if (this.state.mode === 'code') {
                content = this.dom.codeEditor.value;
            } else if (this.state.mode === 'split') {
                content = this.dom.splitCodeEditor.value;
            } else {
                const elements = this.dom.visualCanvas.querySelectorAll('.draggable-element');
                content = this.htmlParser.exportToHTML(elements);
            }
            
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
            const previewWindow = window.open('', '_blank', 'width=1200,height=800');
            if (previewWindow) {
                previewWindow.document.write(content);
                previewWindow.document.close();
            } else {
                this.showStatus('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞', 'error');
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', error);
            this.showStatus('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞', 'error');
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
     */
    setMode(mode) {
        this.state.mode = mode;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        document.querySelectorAll('.editor-mode-toggle button').forEach(btn => {
            btn.classList.remove('active');
        });
        document.querySelector(`[data-mode="${mode}"]`).classList.add('active');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–∞–Ω–µ–ª—å
        this.dom.visualPanel.style.display = 'none';
        this.dom.codePanel.style.display = 'none';
        this.dom.splitPanel.style.display = 'none';
        
        switch (mode) {
            case 'visual':
                this.dom.visualPanel.style.display = 'block';
                break;
            case 'code':
                this.dom.codePanel.style.display = 'block';
                break;
            case 'split':
                this.dom.splitPanel.style.display = 'block';
                break;
        }
        
        this.showStatus(`–†–µ–∂–∏–º: ${mode}`);
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    toggleAutoSave() {
        this.state.autoSave = !this.state.autoSave;
        this.dom.autoSaveBtn.classList.toggle('active', this.state.autoSave);
        this.showStatus(`–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: ${this.state.autoSave ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}`);
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫
     */
    toggleLineNumbers() {
        this.state.showLineNumbers = !this.state.showLineNumbers;
        this.dom.lineNumbersBtn.classList.toggle('active', this.state.showLineNumbers);
        
        const lineNumbers = document.querySelectorAll('.line-numbers');
        lineNumbers.forEach(ln => {
            ln.style.display = this.state.showLineNumbers ? 'block' : 'none';
        });
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫
     */
    toggleWordWrap() {
        this.state.wordWrap = !this.state.wordWrap;
        this.dom.wordWrapBtn.classList.toggle('active', this.state.wordWrap);
        
        const editors = [this.dom.codeEditor, this.dom.splitCodeEditor];
        editors.forEach(editor => {
            editor.style.whiteSpace = this.state.wordWrap ? 'pre-wrap' : 'pre';
        });
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
     */
    toggleTheme() {
        this.state.theme = this.state.theme === 'light' ? 'dark' : 'light';
        this.dom.themeBtn.innerHTML = this.state.theme === 'light' ? 
            '<i class="bi bi-moon"></i> –¢–µ–º–∞' : 
            '<i class="bi bi-sun"></i> –¢–µ–º–∞';
        
        this.dom.modal.setAttribute('data-theme', this.state.theme);
        this.showStatus(`–¢–µ–º–∞: ${this.state.theme}`);
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫
     */
    updateLineNumbers(textarea) {
        const lineNumbers = textarea === this.dom.codeEditor ? 
            this.dom.lineNumbers : this.dom.splitLineNumbers;
        
        if (!this.state.showLineNumbers) return;
        
        const lines = textarea.value.split('\n');
        const lineNumbersHTML = lines.map((_, index) => 
            `<div class="line-number">${index + 1}</div>`
        ).join('');
        
        lineNumbers.innerHTML = lineNumbersHTML;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–æ—Ä–µ
     */
    updateCursorInfo(textarea) {
        const text = textarea.value;
        const cursorPos = textarea.selectionStart;
        
        const lines = text.substring(0, cursorPos).split('\n');
        const line = lines.length;
        const col = lines[lines.length - 1].length + 1;
        
        this.dom.cursorInfo.textContent = `Ln ${line}, Col ${col}`;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    updateStats() {
        const content = this.dom.codeEditor.value;
        const words = content.trim().split(/\s+/).length;
        const chars = content.length;
        
        this.dom.wordCount.textContent = `–°–ª–æ–≤: ${words}`;
        this.dom.charCount.textContent = `–°–∏–º–≤–æ–ª–æ–≤: ${chars}`;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    updateElementCount(count) {
        this.dom.elementCount.textContent = `–≠–ª–µ–º–µ–Ω—Ç–æ–≤: ${count}`;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
     */
    updateFileInfo(filePath) {
        const fileName = filePath.split('/').pop();
        this.dom.title.textContent = `Visual Editor - ${fileName}`;
        this.dom.fileInfo.textContent = fileName;
    }

    /**
     * –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞
     */
    showStatus(message, type = 'info') {
        this.dom.statusMessage.textContent = message;
        this.dom.statusMessage.className = `editor-status-message ${type}`;
    }

    /**
     * –ü–æ–∫–∞–∑ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    showLoading(message) {
        this.showStatus(message, 'loading');
    }

    /**
     * –°–∫—Ä—ã—Ç–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
     */
    hideLoading() {
        this.showStatus('–ì–æ—Ç–æ–≤');
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
     */
    open() {
        this.dom.modal.style.display = 'flex';
        this.isEditing = true;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        this.setMode('visual');
        
        // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
        setTimeout(() => {
            if (this.state.mode === 'code') {
                this.dom.codeEditor.focus();
            }
        }, 100);
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
     */
    close() {
        this.dom.modal.style.display = 'none';
        this.isEditing = false;
        this.currentFile = null;
        this.originalContent = null;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
     */
    hasChanges() {
        if (!this.currentFile || !this.originalContent) return false;
        
        let currentContent;
        if (this.state.mode === 'code') {
            currentContent = this.dom.codeEditor.value;
        } else if (this.state.mode === 'split') {
            currentContent = this.dom.splitCodeEditor.value;
        } else {
            const elements = this.dom.visualCanvas.querySelectorAll('.draggable-element');
            currentContent = this.htmlParser.exportToHTML(elements);
        }
        
        return currentContent !== this.originalContent;
    }

    /**
     * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
     */
    confirmClose() {
        if (this.hasChanges()) {
            return confirm('–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä?');
        }
        return true;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
let visualEditor;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', function() {
    if (window.visualBuilder) {
        visualEditor = new VisualEditor(window.visualBuilder);
        window.visualEditor = visualEditor;
        console.info('üé® Visual Editor –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
    }
}); 