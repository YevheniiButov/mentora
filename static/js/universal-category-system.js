/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è Dental Academy
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
 * –í–∫–ª—é—á–∞–µ—Ç fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã –∏ –æ—Ç–ª–∞–¥–∫—É
 */

class UniversalCategorySystem {
    constructor(options = {}) {
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å —Ä–∞–∑—É–º–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.config = {
            categorySelector: '.learning-path-button',  // –ò–∑–º–µ–Ω–µ–Ω–æ –¥–ª—è LearningPath
            listSelector: '.subject-list', 
            itemSelector: '.subcategory-item',
            expandedClass: 'expanded',
            forceVisibleClass: 'force-visible',
            debugMode: options.debug || false,
            animationDuration: 400,
            useFallback: true,
            autoInit: true,
            ...options
        };
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        this.isInitialized = false;
        this.categories = new Map();
        this.activeCategory = null;
        
        // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        this.stats = {
            categoriesFound: 0,
            successfulToggles: 0,
            fallbackUsed: 0,
            errors: 0
        };
        
        this.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UniversalCategorySystem');
        
        if (this.config.autoInit) {
            this.init();
        }
    }
    
    log(message, ...args) {
        if (this.config.debugMode) {
            console.log(`[CategorySystem] ${message}`, ...args);
        }
    }
    
    warn(message, ...args) {
        console.warn(`[CategorySystem] ‚ö†Ô∏è ${message}`, ...args);
    }
    
    error(message, ...args) {
        console.error(`[CategorySystem] ‚ùå ${message}`, ...args);
        this.stats.errors++;
    }
    
    init() {
        // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.setup());
        } else {
            // DOM —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
            setTimeout(() => this.setup(), 50);
        }
        
        // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ DOM –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        this.setupMutationObserver();
    }
    
    setup() {
        this.log('üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
        
        try {
            // –°–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            this.scanCategories();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º event delegation –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
            this.setupEventDelegation();
            
            // –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (this.config.debugMode) {
                this.enableDebugMode();
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è fallback
            this.injectFallbackStyles();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å CSS
            this.testCSSAnimations();
            
            this.isInitialized = true;
            this.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
            this.logStats();
            
            // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ window –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            window.categorySystem = this;
            
        } catch (error) {
            this.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }
    }
    
    scanCategories() {
        const categoryButtons = document.querySelectorAll(this.config.categorySelector);
        this.stats.categoriesFound = categoryButtons.length;
        
        this.log(`üîç –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoryButtons.length}`);
        
        if (categoryButtons.length === 0) {
            this.warn('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä:', this.config.categorySelector);
            this.warn('–ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º .learning-path-button (LearningPath) –∏–ª–∏ .content-category (ContentCategory)');
            return;
        }
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        categoryButtons.forEach((button, index) => {
            this.registerCategory(button, index);
        });
    }
    
    registerCategory(button, index) {
        // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ LearningPath –∏ ContentCategory
        const categoryId = button.getAttribute('data-path') || button.getAttribute('data-category');
        
        if (!categoryId) {
            this.error(`–ö–Ω–æ–ø–∫–∞ ${index} –Ω–µ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ data-path –∏–ª–∏ data-category:`, button);
            return;
        }
        
        // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏—Å–æ–∫ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞ ID)
        let listId = `path-${categoryId}-subjects`;  // –î–ª—è LearningPath
        let list = document.getElementById(listId);
        
        if (!list) {
            listId = `category-${categoryId}-subcategories`;  // –î–ª—è ContentCategory
            list = document.getElementById(listId);
        }
        
        if (!list) {
            this.error(`–°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}: #${listId}`);
            return;
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        const categoryData = {
            id: categoryId,
            button,
            list,
            items: list.querySelectorAll(this.config.itemSelector),
            isExpanded: false
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
        this.categories.set(categoryId, categoryData);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º ARIA –∞—Ç—Ä–∏–±—É—Ç—ã
        button.setAttribute('aria-expanded', 'false');
        button.setAttribute('aria-controls', listId);
        button.setAttribute('role', 'button');
        button.setAttribute('tabindex', '0');
        
        // –î–æ–±–∞–≤–ª—è–µ–º type="button" –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∑–∞–¥–∞–Ω–æ
        if (button.tagName === 'BUTTON' && !button.hasAttribute('type')) {
            button.setAttribute('type', 'button');
        }
        
        this.log(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: ID=${categoryId}, —ç–ª–µ–º–µ–Ω—Ç–æ–≤=${categoryData.items.length}`);
    }
    
    setupEventDelegation() {
        // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–µ—Ä–µ–∑ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        document.addEventListener('click', (e) => {
            const categoryButton = e.target.closest(this.config.categorySelector);
            if (categoryButton) {
                e.preventDefault();
                e.stopPropagation();
                
                const categoryId = categoryButton.getAttribute('data-path') || categoryButton.getAttribute('data-category');
                if (categoryId) {
                    this.toggleCategory(categoryId);
                }
            }
        });
        
        // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' || e.key === ' ') {
                const categoryButton = e.target.closest(this.config.categorySelector);
                if (categoryButton) {
                    e.preventDefault();
                    const categoryId = categoryButton.getAttribute('data-path') || categoryButton.getAttribute('data-category');
                    if (categoryId) {
                        this.toggleCategory(categoryId);
                    }
                }
            }
        });
        
        this.log('üì° Event delegation –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
    
    setupMutationObserver() {
        // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        const observer = new MutationObserver((mutations) => {
            let newCategoriesFound = false;
            
            mutations.forEach((mutation) => {
                mutation.addedNodes.forEach((node) => {
                    if (node.nodeType === Node.ELEMENT_NODE) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                        const newCategories = node.querySelectorAll ? 
                            node.querySelectorAll(this.config.categorySelector) : [];
                        
                        if (newCategories.length > 0) {
                            newCategoriesFound = true;
                        }
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º —ç–ª–µ–º–µ–Ω—Ç
                        if (node.matches && node.matches(this.config.categorySelector)) {
                            newCategoriesFound = true;
                        }
                    }
                });
            });
            
            if (newCategoriesFound) {
                this.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...');
                setTimeout(() => this.scanCategories(), 100);
            }
        });
        
        observer.observe(document.body, {
            childList: true,
            subtree: true
        });
        
        this.log('üëÅÔ∏è MutationObserver –∞–∫—Ç–∏–≤–µ–Ω');
    }
    
    toggleCategory(categoryId) {
        this.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryId}`);
        
        const category = this.categories.get(categoryId);
        
        if (!category) {
            this.error(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${categoryId}`);
            return false;
        }
        
        try {
            const wasExpanded = category.isExpanded;
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            this.closeAllCategories(categoryId);
            
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            if (wasExpanded) {
                this.closeCategory(categoryId);
            } else {
                this.openCategory(categoryId);
            }
            
            this.stats.successfulToggles++;
            return true;
            
        } catch (error) {
            this.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${categoryId}:`, error);
            
            // Fallback: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ
            if (this.config.useFallback) {
                this.forceCategoryToggle(categoryId);
            }
            
            return false;
        }
    }
    
    openCategory(categoryId) {
        const category = this.categories.get(categoryId);
        if (!category) return;
        
        this.log(`üîì –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryId}`);
        
        const { button, list, items } = category;
        
        // –ú–µ—Ç–æ–¥ 1: CSS –∫–ª–∞—Å—Å—ã
        list.classList.add(this.config.expandedClass);
        list.setAttribute('data-expanded', 'true');
        
        // –ú–µ—Ç–æ–¥ 2: ARIA
        button.setAttribute('aria-expanded', 'true');
        
        // –ú–µ—Ç–æ–¥ 3: Fallback —á–µ—Ä–µ–∑ inline —Å—Ç–∏–ª–∏ (–µ—Å–ª–∏ CSS –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
        if (this.config.useFallback) {
            setTimeout(() => {
                if (this.getComputedOpacity(list) < 0.5) {
                    this.log(`üîß CSS –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è ${categoryId}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback`);
                    this.applyFallbackStyles(list, items, true);
                    this.stats.fallbackUsed++;
                }
            }, 100);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        category.isExpanded = true;
        this.activeCategory = categoryId;
        
        // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –æ—Ç–∫—Ä—ã—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        setTimeout(() => {
            button.scrollIntoView({ 
                behavior: 'smooth', 
                block: 'nearest',
                inline: 'nearest'
            });
        }, 200);
        
        this.log(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryId} –æ—Ç–∫—Ä—ã—Ç–∞`);
    }
    
    closeCategory(categoryId) {
        const category = this.categories.get(categoryId);
        if (!category) return;
        
        this.log(`üîí –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryId}`);
        
        const { button, list, items } = category;
        
        // –ú–µ—Ç–æ–¥ 1: –£–±–∏—Ä–∞–µ–º CSS –∫–ª–∞—Å—Å—ã
        list.classList.remove(this.config.expandedClass, this.config.forceVisibleClass);
        list.removeAttribute('data-expanded');
        
        // –ú–µ—Ç–æ–¥ 2: ARIA
        button.setAttribute('aria-expanded', 'false');
        
        // –ú–µ—Ç–æ–¥ 3: –û—á–∏—â–∞–µ–º fallback —Å—Ç–∏–ª–∏
        this.clearFallbackStyles(list, items);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        category.isExpanded = false;
        if (this.activeCategory === categoryId) {
            this.activeCategory = null;
        }
        
        this.log(`‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryId} –∑–∞–∫—Ä—ã—Ç–∞`);
    }
    
    closeAllCategories(exceptCategoryId = null) {
        this.categories.forEach((category, categoryId) => {
            if (categoryId !== exceptCategoryId && category.isExpanded) {
                this.closeCategory(categoryId);
            }
        });
    }
    
    forceCategoryToggle(categoryId) {
        this.log(`‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categoryId}`);
        
        const category = this.categories.get(categoryId);
        if (!category) return;
        
        const { list, items } = category;
        const isCurrentlyVisible = list.classList.contains(this.config.forceVisibleClass);
        
        if (isCurrentlyVisible) {
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º
            list.classList.remove(this.config.forceVisibleClass);
            this.clearFallbackStyles(list, items);
            category.isExpanded = false;
        } else {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º
            this.closeAllCategories(categoryId);
            list.classList.add(this.config.forceVisibleClass);
            this.applyFallbackStyles(list, items, true);
            category.isExpanded = true;
            this.activeCategory = categoryId;
        }
        
        this.stats.fallbackUsed++;
    }
    
    applyFallbackStyles(list, items, visible) {
        if (visible) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
            Object.assign(list.style, {
                display: 'block',
                maxHeight: 'none',
                opacity: '1',
                overflow: 'visible',
                visibility: 'visible',
                transform: 'translateY(0)',
                marginTop: '0.75rem',
                paddingTop: '0.5rem'
            });
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
            items.forEach((item, index) => {
                setTimeout(() => {
                    Object.assign(item.style, {
                        opacity: '1',
                        transform: 'translateX(0)',
                        visibility: 'visible'
                    });
                }, index * 50);
            });
        } else {
            // –°–∫—Ä—ã–≤–∞–µ–º
            list.style.cssText = '';
            items.forEach(item => {
                item.style.cssText = '';
            });
        }
    }
    
    clearFallbackStyles(list, items) {
        list.style.cssText = '';
        items.forEach(item => {
            item.style.cssText = '';
        });
    }
    
    getComputedOpacity(element) {
        return parseFloat(window.getComputedStyle(element).opacity) || 0;
    }
    
    testCSSAnimations() {
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CSS
        const testElement = document.createElement('div');
        testElement.className = this.config.listSelector.replace('.', '') + ' ' + this.config.expandedClass;
        testElement.style.position = 'absolute';
        testElement.style.left = '-9999px';
        
        document.body.appendChild(testElement);
        
        const opacity = this.getComputedOpacity(testElement);
        document.body.removeChild(testElement);
        
        if (opacity < 0.8) {
            this.warn('CSS –∞–Ω–∏–º–∞—Ü–∏–∏ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –≤–∫–ª—é—á–µ–Ω fallback —Ä–µ–∂–∏–º');
            this.config.useFallback = true;
        } else {
            this.log('‚úÖ CSS –∞–Ω–∏–º–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        }
    }
    
    injectFallbackStyles() {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç–∏–ª–∏ –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
        const style = document.createElement('style');
        style.textContent = `
            ${this.config.listSelector}.${this.config.forceVisibleClass} {
                display: block !important;
                max-height: none !important;
                opacity: 1 !important;
                overflow: visible !important;
                visibility: visible !important;
            }
            ${this.config.listSelector}.${this.config.forceVisibleClass} ${this.config.itemSelector} {
                opacity: 1 !important;
                transform: none !important;
                visibility: visible !important;
            }
        `;
        document.head.appendChild(style);
        
        this.log('üíâ Fallback —Å—Ç–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    }
    
    enableDebugMode() {
        // –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
        this.log('üêõ –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω');
    }
    
    logStats() {
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        if (this.config.debugMode) {
            console.log('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', this.stats);
        }
    }
    
    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    
    openCategoryById(categoryId) {
        this.closeAllCategories();
        this.openCategory(categoryId);
    }
    
    closeAllCategoriesPublic() {
        this.closeAllCategories();
    }
    
    refreshCategories() {
        this.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
        this.categories.clear();
        this.scanCategories();
    }
    
    getStats() {
        return { ...this.stats };
    }
    
    debug() {
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        if (this.config.debugMode) {
            console.log('UniversalCategorySystem —Ä–∞–±–æ—Ç–∞–µ—Ç');
            return {
                categories: this.categories.size,
                active: this.activeCategory
            };
        }
        return null;
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    setTimeout(() => {
        window.universalCategorySystem = new UniversalCategorySystem({
            debug: false // –û—Ç–ª–∞–¥–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        });
    }, 100);
});

// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
if (typeof module !== 'undefined' && module.exports) {
    module.exports = UniversalCategorySystem;
} 