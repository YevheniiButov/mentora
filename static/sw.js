/**
 * Service Worker –¥–ª—è Dental Academy PWA
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ –æ—Ñ–ª–∞–π–Ω –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
 * –í–µ—Ä—Å–∏—è: 1.3.0
 */

// –ò–º–µ–Ω–∞ –∫—ç—à–µ–π
const STATIC_CACHE_NAME = 'dental-academy-static-v1.3';
const DYNAMIC_CACHE_NAME = 'dental-academy-dynamic-v1.3';
const PAGES_CACHE_NAME = 'dental-academy-pages-v1.3';
const API_CACHE_NAME = 'dental-academy-api-v1.3';
const IMG_CACHE_NAME = 'dental-academy-images-v1.3';

// –†–µ—Å—É—Ä—Å—ã –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ)
const STATIC_ASSETS = [
  '/',
  '/offline',
  '/static/css/mobile-app.css',
  '/static/css/theme-fixes.css',
  '/static/js/mobile-app.js',
  '/static/manifest.json',
  '/static/images/icon-192.png',
  '/static/images/icon-512.png',
  '/static/images/offline.svg',
  'https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css'
];

// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫—ç—à–∞
const MAX_DYNAMIC_CACHE_ITEMS = 100;
const MAX_PAGES_CACHE_ITEMS = 30;

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Service Worker
self.addEventListener('install', event => {
  console.log('üü¢ Service Worker: –£—Å—Ç–∞–Ω–æ–≤–∫–∞...');
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç–∞—Ä—ã—Ö –≤–∫–ª–∞–¥–æ–∫
  self.skipWaiting();
  
  event.waitUntil(
    // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    caches.open(STATIC_CACHE_NAME)
      .then(cache => {
        console.log('üîÑ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤');
        return cache.addAll(STATIC_ASSETS.map(url => new Request(url, {credentials: 'same-origin'})))
          .catch(error => {
            console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤:', error);
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return Promise.resolve();
          });
      })
  );
});

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è Service Worker
self.addEventListener('activate', event => {
  console.log('üü¢ Service Worker: –ê–∫—Ç–∏–≤–∞—Ü–∏—è...');
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
  event.waitUntil(self.clients.claim());
  
  // –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∫—ç—à–∏
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.filter(cacheName => {
          return (
            cacheName.startsWith('dental-academy-') && 
            !cacheName.endsWith('-v1.3')
          );
        }).map(cacheName => {
          console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞:', cacheName);
          return caches.delete(cacheName);
        })
      );
    })
  );
});

// –ü–µ—Ä–µ—Ö–≤–∞—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
self.addEventListener('fetch', event => {
  const requestUrl = new URL(event.request.url);
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã, –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –Ω–∞—à–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –∏–ª–∏ POST –∑–∞–ø—Ä–æ—Å—ã
  if (
    event.request.method !== 'GET' || 
    requestUrl.pathname.startsWith('/admin') ||
    requestUrl.pathname.startsWith('/api/auth') ||
    requestUrl.pathname.includes('/sw.js')
  ) {
    return;
  }

  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
  if (requestUrl.pathname.startsWith('/static/')) {
    // –î–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤: —Å–Ω–∞—á–∞–ª–∞ –∫—ç—à, –∑–∞—Ç–µ–º —Å–µ—Ç—å
    event.respondWith(cacheFirstStrategy(event.request, STATIC_CACHE_NAME));
  } 
  else if (requestUrl.pathname.startsWith('/api/')) {
    // –î–ª—è API: —Å–Ω–∞—á–∞–ª–∞ —Å–µ—Ç—å, –∑–∞—Ç–µ–º –∫—ç—à
    event.respondWith(networkFirstStrategy(event.request, API_CACHE_NAME));
  }
  else if (
    requestUrl.pathname.includes('/images/') || 
    requestUrl.pathname.includes('.jpg') || 
    requestUrl.pathname.includes('.png') || 
    requestUrl.pathname.includes('.svg') || 
    requestUrl.pathname.includes('.webp')
  ) {
    // –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: —Å–Ω–∞—á–∞–ª–∞ –∫—ç—à, –∑–∞—Ç–µ–º —Å–µ—Ç—å
    event.respondWith(cacheFirstStrategy(event.request, IMG_CACHE_NAME));
  }
  else {
    // –î–ª—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü: —Å–Ω–∞—á–∞–ª–∞ —Å–µ—Ç—å, –∑–∞—Ç–µ–º –∫—ç—à
    event.respondWith(networkFirstPageStrategy(event.request, PAGES_CACHE_NAME));
  }
});

// –°—Ç—Ä–∞—Ç–µ–≥–∏—è "–°–Ω–∞—á–∞–ª–∞ –∫—ç—à, –∑–∞—Ç–µ–º —Å–µ—Ç—å"
async function cacheFirstStrategy(request, cacheName) {
  const cachedResponse = await caches.match(request);
  
  if (cachedResponse) {
    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ (–±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è)
    updateCache(request, cacheName);
    return cachedResponse;
  }
  
  try {
    const networkResponse = await fetch(request);
    
    // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –∫—ç—à–µ
    if (networkResponse && networkResponse.status === 200) {
      const cache = await caches.open(cacheName);
      cache.put(request, networkResponse.clone());
    }
    
    return networkResponse;
  } catch (error) {
    console.log('‚ö†Ô∏è Fetch failed; returning offline page instead.', error);
    
    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –±—ã–ª –¥–ª—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ñ—Ñ–ª–∞–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if (request.headers.get('Accept').includes('text/html')) {
      return caches.match('/offline');
    }
    
    // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
    return new Response('', {
      status: 503,
      statusText: 'Service Unavailable'
    });
  }
}

// –°—Ç—Ä–∞—Ç–µ–≥–∏—è "–°–Ω–∞—á–∞–ª–∞ —Å–µ—Ç—å, –∑–∞—Ç–µ–º –∫—ç—à"
async function networkFirstStrategy(request, cacheName) {
  try {
    const networkResponse = await fetch(request);
    
    // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –∫—ç—à–µ
    if (networkResponse && networkResponse.status === 200) {
      const cache = await caches.open(cacheName);
      cache.put(request, networkResponse.clone());
    }
    
    return networkResponse;
  } catch (error) {
    console.log('‚ö†Ô∏è Network request failed, getting from cache.', error);
    
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      return cachedResponse;
    }
    
    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –±—ã–ª –¥–ª—è API –∏ –Ω–µ—Ç –∫—ç—à–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π JSON
    if (request.url.includes('/api/')) {
      return new Response(JSON.stringify({
        error: 'offline',
        message: 'You are currently offline'
      }), {
        status: 200,
        headers: {'Content-Type': 'application/json'}
      });
    }
    
    return new Response('', {
      status: 503,
      statusText: 'Service Unavailable'
    });
  }
}

// –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü
async function networkFirstPageStrategy(request, cacheName) {
  try {
    const networkResponse = await fetch(request);
    
    // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –∫—ç—à–µ
    if (networkResponse && networkResponse.status === 200) {
      const cache = await caches.open(cacheName);
      cache.put(request, networkResponse.clone());
      
      // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
      cleanupCache(cacheName, MAX_PAGES_CACHE_ITEMS);
    }
    
    return networkResponse;
  } catch (error) {
    console.log('‚ö†Ô∏è Network request failed for page, getting from cache.', error);
    
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      return cachedResponse;
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –∫—ç—à–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ñ—Ñ–ª–∞–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—É
    return caches.match('/offline');
  }
}

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
async function updateCache(request, cacheName) {
  try {
    const networkResponse = await fetch(request);
    
    if (networkResponse && networkResponse.status === 200) {
      const cache = await caches.open(cacheName);
      await cache.put(request, networkResponse);
      
      // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
      if (cacheName === DYNAMIC_CACHE_NAME) {
        cleanupCache(cacheName, MAX_DYNAMIC_CACHE_ITEMS);
      }
    }
  } catch (error) {
    console.log('‚ö†Ô∏è Background cache update failed:', error);
  }
}

// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞ (—É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π)
async function cleanupCache(cacheName, maxItems) {
  const cache = await caches.open(cacheName);
  const keys = await cache.keys();
  
  if (keys.length > maxItems) {
    console.log(`üßπ Cleaning up cache ${cacheName}, current size: ${keys.length}`);
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
    const itemsToDelete = keys.length - maxItems;
    for (let i = 0; i < itemsToDelete; i++) {
      await cache.delete(keys[i]);
    }
    
    console.log(`‚úÖ Removed ${itemsToDelete} old items from ${cacheName}`);
  }
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
self.addEventListener('sync', event => {
  console.log('üîÑ Background sync event:', event.tag);
  
  if (event.tag === 'sync-data') {
    event.waitUntil(syncData());
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
self.addEventListener('push', event => {
  console.log('üì¢ Push event received:', event);
  
  const notificationData = event.data.json();
  
  const notificationOptions = {
    body: notificationData.body || '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Dental Academy',
    icon: '/static/images/icon-192.png',
    badge: '/static/images/notification-badge.png',
    vibrate: [100, 50, 100],
    data: {
      url: notificationData.url || '/'
    }
  };
  
  event.waitUntil(
    self.registration.showNotification(
      notificationData.title || 'Dental Academy',
      notificationOptions
    )
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
self.addEventListener('notificationclick', event => {
  event.notification.close();
  
  event.waitUntil(
    clients.matchAll({type: 'window'}).then(clientList => {
      const url = event.notification.data.url;
      
      // –ï—Å–ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ –æ–∫–Ω–æ, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–µ–≥–æ
      for (const client of clientList) {
        if (client.url === url && 'focus' in client) {
          return client.focus();
        }
      }
      
      // –ò–Ω–∞—á–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
      if (clients.openWindow) {
        return clients.openWindow(url);
      }
    })
  );
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
async function syncData() {
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –æ—Ñ—Ñ–ª–∞–π–Ω-–¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–æ–º
  console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–æ–º...');
  
  // –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ - –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  try {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    return Promise.resolve();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    return Promise.reject(error);
  }
}

// –°–æ–æ–±—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–º—É –ø–æ—Ç–æ–∫—É, —á—Ç–æ Service Worker —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
self.clients.matchAll().then(clients => {
  clients.forEach(client => {
    client.postMessage({
      type: 'SW_INITIALIZED',
      message: 'Service Worker —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!'
    });
  });
});

console.log('‚úÖ Service Worker —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!'); 