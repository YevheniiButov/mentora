import unittest
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import TimeoutException, NoSuchElementException
import os

class TestAIWidgetsSelenium(unittest.TestCase):
    """
    Selenium —Ç–µ—Å—Ç—ã –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ò–ò –≤–∏–¥–∂–µ—Ç–æ–≤
    –¢—Ä–µ–±—É–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä Flask –Ω–∞ localhost:5000
    """
    
    @classmethod
    def setUpClass(cls):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Selenium WebDriver"""
        chrome_options = Options()
        chrome_options.add_argument('--headless')  # –ó–∞–ø—É—Å–∫ –±–µ–∑ GUI
        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-dev-shm-usage')
        chrome_options.add_argument('--window-size=1920,1080')
        
        try:
            cls.driver = webdriver.Chrome(options=chrome_options)
            cls.driver.implicitly_wait(10)
            cls.base_url = "http://localhost:5000"
        except Exception as e:
            print(f"‚ùå Could not initialize Chrome driver: {e}")
            print("üí° Please install ChromeDriver or run tests without Selenium")
            raise unittest.SkipTest("Selenium tests require ChromeDriver")
    
    @classmethod
    def tearDownClass(cls):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        if hasattr(cls, 'driver'):
            cls.driver.quit()
    
    def setUp(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.driver.get(f"{self.base_url}/en/")
    
    def login_user(self, email="test@example.com", password="testpass"):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ UI"""
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
            self.driver.get(f"{self.base_url}/en/auth/login")
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
            email_input = self.driver.find_element(By.NAME, "email")
            password_input = self.driver.find_element(By.NAME, "password")
            
            email_input.send_keys(email)
            password_input.send_keys(password)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
            submit_button = self.driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
            submit_button.click()
            
            # –ñ–¥–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
            WebDriverWait(self.driver, 10).until(
                lambda driver: "/en/" in driver.current_url
            )
            
            return True
        except Exception as e:
            print(f"Login failed: {e}")
            return False
    
    def test_widgets_not_visible_without_auth(self):
        """–¢–µ—Å—Ç —á—Ç–æ –≤–∏–¥–∂–µ—Ç—ã –Ω–µ –≤–∏–¥–Ω—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ AI –≤–∏–¥–∂–µ—Ç–æ–≤ –Ω–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            widgets = self.driver.find_elements(By.CLASS_NAME, "ai-widget")
            self.assertEqual(len(widgets), 0, "AI widgets should not be visible without authentication")
            
            print("‚úÖ Widgets hidden for unauthenticated users (Selenium)")
        except Exception as e:
            print(f"‚ùå Test failed: {e}")
            self.fail(f"Test failed: {e}")
    
    def test_widgets_visible_after_login(self):
        """–¢–µ—Å—Ç —á—Ç–æ –≤–∏–¥–∂–µ—Ç—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞"""
        # –õ–æ–≥–∏–Ω–∏–º—Å—è (–º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        if self.login_user():
            try:
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è AI —Å–µ–∫—Ü–∏–∏
                WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.CLASS_NAME, "ai-dashboard-section"))
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–∏–¥–∂–µ—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
                widgets = self.driver.find_elements(By.CLASS_NAME, "ai-widget")
                self.assertGreater(len(widgets), 0, "AI widgets should be visible after login")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã
                exam_widget = self.driver.find_element(By.ID, "examReadinessWidget")
                recommendations_widget = self.driver.find_element(By.ID, "recommendationsWidget")
                chat_widget = self.driver.find_element(By.ID, "miniChatWidget")
                analytics_widget = self.driver.find_element(By.ID, "progressAnalyticsWidget")
                
                self.assertTrue(exam_widget.is_displayed())
                self.assertTrue(recommendations_widget.is_displayed())
                self.assertTrue(chat_widget.is_displayed())
                self.assertTrue(analytics_widget.is_displayed())
                
                print("‚úÖ Widgets visible after login (Selenium)")
            except TimeoutException:
                print("‚ö†Ô∏è Widgets did not load (possibly no test user or server not running)")
            except Exception as e:
                print(f"‚ùå Test failed: {e}")
    
    def test_mini_chat_toggle_functionality(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è/—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –º–∏–Ω–∏-—á–∞—Ç–∞"""
        if self.login_user():
            try:
                # –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É toggle –º–∏–Ω–∏-—á–∞—Ç–∞
                chat_toggle = WebDriverWait(self.driver, 10).until(
                    EC.element_to_be_clickable((By.ID, "miniChatToggle"))
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —á–∞—Ç –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–≤–µ—Ä–Ω—É—Ç
                chat_body = self.driver.find_element(By.ID, "miniChatBody")
                self.assertFalse(chat_body.is_displayed(), "Mini chat should be initially collapsed")
                
                # –ö–ª–∏–∫–∞–µ–º —á—Ç–æ–±—ã —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å
                chat_toggle.click()
                time.sleep(0.5)  # –ñ–¥–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —á–∞—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É–ª—Å—è
                self.assertTrue(chat_body.is_displayed(), "Mini chat should be expanded after click")
                
                # –ö–ª–∏–∫–∞–µ–º —á—Ç–æ–±—ã —Å–≤–µ—Ä–Ω—É—Ç—å –æ–±—Ä–∞—Ç–Ω–æ
                chat_toggle.click()
                time.sleep(0.5)  # –ñ–¥–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —á–∞—Ç —Å–≤–µ—Ä–Ω—É–ª—Å—è
                self.assertFalse(chat_body.is_displayed(), "Mini chat should be collapsed after second click")
                
                print("‚úÖ Mini chat toggle works (Selenium)")
            except Exception as e:
                print(f"‚ö†Ô∏è Mini chat test failed: {e}")
    
    def test_mobile_responsive_layout(self):
        """–¢–µ—Å—Ç –º–æ–±–∏–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞"""
        if self.login_user():
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º desktop layout
                self.driver.set_window_size(1200, 800)
                time.sleep(1)
                
                # –ù–∞—Ö–æ–¥–∏–º –≤–∏–¥–∂–µ—Ç—ã
                widgets = self.driver.find_elements(By.CLASS_NAME, "ai-widget")
                if len(widgets) > 0:
                    desktop_height = widgets[0].size['height']
                    
                    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                    self.driver.set_window_size(375, 667)  # iPhone —Ä–∞–∑–º–µ—Ä
                    time.sleep(1)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–∏–¥–∂–µ—Ç—ã –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª–∏—Å—å
                    mobile_widgets = self.driver.find_elements(By.CLASS_NAME, "ai-widget")
                    if len(mobile_widgets) > 0:
                        mobile_height = mobile_widgets[0].size['height']
                        
                        # –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º–∏
                        print(f"Desktop widget height: {desktop_height}px")
                        print(f"Mobile widget height: {mobile_height}px")
                        
                        print("‚úÖ Mobile responsive layout works (Selenium)")
                    else:
                        print("‚ö†Ô∏è No widgets found in mobile view")
                else:
                    print("‚ö†Ô∏è No widgets found in desktop view")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è Mobile responsive test failed: {e}")
    
    def test_refresh_button_functionality(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –≤–∏–¥–∂–µ—Ç–µ —ç–∫–∑–∞–º–µ–Ω–∞"""
        if self.login_user():
            try:
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–∂–µ—Ç–∞ —ç–∫–∑–∞–º–µ–Ω–∞
                WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.ID, "examReadinessWidget"))
                )
                
                # –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                refresh_button = self.driver.find_element(
                    By.CSS_SELECTOR, 
                    "#examReadinessWidget .widget-actions button"
                )
                
                # –ö–ª–∏–∫–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                refresh_button.click()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—è–≤–∏–ª—Å—è loading state
                try:
                    loading_state = WebDriverWait(self.driver, 2).until(
                        EC.presence_of_element_located((By.CLASS_NAME, "loading-state"))
                    )
                    print("‚úÖ Refresh button triggers loading state (Selenium)")
                except TimeoutException:
                    print("‚ö†Ô∏è Loading state not detected after refresh")
                
            except Exception as e:
                print(f"‚ö†Ô∏è Refresh button test failed: {e}")
    
    def test_widget_loading_states(self):
        """–¢–µ—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–∂–µ—Ç–æ–≤"""
        if self.login_user():
            try:
                # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤
                WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((By.CLASS_NAME, "ai-widget"))
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å spinner'—ã –∏–ª–∏ loading —Å–æ—Å—Ç–æ—è–Ω–∏—è
                loading_spinners = self.driver.find_elements(By.CLASS_NAME, "spinner-border")
                loading_states = self.driver.find_elements(By.CLASS_NAME, "loading-state")
                
                if len(loading_spinners) > 0 or len(loading_states) > 0:
                    print("‚úÖ Loading states present in widgets (Selenium)")
                else:
                    print("‚ö†Ô∏è No loading states found (widgets may have loaded instantly)")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è Loading states test failed: {e}")
    
    def test_css_classes_applied(self):
        """–¢–µ—Å—Ç —á—Ç–æ CSS –∫–ª–∞—Å—Å—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã"""
        if self.login_user():
            try:
                # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–∂–µ—Ç–æ–≤
                widgets = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_all_elements_located((By.CLASS_NAME, "ai-widget"))
                )
                
                if len(widgets) > 0:
                    widget = widgets[0]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã
                    background_color = widget.value_of_css_property("background-color")
                    border_radius = widget.value_of_css_property("border-radius")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∏–ª–∏ –Ω–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
                    self.assertNotEqual(background_color, "rgba(0, 0, 0, 0)")
                    self.assertNotEqual(border_radius, "0px")
                    
                    print("‚úÖ CSS styles properly applied (Selenium)")
                else:
                    print("‚ö†Ô∏è No widgets found for CSS testing")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è CSS test failed: {e}")
    
    def test_javascript_errors(self):
        """–¢–µ—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è JavaScript –æ—à–∏–±–æ–∫"""
        if self.login_user():
            try:
                # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                time.sleep(3)
                
                # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –±—Ä–∞—É–∑–µ—Ä–∞
                logs = self.driver.get_log('browser')
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏ JavaScript
                js_errors = [log for log in logs if log['level'] == 'SEVERE']
                
                if len(js_errors) == 0:
                    print("‚úÖ No JavaScript errors detected (Selenium)")
                else:
                    print(f"‚ö†Ô∏è Found {len(js_errors)} JavaScript errors:")
                    for error in js_errors:
                        print(f"  - {error['message']}")
                        
            except Exception as e:
                print(f"‚ö†Ô∏è JavaScript error check failed: {e}")

if __name__ == '__main__':
    print("\nüß™ Starting Selenium tests for AI widgets...")
    print("üìã Prerequisites:")
    print("  1. Flask server running on localhost:5000")
    print("  2. ChromeDriver installed and in PATH")
    print("  3. Test user created in database")
    print("  4. AI endpoints properly configured\n")
    
    unittest.main(verbosity=2) 