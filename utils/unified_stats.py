"""
–ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
–£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ä–∞—Å—á–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
"""

from flask import current_app
from flask_login import current_user
from sqlalchemy import func
from datetime import datetime, timedelta
from models import db, UserProgress, Lesson, Module, Subject, LearningPath, UserStats
import logging

# –ö—ç—à –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
_stats_cache = {}

def clear_stats_cache(user_id=None):
    """–û—á–∏—â–∞–µ—Ç –∫—ç—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    global _stats_cache
    if user_id is None:
        _stats_cache.clear()
    else:
        _stats_cache.pop(user_id, None)

def get_unified_user_stats(user_id):
    """
    –ï–¥–∏–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if user_id in _stats_cache:
        return _stats_cache[user_id]
    
    try:
        current_app.logger.info(f"=== –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ===")
        
        # 1. –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
        completed_lessons_count = UserProgress.query.filter_by(
            user_id=user_id,
            completed=True
        ).count()
        
        # 2. –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤
        total_lessons_count = Lesson.query.count()
        
        # 3. –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        overall_progress = round((completed_lessons_count / total_lessons_count) * 100) if total_lessons_count > 0 else 0
        
        # 4. –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è (–≤ –º–∏–Ω—É—Ç–∞—Ö)
        total_time_spent = db.session.query(
            func.sum(UserProgress.time_spent)
        ).filter_by(
            user_id=user_id
        ).scalar() or 0
        
        # 5. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        active_days_count = db.session.query(
            func.count(func.distinct(func.date(UserProgress.last_accessed)))
        ).filter_by(
            user_id=user_id
        ).scalar() or 0
        
        # 6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—É—Ç—è–º –æ–±—É—á–µ–Ω–∏—è
        learning_paths_stats = []
        for path in LearningPath.query.all():
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Ä–æ–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏ –æ–±—É—á–µ–Ω–∏—è
            path_lessons = db.session.query(Lesson.id).join(
                Module, Module.id == Lesson.module_id
            ).join(
                Subject, Subject.id == Module.subject_id
            ).filter(
                Subject.learning_path_id == path.id
            ).all()
            
            path_lesson_ids = [lesson[0] for lesson in path_lessons]
            path_total_lessons = len(path_lesson_ids)
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø—É—Ç–∏
            path_completed_lessons = UserProgress.query.filter(
                UserProgress.user_id == user_id,
                UserProgress.lesson_id.in_(path_lesson_ids),
                UserProgress.completed == True
            ).count() if path_lesson_ids else 0
            
            # –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏
            path_progress = round((path_completed_lessons / path_total_lessons) * 100) if path_total_lessons > 0 else 0
            
            learning_paths_stats.append({
                'id': path.id,
                'name': path.name,
                'progress': path_progress,
                'completed_lessons': path_completed_lessons,
                'total_lessons': path_total_lessons
            })
        
        # 7. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        last_activity = db.session.query(
            func.max(UserProgress.last_accessed)
        ).filter_by(
            user_id=user_id
        ).scalar()
        
        # –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        today = datetime.now().date()
        today_lessons = UserProgress.query.filter(
            UserProgress.user_id == user_id,
            func.date(UserProgress.last_accessed) == today
        ).count()
        
        # –ù–µ–¥–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        week_ago = today - timedelta(days=7)
        weekly_lessons = UserProgress.query.filter(
            UserProgress.user_id == user_id,
            UserProgress.last_accessed >= week_ago
        ).count()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = {
            'overall_progress': overall_progress,
            'completed_lessons': completed_lessons_count,
            'total_lessons': total_lessons_count,
            'total_time_spent': round(float(total_time_spent), 1),
            'active_days': active_days_count,
            'learning_paths': learning_paths_stats,
            'last_activity': last_activity.isoformat() if last_activity else None,
            'today_lessons': today_lessons,
            'weekly_lessons': weekly_lessons,
            'level': min(completed_lessons_count // 10 + 1, 10),
            'experience_points': completed_lessons_count * 10,
            'next_level_progress': (completed_lessons_count % 10) * 10
        }
        
        current_app.logger.info(f"=== –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {stats} ===")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        _stats_cache[user_id] = stats
        
        return stats
        
    except Exception as e:
        current_app.logger.error(f"–û—à–∏–±–∫–∞ –≤ get_unified_user_stats: {str(e)}", exc_info=True)
        return {
            'overall_progress': 0,
            'completed_lessons': 0,
            'total_lessons': 0,
            'total_time_spent': 0,
            'active_days': 0,
            'learning_paths': [],
            'last_activity': None,
            'today_lessons': 0,
            'weekly_lessons': 0,
            'level': 1,
            'experience_points': 0,
            'next_level_progress': 0
        }

def track_lesson_progress(user_id, lesson_id, time_spent=None, completed=False):
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—Ä–æ–∫–∞
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —É—Ä–æ–∫–∞
    """
    print(f"üî• –í–´–ó–í–ê–ù–ê track_lesson_progress: user={user_id}, lesson={lesson_id}, time_spent={time_spent}, completed={completed}")
    current_app.logger.info(f"üî• –í–´–ó–í–ê–ù–ê track_lesson_progress: user={user_id}, lesson={lesson_id}, time_spent={time_spent}, completed={completed}")
    
    try:
        # –ù–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é
        progress = UserProgress.query.filter_by(
            user_id=user_id, 
            lesson_id=lesson_id
        ).first()
        
        print(f"üîç –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {progress}")
        
        if not progress:
            print(f"üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —É—Ä–æ–∫–∞ {lesson_id}")
            progress = UserProgress(
                user_id=user_id,
                lesson_id=lesson_id,
                completed=False,
                time_spent=0
            )
            db.session.add(progress)
        else:
            print(f"üìù –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {progress}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        progress.last_accessed = datetime.utcnow()
        print(f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ last_accessed: {progress.last_accessed}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è, –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
        if time_spent is not None:
            old_time = progress.time_spent or 0
            progress.time_spent = old_time + float(time_spent)
            print(f"‚è±Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ time_spent: {old_time} -> {progress.time_spent}")
        
        # –ï—Å–ª–∏ —É—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
        if completed:
            old_completed = progress.completed
            progress.completed = True
            print(f"‚úÖ –û—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π: {old_completed} -> {progress.completed}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î...")
        db.session.commit()
        print(f"‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î –¥–ª—è —É—Ä–æ–∫–∞ {lesson_id}")
        current_app.logger.info(f"‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î –¥–ª—è —É—Ä–æ–∫–∞ {lesson_id}")
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        clear_stats_cache(user_id)
        print(f"üóëÔ∏è –ö—ç—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–∏—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        return True
        
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå –û–®–ò–ë–ö–ê —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        current_app.logger.error(f"‚ùå –û–®–ò–ë–ö–ê –≤ track_lesson_progress: {str(e)}", exc_info=True)
        return False

def get_module_stats_unified(module_id, user_id):
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥—É–ª—è
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Ä–æ–∫–∏ –≤ –º–æ–¥—É–ª–µ
        lessons = Lesson.query.filter_by(module_id=module_id).with_entities(Lesson.id).all()
        lesson_ids = [lesson.id for lesson in lessons]
        total_lessons = len(lesson_ids)
        
        if total_lessons == 0:
            return {
                "progress": 0,
                "completed_lessons": 0,
                "total_lessons": 0
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
        completed_lessons = UserProgress.query.filter(
            UserProgress.user_id == user_id,
            UserProgress.lesson_id.in_(lesson_ids),
            UserProgress.completed == True
        ).count()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress = (completed_lessons / total_lessons) * 100 if total_lessons > 0 else 0
        
        return {
            "progress": round(progress),
            "completed_lessons": completed_lessons,
            "total_lessons": total_lessons
        }
        
    except Exception as e:
        current_app.logger.error(f"–û—à–∏–±–∫–∞ –≤ get_module_stats_unified: {str(e)}", exc_info=True)
        return {
            "progress": 0,
            "completed_lessons": 0,
            "total_lessons": 0
        }

def get_subject_stats_unified(subject_id, user_id):
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Ä–æ–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ —á–µ—Ä–µ–∑ JOIN
        subject_lessons = db.session.query(Lesson.id).join(
            Module, Module.id == Lesson.module_id
        ).filter(
            Module.subject_id == subject_id
        ).all()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ ID —É—Ä–æ–∫–æ–≤
        lesson_ids = [lesson[0] for lesson in subject_lessons]
        total_lessons = len(lesson_ids)
        
        if total_lessons == 0:
            return 0
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
        completed_lessons_count = UserProgress.query.filter(
            UserProgress.user_id == user_id,
            UserProgress.lesson_id.in_(lesson_ids),
            UserProgress.completed == True
        ).count()
        
        # –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        return round((completed_lessons_count / total_lessons) * 100) if total_lessons > 0 else 0
        
    except Exception as e:
        current_app.logger.error(f"–û—à–∏–±–∫–∞ –≤ get_subject_stats_unified: {str(e)}", exc_info=True)
        return 0

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
__all__ = [
    'get_unified_user_stats',
    'track_lesson_progress', 
    'get_module_stats_unified',
    'get_subject_stats_unified',
    'clear_stats_cache'
] 