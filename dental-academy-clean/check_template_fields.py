#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–µ–π –≤ —à–∞–±–ª–æ–Ω–∞—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
"""

import re
from pathlib import Path

def extract_template_fields(template_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –ø–æ–ª—è –∏–∑ —à–∞–±–ª–æ–Ω–∞"""
    try:
        with open(template_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ò—â–µ–º –≤—Å–µ –ø–æ–ª—è –≤–∏–¥–∞ {{ field.subfield }}
        field_pattern = r'\{\{\s*([^}]+)\s*\}\}'
        fields = re.findall(field_pattern, content)
        
        # –ò—â–µ–º –ø–æ–ª—è –≤ —É—Å–ª–æ–≤–∏—è—Ö {% if field.subfield %}
        if_pattern = r'\{%\s*if\s+([^%]+)\s*%\}'
        if_fields = re.findall(if_pattern, content)
        
        # –ò—â–µ–º –ø–æ–ª—è –≤ —Ü–∏–∫–ª–∞—Ö {% for item in collection %}
        for_pattern = r'\{%\s*for\s+\w+\s+in\s+([^%]+)\s*%\}'
        for_fields = re.findall(for_pattern, content)
        
        all_fields = set()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—è
        for field in fields:
            # –£–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏
            clean_field = re.sub(r'\s*\|\s*\w+.*', '', field)
            clean_field = re.sub(r'\s*\([^)]*\)', '', clean_field)
            all_fields.add(clean_field.strip())
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—è –≤ —É—Å–ª–æ–≤–∏—è—Ö
        for field in if_fields:
            clean_field = re.sub(r'\s*\|\s*\w+.*', '', field)
            clean_field = re.sub(r'\s*\([^)]*\)', '', clean_field)
            all_fields.add(clean_field.strip())
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—è –≤ —Ü–∏–∫–ª–∞—Ö
        for field in for_fields:
            clean_field = re.sub(r'\s*\|\s*\w+.*', '', field)
            clean_field = re.sub(r'\s*\([^)]*\)', '', clean_field)
            all_fields.add(clean_field.strip())
        
        return sorted(all_fields)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {template_path}: {e}")
        return []

def check_registration_visitor_fields():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—è –º–æ–¥–µ–ª–∏ RegistrationVisitor"""
    from models import RegistrationVisitor
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –º–æ–¥–µ–ª–∏
    columns = RegistrationVisitor.__table__.columns.keys()
    return sorted(columns)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –ü–û–õ–ï–ô –í –®–ê–ë–õ–û–ù–ê–• –ê–ù–ê–õ–ò–¢–ò–ö–ò")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è –º–æ–¥–µ–ª–∏ RegistrationVisitor
    print("üìä –ü–û–õ–Ø –ú–û–î–ï–õ–ò RegistrationVisitor:")
    print("-" * 30)
    model_fields = check_registration_visitor_fields()
    for field in model_fields:
        print(f"   ‚úÖ {field}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–±–ª–æ–Ω registration_analytics.html
    print("üìÑ –ü–û–õ–Ø –í registration_analytics.html:")
    print("-" * 35)
    template_fields = extract_template_fields("templates/admin/registration_analytics.html")
    for field in template_fields:
        print(f"   üìù {field}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–±–ª–æ–Ω monitoring_dashboard.html
    print("üìÑ –ü–û–õ–Ø –í monitoring_dashboard.html:")
    print("-" * 35)
    dashboard_fields = extract_template_fields("templates/admin/monitoring_dashboard.html")
    for field in dashboard_fields:
        print(f"   üìù {field}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –ø–æ–ª—è –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –º–æ–¥–µ–ª–∏
    print("‚ö†Ô∏è –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
    print("-" * 25)
    
    # –ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
    potential_issues = []
    
    for field in template_fields:
        if '.' in field:
            # –ü–æ–ª–µ –≤–∏–¥–∞ visitor.field
            if field.startswith('visitor.'):
                model_field = field.split('.')[1]
                if model_field not in model_fields:
                    potential_issues.append(f"‚ùå {field} - –ø–æ–ª–µ {model_field} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –º–æ–¥–µ–ª–∏")
            # –ü–æ–ª–µ –≤–∏–¥–∞ stats.field
            elif field.startswith('stats.'):
                stats_field = field.split('.')[1]
                if stats_field not in ['total_users', 'active_users', 'total_topics', 'total_messages']:
                    potential_issues.append(f"‚ùå {field} - –ø–æ–ª–µ {stats_field} –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å")
            # –ü–æ–ª–µ –≤–∏–¥–∞ registration_stats.field
            elif field.startswith('registration_stats.'):
                reg_field = field.split('.')[1]
                if reg_field not in ['total_visitors', 'completed_registrations', 'email_entries', 'name_entries']:
                    potential_issues.append(f"‚ùå {field} - –ø–æ–ª–µ {reg_field} –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å")
            # –ü–æ–ª–µ –≤–∏–¥–∞ latest_health.field
            elif field.startswith('latest_health.'):
                health_field = field.split('.')[1]
                if health_field not in ['status', 'created_at', 'details']:
                    potential_issues.append(f"‚ùå {field} - –ø–æ–ª–µ {health_field} –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å")
    
    if potential_issues:
        for issue in potential_issues:
            print(f"   {issue}")
    else:
        print("   ‚úÖ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    print()
    print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"   üìä –ü–æ–ª—è –º–æ–¥–µ–ª–∏: {len(model_fields)}")
    print(f"   üìÑ –ü–æ–ª—è –≤ registration_analytics: {len(template_fields)}")
    print(f"   üìÑ –ü–æ–ª—è –≤ monitoring_dashboard: {len(dashboard_fields)}")
    print(f"   ‚ö†Ô∏è –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º: {len(potential_issues)}")

if __name__ == "__main__":
    main()


