# routes/learning_map_routes.py

from flask import (
    Blueprint, render_template, request, session, redirect, url_for, g, flash, 
    jsonify, current_app
)
from flask_login import login_required, current_user
from extensions import db
from models import (
    VirtualPatientScenario, VirtualPatientAttempt, LearningPath, Subject, Module, Lesson, UserProgress, Test, UserExamDate, ContentCategory, ContentSubcategory, ContentTopic,
    User, Question, TestAttempt, QuestionCategory, DiagnosticSession
)
from translations import get_translation as t  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è get_translation
from sqlalchemy import func
import json
import os
import subprocess
from datetime import datetime
from utils.unified_stats import get_unified_user_stats, get_module_stats_unified, get_subject_stats_unified, clear_stats_cache

# –°–æ–∑–¥–∞–µ–º Blueprint –¥–ª—è –∫–∞—Ä—Ç—ã –æ–±—É—á–µ–Ω–∏—è
learning_map_bp = Blueprint(
    "learning_map_bp",
    __name__,
    url_prefix='/<string:lang>/learning-map',
    template_folder='../templates'
    )

# === –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –†–û–£–¢–ò–ù–ì–ê === #

# –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π Blueprint –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç
profession_map_bp = Blueprint(
    "profession_map_bp",
    __name__,
    url_prefix='/<string:lang>/leerkaart',
    template_folder='../templates'
)

@profession_map_bp.before_request
def load_profession_lang():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —è–∑—ã–∫–∞ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–æ—É—Ç–æ–≤"""
    lang = request.view_args.get('lang', DEFAULT_LANGUAGE)
    if lang not in SUPPORTED_LANGUAGES:
        lang = DEFAULT_LANGUAGE
    g.lang = lang
    session['lang'] = lang

@profession_map_bp.context_processor
def inject_lang_profession():
    """–î–æ–±–∞–≤–ª—è–µ—Ç lang –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–æ—É—Ç–æ–≤"""
    lang = getattr(g, 'lang', session.get('lang', DEFAULT_LANGUAGE))
    return dict(lang=lang)

# –ú–∞–ø–ø–∏–Ω–≥ –ø—Ä–æ—Ñ–µ—Å—Å–∏–π
PROFESSION_MAPPINGS = {
    'tandheelkunde': 'tandarts',
    'farmacie': 'apotheker', 
    'huisartsgeneeskunde': 'huisarts',
    'verpleegkunde': 'verpleegkundige'
}

PROFESSION_NAMES = {
    'tandheelkunde': 'ü¶∑ Tandheelkunde',
    'farmacie': 'üíä Farmacie',
    'huisartsgeneeskunde': 'ü©∫ Huisartsgeneeskunde', 
    'verpleegkunde': 'üë©‚Äç‚öïÔ∏è Verpleegkunde'
}

def get_pharmacy_learning_data(user_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–æ–≤"""
    
    # –§–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–∏–µ –ø—É—Ç–∏ –æ–±—É—á–µ–Ω–∏—è
    pharmacy_paths = [
        {
            'id': 1,
            'name': 'BIG-toets Voorbereiding',
            'description': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É —ç–∫–∑–∞–º–µ–Ω—É BIG –¥–ª—è —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–æ–≤',
            'icon': 'certificate',
            'order': 1,
            'is_active': True,
            'css_class': 'big-preparation',
            'url': '/learning-map/subject/101/tests'  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ—Å—Ç—ã
        },
        {
            'id': 2, 
            'name': 'Medicatiebegeleiding',
            'description': '–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–∑–Ω–æ–≥–æ –ª–µ—á–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤',
            'icon': 'pill',
            'order': 2,
            'is_active': True,
            'css_class': 'medication-guidance'
        },
        {
            'id': 3,
            'name': 'Farmacologie',
            'description': '–ò–∑—É—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤',
            'icon': 'flask',
            'order': 3,
            'is_active': True,
            'css_class': 'pharmacology'
        },
        {
            'id': 4,
            'name': 'Interacties & Contraindicaties',
            'description': '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –∏ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤',
            'icon': 'warning-triangle',
            'order': 4,
            'is_active': True,
            'css_class': 'interactions'
        },
        {
            'id': 5,
            'name': 'Dosering & Berekeningen',
            'description': '–î–æ–∑–∏—Ä–æ–≤–∫–∏ –∏ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã',
            'icon': 'calculator',
            'order': 5,
            'is_active': True,
            'css_class': 'dosage-calculations'
        },
        {
            'id': 6,
            'name': 'Pati√´ntcommunicatie',
            'description': '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è —Å –ø–∞—Ü–∏–µ–Ω—Ç–∞–º–∏ –≤ –∞–ø—Ç–µ–∫–µ',
            'icon': 'message-circle',
            'order': 6,
            'is_active': True,
            'css_class': 'patient-communication'
        },
        {
            'id': 7,
            'name': 'Wetgeving & Ethiek',
            'description': '–ó–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∏ —ç—Ç–∏–∫–∞ –≤ —Ñ–∞—Ä–º–∞—Ü–∏–∏',
            'icon': 'shield-check',
            'order': 7,
            'is_active': True,
            'css_class': 'legislation-ethics'
        }
    ]
    
    # –§–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –º–æ–¥—É–ª—è–º–∏
    pharmacy_subjects = []
    
    # BIG-toets Voorbereiding –ø—Ä–µ–¥–º–µ—Ç—ã
    big_subjects = [
        {
            'id': 101,
            'name': 'Algemene Farmacologie',
            'description': '–û—Å–Ω–æ–≤—ã —Ñ–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏–∏ –¥–ª—è BIG —ç–∫–∑–∞–º–µ–Ω–∞',
            'learning_path_id': 1,
            'progress': 45,
            'modules': [
                {'id': 1001, 'title': 'Farmacokinetiek Basis', 'progress': 60, 'total_lessons': 12, 'completed_lessons': 7},
                {'id': 1002, 'title': 'Farmacodynamiek', 'progress': 30, 'total_lessons': 10, 'completed_lessons': 3},
                {'id': 1003, 'title': 'Bijwerkingen Herkenning', 'progress': 45, 'total_lessons': 8, 'completed_lessons': 4}
            ]
        },
        {
            'id': 102,
            'name': 'Medicijnkennis BIG',
            'description': 'Medicijnen voor BIG toets',
            'learning_path_id': 1,
            'progress': 35,
            'modules': [
                {'id': 1004, 'title': 'Cardiovasculaire Geneesmiddelen', 'progress': 40, 'total_lessons': 15, 'completed_lessons': 6},
                {'id': 1005, 'title': 'Antibiotica & Infectieziekten', 'progress': 25, 'total_lessons': 12, 'completed_lessons': 3},
                {'id': 1006, 'title': 'Pijnstilling & Ontstekingsremmers', 'progress': 50, 'total_lessons': 10, 'completed_lessons': 5}
            ]
        }
    ]
    
    # Medicatiebegeleiding –ø—Ä–µ–¥–º–µ—Ç—ã
    medication_subjects = [
        {
            'id': 201,
            'name': 'Medicatiegeschiedenis',
            'description': '–ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏–µ–º–∞ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–≤',
            'learning_path_id': 2,
            'progress': 60,
            'modules': [
                {'id': 2001, 'title': 'Anamnese Technieken', 'progress': 70, 'total_lessons': 8, 'completed_lessons': 6},
                {'id': 2002, 'title': 'Medicatiereview', 'progress': 50, 'total_lessons': 10, 'completed_lessons': 5}
            ]
        },
        {
            'id': 202,
            'name': 'Therapietrouw',
            'description': '–ü—Ä–∏–≤–µ—Ä–∂–µ–Ω–Ω–æ—Å—Ç—å —Ç–µ—Ä–∞–ø–∏–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤',
            'learning_path_id': 2,
            'progress': 40,
            'modules': [
                {'id': 2003, 'title': 'Adherentie Assessment', 'progress': 35, 'total_lessons': 6, 'completed_lessons': 2},
                {'id': 2004, 'title': 'Motiverende Gespreksvoering', 'progress': 45, 'total_lessons': 8, 'completed_lessons': 4}
            ]
        }
    ]
    
    # Farmacologie –ø—Ä–µ–¥–º–µ—Ç—ã
    pharmacology_subjects = [
        {
            'id': 301,
            'name': 'Receptorfarmacologie',
            'description': '–†–µ—Ü–µ–ø—Ç–æ—Ä–Ω–∞—è —Ñ–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è',
            'learning_path_id': 3,
            'progress': 25,
            'modules': [
                {'id': 3001, 'title': 'G-prote√Øne Gekoppelde Receptoren', 'progress': 20, 'total_lessons': 12, 'completed_lessons': 2},
                {'id': 3002, 'title': 'Ionenkanalen', 'progress': 30, 'total_lessons': 10, 'completed_lessons': 3}
            ]
        }
    ]
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    pharmacy_subjects = big_subjects + medication_subjects + pharmacology_subjects
    
    return {
        'learning_paths': pharmacy_paths,
        'subjects': pharmacy_subjects
    }

def get_gp_learning_data(user_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –≤—Ä–∞—á–µ–π –æ–±—â–µ–π –ø—Ä–∞–∫—Ç–∏–∫–∏"""
    
    # –ü—É—Ç–∏ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –≤—Ä–∞—á–µ–π –æ–±—â–µ–π –ø—Ä–∞–∫—Ç–∏–∫–∏
    gp_paths = [
        {
            'id': 1,
            'name': 'BIG-toets Voorbereiding',
            'description': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É —ç–∫–∑–∞–º–µ–Ω—É BIG –¥–ª—è –≤—Ä–∞—á–µ–π',
            'icon': 'certificate',
            'order': 1,
            'is_active': True,
            'css_class': 'gp-big-preparation'
        },
        {
            'id': 2,
            'name': 'NHG Richtlijnen',
            'description': '–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã Nederlandse Huisartsen Genootschap',
            'icon': 'book-open',
            'order': 2,
            'is_active': True,
            'css_class': 'gp-nhg-guidelines'
        },
        {
            'id': 3,
            'name': 'Diagnostiek & Behandeling',
            'description': '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –ª–µ—á–µ–Ω–∏–µ –≤ –æ–±—â–µ–π –ø—Ä–∞–∫—Ç–∏–∫–µ',
            'icon': 'stethoscope',
            'order': 3,
            'is_active': True,
            'css_class': 'gp-diagnostics'
        },
        {
            'id': 4,
            'name': 'Verwijsprotocollen',
            'description': '–ü—Ä–æ—Ç–æ–∫–æ–ª—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º',
            'icon': 'arrow-right-circle',
            'order': 4,
            'is_active': True,
            'css_class': 'gp-referral-protocols'
        },
        {
            'id': 5,
            'name': 'Preventieve Zorg',
            'description': '–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –º–µ–¥–∏—Ü–∏–Ω–∞ –∏ —Å–∫—Ä–∏–Ω–∏–Ω–≥',
            'icon': 'shield-heart',
            'order': 5,
            'is_active': True,
            'css_class': 'gp-preventive-care'
        },
        {
            'id': 6,
            'name': 'Chronische Ziekten',
            'description': '–í–µ–¥–µ–Ω–∏–µ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π',
            'icon': 'calendar-heart',
            'order': 6,
            'is_active': True,
            'css_class': 'gp-chronic-diseases'
        },
        {
            'id': 7,
            'name': 'Acute Zorg',
            'description': '–ù–µ–æ—Ç–ª–æ–∂–Ω–∞—è –ø–æ–º–æ—â—å –≤ –æ–±—â–µ–π –ø—Ä–∞–∫—Ç–∏–∫–µ',
            'icon': 'activity',
            'order': 7,
            'is_active': True,
            'css_class': 'gp-acute-care'
        }
    ]
    
    # –ü—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –≤—Ä–∞—á–µ–π –æ–±—â–µ–π –ø—Ä–∞–∫—Ç–∏–∫–∏
    gp_subjects = [
        # BIG-toets Voorbereiding
        {
            'id': 401,
            'name': 'Interne Geneeskunde Basis',
            'description': '–û—Å–Ω–æ–≤—ã –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –º–µ–¥–∏—Ü–∏–Ω—ã –¥–ª—è BIG',
            'learning_path_id': 1,
            'progress': 55,
            'modules': [
                {'id': 4001, 'title': 'Cardiovasculaire Aandoeningen', 'progress': 65, 'total_lessons': 15, 'completed_lessons': 10},
                {'id': 4002, 'title': 'Respiratoire Ziekten', 'progress': 45, 'total_lessons': 12, 'completed_lessons': 5},
                {'id': 4003, 'title': 'Endocriene Stoornissen', 'progress': 55, 'total_lessons': 10, 'completed_lessons': 6}
            ]
        },
        {
            'id': 402,
            'name': 'Algemene Farmacologie GP',
            'description': '–§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è –¥–ª—è –≤—Ä–∞—á–∞ –æ–±—â–µ–π –ø—Ä–∞–∫—Ç–∏–∫–∏',
            'learning_path_id': 1,
            'progress': 40,
            'modules': [
                {'id': 4004, 'title': 'Antibiotica in de Huisartspraktijk', 'progress': 50, 'total_lessons': 8, 'completed_lessons': 4},
                {'id': 4005, 'title': 'Pijnstilling & NSAID', 'progress': 30, 'total_lessons': 10, 'completed_lessons': 3}
            ]
        },
        
        # NHG Richtlijnen
        {
            'id': 501,
            'name': 'NHG Standaarden Implementatie',
            'description': '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ NHG –≤ –ø—Ä–∞–∫—Ç–∏–∫–µ',
            'learning_path_id': 2,
            'progress': 70,
            'modules': [
                {'id': 5001, 'title': 'Diabetes Mellitus Type 2', 'progress': 80, 'total_lessons': 12, 'completed_lessons': 10},
                {'id': 5002, 'title': 'Hypertensie Richtlijn', 'progress': 60, 'total_lessons': 8, 'completed_lessons': 5}
            ]
        },
        
        # Diagnostiek & Behandeling
        {
            'id': 601,
            'name': 'Point-of-care Diagnostiek',
            'description': '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ –≤—Ä–∞—á–∞',
            'learning_path_id': 3,
            'progress': 30,
            'modules': [
                {'id': 6001, 'title': 'ECG Interpretatie', 'progress': 35, 'total_lessons': 15, 'completed_lessons': 5},
                {'id': 6002, 'title': 'Laboratorium Uitslagen', 'progress': 25, 'total_lessons': 10, 'completed_lessons': 3}
            ]
        }
    ]
    
    return {
        'learning_paths': gp_paths,
        'subjects': gp_subjects
    }

def get_nursing_learning_data(user_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –º–µ–¥—Å–µ—Å—Ç–µ—Ä"""
    
    # –ü—É—Ç–∏ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –º–µ–¥—Å–µ—Å—Ç–µ—Ä
    nursing_paths = [
        {
            'id': 1,
            'name': 'BIG-toets Voorbereiding',
            'description': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É —ç–∫–∑–∞–º–µ–Ω—É BIG –¥–ª—è –º–µ–¥—Å–µ—Å—Ç–µ—Ä',
            'icon': 'certificate',
            'order': 1,
            'is_active': True,
            'css_class': 'nursing-big-preparation'
        },
        {
            'id': 2,
            'name': 'SKV Accreditatie',
            'description': '–ê–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è Stichting Kwaliteitsregister V&V',
            'icon': 'award',
            'order': 2,
            'is_active': True,
            'css_class': 'nursing-skv-accreditation'
        },
        {
            'id': 3,
            'name': 'Pati√´ntenzorg & Veiligheid',
            'description': '–£—Ö–æ–¥ –∑–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞–º–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
            'icon': 'heart-pulse',
            'order': 3,
            'is_active': True,
            'css_class': 'nursing-patient-care'
        },
        {
            'id': 4,
            'name': 'Specialisaties (ICU, OK, etc.)',
            'description': '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Ö–æ–¥ –≤ —Ä–∞–∑–Ω—ã—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏—è—Ö',
            'icon': 'hospital',
            'order': 4,
            'is_active': True,
            'css_class': 'nursing-specializations'
        },
        {
            'id': 5,
            'name': 'Medicatie Toediening',
            'description': '–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤',
            'icon': 'syringe',
            'order': 5,
            'is_active': True,
            'css_class': 'nursing-medication'
        },
        {
            'id': 6,
            'name': 'Communicatie & Ethiek',
            'description': '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è —Å –ø–∞—Ü–∏–µ–Ω—Ç–∞–º–∏ –∏ —ç—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã',
            'icon': 'messages',
            'order': 6,
            'is_active': True,
            'css_class': 'nursing-communication'
        },
        {
            'id': 7,
            'name': 'Evidence Based Practice',
            'description': '–ù–∞—É—á–Ω–æ-–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è —Å–µ—Å—Ç—Ä–∏–Ω—Å–∫–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞',
            'icon': 'microscope',
            'order': 7,
            'is_active': True,
            'css_class': 'nursing-ebp'
        }
    ]
    
    # –ü—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –º–µ–¥—Å–µ—Å—Ç–µ—Ä
    nursing_subjects = [
        # BIG-toets Voorbereiding
        {
            'id': 701,
            'name': 'Anatomie & Fysiologie',
            'description': '–ê–Ω–∞—Ç–æ–º–∏—è –∏ —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—è –¥–ª—è –º–µ–¥—Å–µ—Å—Ç–µ—Ä',
            'learning_path_id': 1,
            'progress': 50,
            'modules': [
                {'id': 7001, 'title': 'Cardiovasculair Systeem', 'progress': 60, 'total_lessons': 12, 'completed_lessons': 7},
                {'id': 7002, 'title': 'Respiratoir Systeem', 'progress': 40, 'total_lessons': 10, 'completed_lessons': 4},
                {'id': 7003, 'title': 'Zenuwstelsel Basis', 'progress': 50, 'total_lessons': 15, 'completed_lessons': 8}
            ]
        },
        {
            'id': 702,
            'name': 'Farmacologie voor Verpleegkundigen',
            'description': '–§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è –≤ —Å–µ—Å—Ç—Ä–∏–Ω—Å–∫–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ',
            'learning_path_id': 1,
            'progress': 35,
            'modules': [
                {'id': 7004, 'title': 'Medicatie Berekeningen', 'progress': 45, 'total_lessons': 8, 'completed_lessons': 4},
                {'id': 7005, 'title': 'Bijwerkingen Monitoring', 'progress': 25, 'total_lessons': 10, 'completed_lessons': 3}
            ]
        },
        
        # SKV Accreditatie
        {
            'id': 801,
            'name': 'Kwaliteitsmanagement',
            'description': '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–æ–º –≤ —Å–µ—Å—Ç—Ä–∏–Ω—Å–∫–æ–º –¥–µ–ª–µ',
            'learning_path_id': 2,
            'progress': 65,
            'modules': [
                {'id': 8001, 'title': 'Kwaliteitsindicatoren', 'progress': 75, 'total_lessons': 6, 'completed_lessons': 5},
                {'id': 8002, 'title': 'Continue Verbetering', 'progress': 55, 'total_lessons': 8, 'completed_lessons': 4}
            ]
        },
        
        # Pati√´ntenzorg & Veiligheid
        {
            'id': 901,
            'name': 'Infectiepreventie',
            'description': '–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ –∏–Ω—Ñ–µ–∫—Ü–∏–π –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏—è—Ö',
            'learning_path_id': 3,
            'progress': 80,
            'modules': [
                {'id': 9001, 'title': 'Handhygi√´ne Protocollen', 'progress': 90, 'total_lessons': 5, 'completed_lessons': 5},
                {'id': 9002, 'title': 'Isolatiemaatregelen', 'progress': 70, 'total_lessons': 8, 'completed_lessons': 6}
            ]
        },
        {
            'id': 902,
            'name': 'Pati√´nt Veiligheid',
            'description': '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –≤ —Å–µ—Å—Ç—Ä–∏–Ω—Å–∫–æ–π –ø—Ä–∞–∫—Ç–∏–∫–µ',
            'learning_path_id': 3,
            'progress': 45,
            'modules': [
                {'id': 9003, 'title': 'Valpreventie', 'progress': 50, 'total_lessons': 6, 'completed_lessons': 3},
                {'id': 9004, 'title': 'Medicatie Veiligheid', 'progress': 40, 'total_lessons': 10, 'completed_lessons': 4}
            ]
        },
        
        # Specialisaties
        {
            'id': 1001,
            'name': 'Intensive Care Verpleegkunde',
            'description': '–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è –∏ —Ä–µ–∞–Ω–∏–º–∞—Ü–∏—è',
            'learning_path_id': 4,
            'progress': 25,
            'modules': [
                {'id': 10001, 'title': 'Monitoring & Observatie', 'progress': 30, 'total_lessons': 15, 'completed_lessons': 5},
                {'id': 10002, 'title': 'Beademing Ondersteuning', 'progress': 20, 'total_lessons': 12, 'completed_lessons': 2}
            ]
        }
    ]
    
    return {
        'learning_paths': nursing_paths,
        'subjects': nursing_subjects
    }

def get_dentistry_learning_data(user_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–æ–≤"""
    
    # –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—É—Ç–∏ –æ–±—É—á–µ–Ω–∏—è
    dentistry_paths = [
        {
            'id': 1,
            'name': 'BIG-toets Voorbereiding',
            'description': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É —ç–∫–∑–∞–º–µ–Ω—É BIG –¥–ª—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–æ–≤',
            'icon': 'certificate',
            'order': 1,
            'is_active': True,
            'css_class': 'dentistry-big-preparation'
        },
        {
            'id': 2,
            'name': 'Algemene Tandheelkunde',
            'description': '–û—Å–Ω–æ–≤—ã –æ–±—â–µ–π —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏',
            'icon': 'tooth',
            'order': 2,
            'is_active': True,
            'css_class': 'dentistry-general'
        },
        {
            'id': 3,
            'name': 'Endodontie',
            'description': '–≠–Ω–¥–æ–¥–æ–Ω—Ç–∏—á–µ—Å–∫–æ–µ –ª–µ—á–µ–Ω–∏–µ',
            'icon': 'medical-bag',
            'order': 3,
            'is_active': True,
            'css_class': 'dentistry-endodontics'
        },
        {
            'id': 4,
            'name': 'Parodontologie',
            'description': '–õ–µ—á–µ–Ω–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –ø–∞—Ä–æ–¥–æ–Ω—Ç–∞',
            'icon': 'shield-plus',
            'order': 4,
            'is_active': True,
            'css_class': 'dentistry-periodontology'
        },
        {
            'id': 5,
            'name': 'Orale Chirurgie',
            'description': '–•–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è',
            'icon': 'surgical-scalpel',
            'order': 5,
            'is_active': True,
            'css_class': 'dentistry-surgery'
        },
        {
            'id': 6,
            'name': 'Prothetiek',
            'description': '–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ',
            'icon': 'crown',
            'order': 6,
            'is_active': True,
            'css_class': 'dentistry-prosthetics'
        },
        {
            'id': 7,
            'name': 'Orthodontie',
            'description': '–û—Ä—Ç–æ–¥–æ–Ω—Ç–∏—á–µ—Å–∫–æ–µ –ª–µ—á–µ–Ω–∏–µ',
            'icon': 'braces',
            'order': 7,
            'is_active': True,
            'css_class': 'dentistry-orthodontics'
        }
    ]
    
    # –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    dentistry_subjects = [
        # BIG-toets Voorbereiding
        {
            'id': 1101,
            'name': 'Anatomie & Fysiologie',
            'description': '–ê–Ω–∞—Ç–æ–º–∏—è –≥–æ–ª–æ–≤—ã –∏ —à–µ–∏',
            'learning_path_id': 1,
            'progress': 65,
            'modules': [
                {'id': 11001, 'title': 'Anatomie van het Hoofd', 'progress': 80, 'total_lessons': 12, 'completed_lessons': 10},
                {'id': 11002, 'title': 'Fysiologie van Kauw- en Slikfunctie', 'progress': 50, 'total_lessons': 8, 'completed_lessons': 4},
                {'id': 11003, 'title': 'Zenuwstelsel in de Orofaciale Regio', 'progress': 65, 'total_lessons': 10, 'completed_lessons': 7}
            ]
        },
        {
            'id': 1102,
            'name': 'Pathologie',
            'description': '–ü–∞—Ç–æ–ª–æ–≥–∏—è –ø–æ–ª–æ—Å—Ç–∏ —Ä—Ç–∞',
            'learning_path_id': 1,
            'progress': 45,
            'modules': [
                {'id': 11004, 'title': 'Orale Pathologie', 'progress': 40, 'total_lessons': 15, 'completed_lessons': 6},
                {'id': 11005, 'title': 'Systemische Ziekten', 'progress': 50, 'total_lessons': 12, 'completed_lessons': 6}
            ]
        },
        
        # Algemene Tandheelkunde
        {
            'id': 1201,
            'name': 'Cariologie',
            'description': '–ö–∞—Ä–∏–µ—Å–æ–ª–æ–≥–∏—è –∏ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞',
            'learning_path_id': 2,
            'progress': 70,
            'modules': [
                {'id': 12001, 'title': 'Cariespreventie', 'progress': 85, 'total_lessons': 8, 'completed_lessons': 7},
                {'id': 12002, 'title': 'Fluoride Therapie', 'progress': 55, 'total_lessons': 6, 'completed_lessons': 3}
            ]
        },
        {
            'id': 1202,
            'name': 'Restauratieve Tandheelkunde',
            'description': '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è',
            'learning_path_id': 2,
            'progress': 55,
            'modules': [
                {'id': 12003, 'title': 'Composiet Restauraties', 'progress': 60, 'total_lessons': 10, 'completed_lessons': 6},
                {'id': 12004, 'title': 'Amalgaam en Alternatieve Vullingen', 'progress': 50, 'total_lessons': 8, 'completed_lessons': 4}
            ]
        },
        
        # Endodontie
        {
            'id': 1301,
            'name': 'Wortelkanaalbehandeling',
            'description': '–õ–µ—á–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤',
            'learning_path_id': 3,
            'progress': 40,
            'modules': [
                {'id': 13001, 'title': 'Pulpa Diagnostiek', 'progress': 45, 'total_lessons': 12, 'completed_lessons': 5},
                {'id': 13002, 'title': 'Endodontische Instrumenten', 'progress': 35, 'total_lessons': 10, 'completed_lessons': 4}
            ]
        }
    ]
    
    return {
        'learning_paths': dentistry_paths,
        'subjects': dentistry_subjects
    }

def get_profession_specific_data(profession, user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –æ–±—É—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"""
    
    if profession == 'farmacie':
        return get_pharmacy_learning_data(user_id)
    elif profession == 'tandheelkunde':
        return get_dentistry_learning_data(user_id)
    elif profession == 'huisartsgeneeskunde':
        return get_gp_learning_data(user_id)
    elif profession == 'verpleegkunde':
        return get_nursing_learning_data(user_id)
    else:
        # Fallback –Ω–∞ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        return get_dentistry_learning_data(user_id)

@profession_map_bp.route('/')
@login_required 
def profession_redirect(lang):
    """–ë–∞–∑–æ–≤—ã–π —Ä–æ—É—Ç - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not current_user.profession:
        flash('–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞—Ä—Ç–µ –æ–±—É—á–µ–Ω–∏—è', 'warning')
        return redirect(url_for('digid.complete_registration', lang=lang))
    
    # –ü–æ–ª—É—á–∞–µ–º URL –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
    profession_slug = None
    for slug, prof_code in PROFESSION_MAPPINGS.items():
        if prof_code == current_user.profession:
            profession_slug = slug
            break
    
    if profession_slug:
        return redirect(url_for('profession_map_bp.profession_learning_map', lang=lang, profession=profession_slug))
    else:
        # Fallback –Ω–∞ –æ–±—ã—á–Ω—É—é –∫–∞—Ä—Ç—É –æ–±—É—á–µ–Ω–∏—è
        return redirect(url_for('learning_map_bp.learning_map', lang=lang))

@profession_map_bp.route('/<string:profession>')
@login_required
def profession_learning_map(lang, profession):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—Ç—É –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏
    if profession not in PROFESSION_MAPPINGS:
        flash('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è', 'error')
        return redirect(url_for('profession_map_bp.profession_redirect', lang=lang))
    
    user_profession = current_user.profession
    requested_profession = PROFESSION_MAPPINGS[profession]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if user_profession != requested_profession:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–π—Ç–∏ –Ω–∞ —á—É–∂—É—é –∫–∞—Ä—Ç—É
        if request.args.get('readonly') == '1':
            # –†–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
            flash(f'–í—ã –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –∫–∞—Ä—Ç—É {PROFESSION_NAMES[profession]} –≤ —Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è', 'info')
            readonly_mode = True
        else:
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–≤–æ—é –∫–∞—Ä—Ç—É
            flash(f'–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞—Ä—Ç–µ {PROFESSION_NAMES[profession]}. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à—É –∫–∞—Ä—Ç—É.', 'warning')
            return redirect(url_for('profession_map_bp.profession_redirect', lang=lang))
    else:
        readonly_mode = False
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        profession_data = get_profession_specific_data(profession, current_user.id)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stats = get_unified_user_stats(current_user.id)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_categories = ContentCategory.query.order_by(ContentCategory.order).all()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–∞—Ä—Ç–µ –æ–±—É—á–µ–Ω–∏—è
        processed_categories = []
        for category in content_categories:
            subcategories = []
            for subcategory in category.subcategories.order_by(ContentSubcategory.order).all():
                topics = []
                for topic in subcategory.topics.order_by(ContentTopic.order).all():
                    lessons_count = Lesson.query.filter_by(topic_id=topic.id).count()
                    topics.append({
                        'id': topic.id,
                        'name': topic.name,
                        'slug': topic.slug,
                        'lessons_count': lessons_count,
                        'url': url_for('content_nav.view_topic', 
                                     lang=lang, 
                                     category_slug=category.slug,
                                     subcategory_slug=subcategory.slug,
                                     topic_slug=topic.slug)
                    })
                
                subcategories.append({
                    'id': subcategory.id,
                    'name': subcategory.name,
                    'slug': subcategory.slug,
                    'topics': topics,
                    'topics_count': len(topics),
                    'url': url_for('content_nav.view_subcategory',
                                 lang=lang,
                                 category_slug=category.slug,
                                 subcategory_slug=subcategory.slug)
                })
            
            category_data = {
                'id': category.id,
                'name': category.name,
                'slug': category.slug,
                'icon': category.icon or 'bi-book',
                'subcategories': subcategories,
                'subcategories_count': len(subcategories),
                'url': url_for('content_nav.view_category',
                             lang=lang,
                             category_slug=category.slug)
            }
            processed_categories.append(category_data)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç
        profession_context = {
            'profession_slug': profession,
            'profession_name': PROFESSION_NAMES[profession],
            'readonly_mode': readonly_mode,
            'user_profession': user_profession,
            'is_own_profession': user_profession == requested_profession
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        learning_state = get_user_learning_state(current_user.id)
        
        return render_template(
            "learning/subject_view.html",
            title=f'Leerkaart - {PROFESSION_NAMES[profession]}',
            learning_paths=profession_data['learning_paths'],
            current_path=profession_data['learning_paths'][0] if profession_data['learning_paths'] else None,
            subjects=profession_data['subjects'],
            selected_subject=None,
            user=current_user,
            has_subscription=current_user.has_subscription,
            stats=stats,
            recommendations=get_user_recommendations(current_user.id),
            content_categories=processed_categories,
            content_categories_for_hierarchy=processed_categories,  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            profession_context=profession_context,
            learning_state=learning_state
        )
    except Exception as e:
        import traceback
        traceback.print_exc()
        flash("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ä—Ç—ã –æ–±—É—á–µ–Ω–∏—è: " + str(e), "danger")
        return redirect(url_for('index', lang=lang))

# --- –Ø–∑—ã–∫–æ–≤—ã–µ –∏ –∑–∞—â–∏—Ç–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
SUPPORTED_LANGUAGES = ['en', 'ru', 'nl', 'uk', 'es', 'pt', 'tr', 'fa', 'ar']
DEFAULT_LANGUAGE = 'en'

@learning_map_bp.before_request
def before_request_learning_map():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –∫ learning_map"""
    # –û—á–∏—â–∞–µ–º –∫—ç—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    if hasattr(current_user, 'id') and current_user.is_authenticated:
        clear_user_stats_cache(current_user.id)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —è–∑—ã–∫ –∏–∑ URL
    lang_from_url = request.view_args.get('lang') if request.view_args else None

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞ –≤ g
    if lang_from_url and lang_from_url in SUPPORTED_LANGUAGES:
        g.lang = lang_from_url
    else:
        # –ï—Å–ª–∏ –≤ URL –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞, –±–µ—Ä–µ–º –∏–∑ —Å–µ—Å—Å–∏–∏ –∏–ª–∏ accept_languages
        g.lang = session.get('lang') \
                 or request.accept_languages.best_match(SUPPORTED_LANGUAGES) \
                 or DEFAULT_LANGUAGE

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ —è–∑—ã–∫ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
    if session.get('lang') != g.lang:
        session['lang'] = g.lang

@learning_map_bp.context_processor
def inject_lang_learning_map():
    """–î–æ–±–∞–≤–ª—è–µ—Ç lang –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–æ–≤ —ç—Ç–æ–≥–æ –±–ª—é–ø—Ä–∏–Ω—Ç–∞."""
    lang = getattr(g, 'lang', session.get('lang', DEFAULT_LANGUAGE))
    return dict(lang=lang)

@learning_map_bp.route("/check-categories")
@login_required
def check_categories(lang):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
    try:
        from models import ContentCategory, ContentSubcategory, ContentTopic
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = ContentCategory.query.all()
        
        output = "<h1>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π</h1>"
        
        if not categories:
            output += "<p style='color:red'>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...</p>"
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            cat = ContentCategory(
                name="–ê–Ω–∞—Ç–æ–º–∏—è –∑—É–±–∞",
                slug="tooth-anatomy",
                icon="bi-book",
                order=1
            )
            db.session.add(cat)
            db.session.flush()
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
            subcat = ContentSubcategory(
                name="–°—Ç—Ä–æ–µ–Ω–∏–µ –∑—É–±–∞",
                slug="tooth-structure",
                category_id=cat.id,
                icon="bi-diagram-3",
                order=1
            )
            db.session.add(subcat)
            db.session.flush()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–º—É
            topic = ContentTopic(
                name="–ö–æ—Ä–æ–Ω–∫–∞ –∑—É–±–∞",
                slug="tooth-crown",
                subcategory_id=subcat.id,
                description="–°—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ—Ä–æ–Ω–∫–∏ –∑—É–±–∞",
                order=1
            )
            db.session.add(topic)
            db.session.commit()
            
            output += "<p style='color:green'>–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!</p>"
        else:
            output += f"<p>–ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}</p>"
            
            for cat in categories:
                output += f"<h2>{cat.name} (ID: {cat.id})</h2>"
                subcats = cat.subcategories.all() if hasattr(cat.subcategories, 'all') else []
                output += f"<p>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(subcats)}</p>"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        check_cat = ContentCategory.query.first()
        if check_cat:
            output += f"<h3>–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:</h3>"
            output += f"<p>ID: {check_cat.id}, –ù–∞–∑–≤–∞–Ω–∏–µ: {check_cat.name}</p>"
        
        return output
    except Exception as e:
        return f"<h1>–û—à–∏–±–∫–∞</h1><p>{str(e)}</p><p>–¢–∏–ø: {type(e).__name__}</p>"

# --- –ú–∞—Ä—à—Ä—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –æ–±—É—á–µ–Ω–∏—è (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π) ---
@learning_map_bp.route("/")
@learning_map_bp.route("/<int:path_id>")
@login_required
def learning_map(lang, path_id=None):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–∞—Ä—Ç—É –æ–±—É—á–µ–Ω–∏—è."""
    current_lang = g.lang
    
    try:
        # –î–æ–±–∞–≤—å—Ç–µ —è–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç ContentCategory
        from models import ContentCategory
        
        # –î–æ–±–∞–≤—å—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        content_categories = ContentCategory.query.order_by(ContentCategory.order).all()
        print(f"DEBUG: –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(content_categories)}")

        for cat in content_categories:
            print(f"DEBUG: –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat.name}, –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {cat.subcategories.count()}")
            for subcat in cat.subcategories.all():
                print(f"DEBUG:   –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcat.name}, —Ç–µ–º: {subcat.topics.count()}")
                for topic in subcat.topics.all():
                    print(f"DEBUG:     –¢–µ–º–∞: {topic.name}")
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—É—Ç–∏ –æ–±—É—á–µ–Ω–∏—è
        learning_paths = LearningPath.query.filter_by(is_active=True).order_by(LearningPath.order).all()
        for path in learning_paths:
            if path.id == 6:  # Virtual Patients
                vp_stats = get_virtual_patients_stats(current_user.id)
                path.vp_stats = vp_stats        
        # –ï—Å–ª–∏ path_id –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –ø—É—Ç—å
        if path_id is None and learning_paths:
            path_id = learning_paths[0].id
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π –ø—É—Ç—å
        current_path = LearningPath.query.get_or_404(path_id) if path_id else None
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–æ–π –º–æ–¥—É–ª–µ–π
        all_subjects = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∏ –∏—Ö –º–æ–¥—É–ª–∏
        subjects_query = Subject.query.all()
        for subject in subjects_query:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
            modules = Module.query.filter_by(subject_id=subject.id).order_by(Module.order).all()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –º–æ–¥—É–ª—å
            processed_modules = []
            total_progress = 0
            
            for module in modules:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥—É–ª—è
                module_stats = get_module_stats_unified(module.id, current_user.id)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª—å —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
                processed_modules.append({
                    'id': module.id,
                    'title': module.title,
                    'description': module.description if hasattr(module, 'description') else '',
                    'is_premium': module.is_premium if hasattr(module, 'is_premium') else False,
                    'is_final_test': module.is_final_test if hasattr(module, 'is_final_test') else False,
                    'icon': module.icon if hasattr(module, 'icon') else 'file-earmark-text',
                    'progress': module_stats['progress'],
                    'completed_lessons': module_stats['completed_lessons'],
                    'total_lessons': module_stats['total_lessons']
                })
                
                total_progress += module_stats['progress']
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–µ–¥–º–µ—Ç–∞
            subject_progress = round(total_progress / len(modules)) if modules else 0
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–µ–¥–º–µ—Ç–µ
            subject_data = {
                'id': subject.id,
                'name': subject.name,
                'description': subject.description if hasattr(subject, 'description') else '',
                'icon': subject.icon if hasattr(subject, 'icon') else 'folder2-open',
                'learning_path_id': subject.learning_path_id,
                'progress': subject_progress,
                'modules': processed_modules
            }
            
            all_subjects.append(subject_data)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stats = get_unified_user_stats(current_user.id)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ —Ç–µ–º–∞–º–∏
        content_categories = ContentCategory.query.order_by(ContentCategory.order).all()
        print(f"üîç DEBUG: –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ë–î: {len(content_categories)}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–∞—Ä—Ç–µ –æ–±—É—á–µ–Ω–∏—è
        processed_categories = []
        for category in content_categories:
            subcategories = []
            for subcategory in category.subcategories.order_by(ContentSubcategory.order).all():
                topics = []
                for topic in subcategory.topics.order_by(ContentTopic.order).all():
                    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–∫–∏ –¥–ª—è —Ç–µ–º—ã
                    lessons_count = Lesson.query.filter_by(topic_id=topic.id).count()
                    topics.append({
                        'id': topic.id,
                        'name': topic.name,
                        'slug': topic.slug,
                        'lessons_count': lessons_count,
                        'url': url_for('content_nav.view_topic', 
                                     lang=lang, 
                                     category_slug=category.slug,
                                     subcategory_slug=subcategory.slug,
                                     topic_slug=topic.slug)
                    })
                
                subcategories.append({
                    'id': subcategory.id,
                    'name': subcategory.name,
                    'slug': subcategory.slug,
                    'topics': topics,
                    'topics_count': len(topics),
                    'url': url_for('content_nav.view_subcategory',
                                 lang=lang,
                                 category_slug=category.slug,
                                 subcategory_slug=subcategory.slug)
                })
            
            category_data = {
                'id': category.id,
                'name': category.name,
                'slug': category.slug,
                'icon': category.icon or 'bi-book',
                'subcategories': subcategories,
                'subcategories_count': len(subcategories),
                'url': url_for('content_nav.view_category',
                             lang=lang,
                             category_slug=category.slug)
            }
            processed_categories.append(category_data)
            print(f"‚úÖ DEBUG: –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è ID={category.id}, name='{category.name}', –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π={len(subcategories)}")

        
        return render_template(
                    "learning/subject_view.html",  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å map.html –Ω–∞ subject_view.html
                    title='Learning Map',
                    learning_paths=learning_paths,
                    current_path=current_path,
                    subjects=all_subjects,
                    selected_subject=None,  # –î–æ–±–∞–≤–ª–µ–Ω —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä
                    user=current_user,
                    has_subscription=current_user.has_subscription,
                    stats=stats,
                    recommendations=get_user_recommendations(current_user.id),  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    content_categories=processed_categories

        )
    except Exception as e:
        import traceback
        traceback.print_exc()
        flash("An error occurred while loading the learning map: " + str(e), "danger")
        return redirect(url_for('index', lang=current_lang))

# --- –ù–û–í–´–ô API-–º–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–¥—É–ª—è ---
@learning_map_bp.route("/api/start-module/<int:module_id>")
@login_required
def start_module(lang, module_id):
    """–ù–∞—á–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –º–æ–¥—É–ª—è —á–µ—Ä–µ–∑ API"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥—É–ª—å
        module = Module.query.get_or_404(module_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if module.is_premium and not current_user.has_subscription:
            return jsonify({
                'success': False, 
                'message': 'This module is only available to premium subscribers'
            }), 403
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ –∏–ª–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —É—Ä–æ–∫
        lessons = Lesson.query.filter_by(module_id=module.id).order_by(Lesson.order).all()
        lesson = lessons[0] if lessons else None
        
        if lesson:
            redirect_url = url_for('lesson_bp.lesson_view', 
                                   lang=g.lang, 
                                   module_id=module.id, 
                                   lesson_index=0)
            return jsonify({
                'success': True,
                'redirect_url': redirect_url
            })
        else:
            return jsonify({
                'success': False, 
                'message': 'No lessons found in this module'
            }), 404
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

@learning_map_bp.route("/manage-test-data")
@login_required
def manage_test_data(lang):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —è–≤–Ω–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞
        from models import ContentCategory, ContentSubcategory, ContentTopic
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        categories = ContentCategory.query.all()
        subcategories = ContentSubcategory.query.all()
        topics = ContentTopic.query.all()
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ
        if not categories:
            category = ContentCategory(
                name="–ê–Ω–∞—Ç–æ–º–∏—è –∑—É–±–∞",
                slug="dental-anatomy",
                icon="bi-book",
                order=1
            )
            db.session.add(category)
            db.session.flush()
            
            flash("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: –ê–Ω–∞—Ç–æ–º–∏—è –∑—É–±–∞", "success")
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category = categories[0]
            flash(f"‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}", "info")
        
        if not subcategories:
            subcategory = ContentSubcategory(
                name="–°—Ç—Ä–æ–µ–Ω–∏–µ –∑—É–±–∞",
                slug="tooth-structure",
                category_id=category.id,
                icon="bi-diagram-3",
                order=1
            )
            db.session.add(subcategory)
            db.session.flush()
            
            flash("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: –°—Ç—Ä–æ–µ–Ω–∏–µ –∑—É–±–∞", "success")
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
            subcategory = subcategories[0]
            flash(f"‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcategory.name}", "info")
        
        if not topics:
            topic = ContentTopic(
                name="–ö–æ—Ä–æ–Ω–∫–∞ –∑—É–±–∞",
                slug="tooth-crown",
                subcategory_id=subcategory.id,
                description="–ò–∑—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–µ–Ω–∏—è –∫–æ—Ä–æ–Ω–∫–∏ –∑—É–±–∞",
                order=1
            )
            db.session.add(topic)
            db.session.flush()
            
            flash("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ–º–∞: –ö–æ—Ä–æ–Ω–∫–∞ –∑—É–±–∞", "success")
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–µ–º—É
            topic = topics[0]
            flash(f"‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–∞ —Ç–µ–º–∞: {topic.name}", "info")
        
        # –°–æ–∑–¥–∞–µ–º —É—Ä–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —Ç–µ–º–æ–π
        modules = Module.query.all()
        if modules:
            module = modules[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —É—Ä–æ–∫–∏ –≤ —ç—Ç–æ–π —Ç–µ–º–µ
            existing_lesson = Lesson.query.filter_by(content_topic_id=topic.id).first()
            
            if not existing_lesson:
                lesson = Lesson(
                    title=f"–£—Ä–æ–∫ –ø–æ —Ç–µ–º–µ {topic.name}",
                    module_id=module.id,
                    content_type="learning_card",
                    content_topic_id=topic.id,
                    order=1,
                    content=json.dumps({
                        "cards": [
                            {"title": "–í–≤–µ–¥–µ–Ω–∏–µ", "content": "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ä—Ç–æ—á–∫–∏"}
                        ]
                    })
                )
                db.session.add(lesson)
                
                flash(f"‚úÖ –°–æ–∑–¥–∞–Ω —É—Ä–æ–∫ –¥–ª—è —Ç–µ–º—ã: {topic.name}", "success")
            else:
                flash(f"‚ÑπÔ∏è –£—Ä–æ–∫ –¥–ª—è —Ç–µ–º—ã {topic.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "info")
        else:
            flash("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–æ–¥—É–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞", "warning")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.session.commit()
        
        # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        report = {
            "categories_count": len(categories),
            "categories": [{"id": c.id, "name": c.name, "subcategories_count": c.subcategories.count() if hasattr(c.subcategories, 'count') else '?'} for c in categories],
            "subcategories_count": len(subcategories),
            "subcategories": [{"id": s.id, "name": s.name, "category_id": s.category_id, "topics_count": s.topics.count() if hasattr(s.topics, 'count') else '?'} for s in subcategories],
            "topics_count": len(topics),
            "topics": [{"id": t.id, "name": t.name, "subcategory_id": t.subcategory_id} for t in topics],
        }
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ—Ç—á–µ—Ç–æ–º –æ –¥–∞–Ω–Ω—ã—Ö
        return render_template(
            "diagnostic.html",  # –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Å—Ç–æ–π —à–∞–±–ª–æ–Ω –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            title="–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
            report=report
        )
    except Exception as e:
        db.session.rollback()
        flash(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", "danger")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ
        return render_template(
            "diagnostic.html",
            title="–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
            error=str(e),
            error_type=type(e).__name__
        )

# --- –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Ä—à—Ä—É—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
@learning_map_bp.route("/start-module/<int:module_id>")
@login_required
def start_module_redirect(lang, module_id):
    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–æ–¥—É–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥—É–ª—å
        module = Module.query.get_or_404(module_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if module.is_premium and not current_user.has_subscription:
            flash('This module is only available to premium subscribers', 'warning')
            return redirect(url_for('learning_map_bp.learning_map', lang=g.lang))

        # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
        if module.is_final_test:
            subject = Subject.query.get(module.subject_id)
            return redirect(url_for('tests.start_final_test', lang=g.lang, subject_id=subject.id))
            
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–æ–¥—É–ª—è
        return redirect(url_for('modules_bp.module_view', lang=g.lang, module_id=module.id))
    except Exception as e:
        import traceback
        traceback.print_exc()
        flash(f'Error starting module: {str(e)}', 'danger')
        return redirect(url_for('learning_map_bp.learning_map', lang=g.lang))

# --- API-—ç–Ω–¥–ø–æ–∏–Ω—Ç ---
@learning_map_bp.route("/api/data/<int:path_id>")
@login_required
def get_learning_map_data(lang, path_id):
    """API-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã –æ–±—É—á–µ–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π –ø—É—Ç—å –æ–±—É—á–µ–Ω–∏—è
        learning_path = LearningPath.query.get_or_404(path_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        result = {
            "path": {
                "id": learning_path.id,
                "name": learning_path.name,
                "description": learning_path.description
            },
            "subjects": []
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø—É—Ç–∏
        subjects = Subject.query.filter_by(learning_path_id=path_id).order_by(subject.order).all()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ
        for subject in subjects:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–µ–¥–º–µ—Ç–∞
            subject_progress = calculate_subject_progress(subject.id, current_user.id)
            
            subject_data = {
                "id": subject.id,
                "name": subject.name,
                "description": subject.description,
                "icon": subject.icon,
                "progress": subject_progress,
                "modules": []
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥—É–ª–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞
            modules = Module.query.filter_by(subject_id=subject.id).order_by(Module.order).all()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –º–æ–¥—É–ª–µ
            for module in modules:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –º–æ–¥—É–ª—è
                module_stats = get_module_stats_unified(module.id, current_user.id)
                
                module_data = {
                    "id": module.id,
                    "title": module.title,
                    "description": module.description,
                    "icon": module.icon,
                    "order": module.order,
                    "is_premium": module.is_premium,
                    "is_final_test": module.is_final_test,
                    "progress": module_stats["progress"],
                    "completed_lessons": module_stats["completed_lessons"],
                    "total_lessons": module_stats["total_lessons"]
                }
                
                subject_data["modules"].append(module_data)
            
            result["subjects"].append(subject_data)
        
        return jsonify(result)
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        current_app.logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ API: {str(e)}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –≤ –æ—Ç–≤–µ—Ç–µ
        return jsonify({
            "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            "details": str(e),
            "type": type(e).__name__
        }), 500


# –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
def calculate_subject_progress(subject_id, user_id):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    return get_subject_stats_unified(subject_id, user_id)

def get_user_recommendations(user_id, limit=3):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª, –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª
        in_progress_lesson_ids = db.session.query(UserProgress.lesson_id).filter(
            UserProgress.user_id == user_id,
            UserProgress.completed == False
        ).all()
        in_progress_lesson_ids = [lesson_id[0] for lesson_id in in_progress_lesson_ids]
        
        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥—É–ª–∏ –¥–ª—è —ç—Ç–∏—Ö —É—Ä–æ–∫–æ–≤
        in_progress_modules = []
        
        if in_progress_lesson_ids:
            in_progress_modules = db.session.query(
                Module, Lesson, Subject.name.label('subject_name')
            ).join(
                Lesson, Lesson.module_id == Module.id
            ).join(
                Subject, Subject.id == Module.subject_id
            ).filter(
                Lesson.id.in_(in_progress_lesson_ids)
            ).group_by(Module.id).limit(limit).all()
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –≤ –ø–æ—Ä—è–¥–∫–µ
        if len(in_progress_modules) < limit:
            # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥—É–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª
            remaining_limit = limit - len(in_progress_modules)
            
            completed_module_ids = db.session.query(Module.id).join(
                Lesson, Lesson.module_id == Module.id
            ).join(
                UserProgress, UserProgress.lesson_id == Lesson.id
            ).filter(
                UserProgress.user_id == user_id,
                UserProgress.completed == True
            ).group_by(Module.id).having(
                db.func.count(Lesson.id) == db.func.count(UserProgress.id)
            ).all()
            
            completed_module_ids = [module_id[0] for module_id in completed_module_ids]
            
            # –ò—Å–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
            in_progress_module_ids = [module[0].id for module in in_progress_modules]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö ID
            exclude_ids = completed_module_ids + in_progress_module_ids
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –º–æ–¥—É–ª–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            next_modules_query = db.session.query(
                Module, Subject.name.label('subject_name')
            ).join(
                Subject, Subject.id == Module.subject_id
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –∏—Å–∫–ª—é—á–∞—Ç—å
            if exclude_ids:
                next_modules_query = next_modules_query.filter(
                    ~Module.id.in_(exclude_ids)
                )
            
            next_modules = next_modules_query.order_by(
                Module.id
            ).limit(remaining_limit).all()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            next_modules_formatted = [
                {
                    'module_id': module.id,
                    'title': module.title, 
                    'icon': module.icon if hasattr(module, 'icon') else 'journal-text',
                    'subject_name': subject_name
                } for module, subject_name in next_modules
            ]
        else:
            next_modules_formatted = []
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥—É–ª–µ–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
        in_progress_formatted = [
            {
                'module_id': module.id,
                'title': module.title, 
                'icon': module.icon if hasattr(module, 'icon') else 'journal-text',
                'subject_name': subject_name
            } for module, lesson, subject_name in in_progress_modules
        ]
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        recommendations = in_progress_formatted + next_modules_formatted
        
        return recommendations[:limit]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        
    except Exception as e:
        current_app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}", exc_info=True)
        return []
    
def get_module_stats(module_id, user_id):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    return get_module_stats_unified(module_id, user_id)

# –ü—Ä–æ—Å—Ç–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è get_user_stats
_user_stats_cache = {}

def clear_user_stats_cache(user_id=None):
    """–û—á–∏—â–∞–µ—Ç –∫—ç—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    global _user_stats_cache
    if user_id is None:
        _user_stats_cache.clear()
    else:
        _user_stats_cache.pop(user_id, None)

def get_user_stats(user_id):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    return get_unified_user_stats(user_id)

def get_virtual_patients_stats(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        total_scenarios = VirtualPatientScenario.query.filter_by(is_published=True).count()
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        completed_scenarios = db.session.query(VirtualPatientAttempt.scenario_id).filter_by(
            user_id=user_id,
            completed=True
        ).distinct().count()
        
        # –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
        avg_score_data = db.session.query(
            db.func.avg(VirtualPatientAttempt.score).label('avg_score'),
            db.func.avg(VirtualPatientScenario.max_score).label('avg_max_score')
        ).join(
            VirtualPatientScenario,
            VirtualPatientAttempt.scenario_id == VirtualPatientScenario.id
        ).filter(
            VirtualPatientAttempt.user_id == user_id,
            VirtualPatientAttempt.completed == True
        ).first()
        
        avg_percentage = 0
        if avg_score_data and avg_score_data.avg_score and avg_score_data.avg_max_score:
            avg_percentage = round((avg_score_data.avg_score / avg_score_data.avg_max_score) * 100)
        
        return {
            'total': total_scenarios,
            'completed': completed_scenarios,
            'percentage': round((completed_scenarios / total_scenarios * 100) if total_scenarios > 0 else 0),
            'avg_score': avg_percentage
        }
    except Exception as e:
        current_app.logger.error(f"Error getting virtual patients stats: {e}")
        return {
            'total': 0,
            'completed': 0,
            'percentage': 0,
            'avg_score': 0
        }

# –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
@learning_map_bp.route("/debug/add-progress")
@login_required
def debug_add_progress(lang):
    """–í—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ä–æ–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        lessons = Lesson.query.limit(5).all()
        
        if not lessons:
            flash("–£—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", "warning")
            return redirect(url_for('learning_map_bp.learning_map', lang=lang))
            
        added_count = 0
        lesson_info = []
        
        for lesson in lessons:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress = UserProgress.query.filter_by(
                user_id=current_user.id,
                lesson_id=lesson.id
            ).first()
            
            status = 'existing'
            
            if not progress:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                progress = UserProgress(
                    user_id=current_user.id,
                    lesson_id=lesson.id,
                    completed=True,
                    time_spent=10.0  # –¢–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
                )
                db.session.add(progress)
                added_count += 1
                status = 'created'
            elif not progress.completed:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                progress.completed = True
                progress.time_spent = (progress.time_spent or 0.0) + 10.0
                added_count += 1
                status = 'updated'
                
            # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            module = Module.query.get(lesson.module_id)
            lesson_info.append({
                'id': lesson.id,
                'title': lesson.title,
                'module_id': lesson.module_id,
                'module_title': module.title if module else 'Unknown',
                'status': status
            })
                
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stats = get_unified_user_stats(current_user.id)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        return render_template(
            "debug_progress.html",
            stats=stats,
            lessons=lesson_info,
            added_count=added_count
        )
        
    except Exception as e:
        db.session.rollback()
        current_app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {str(e)}", exc_info=True)
        flash(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {str(e)}", "danger")
        return redirect(url_for('learning_map_bp.learning_map', lang=lang))
    
    
@learning_map_bp.route("/debug/progress-status")
@login_required
def debug_progress_status(lang):
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        progress_entries = UserProgress.query.filter_by(
            user_id=current_user.id
        ).all()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
        completed_entries = [p for p in progress_entries if p.completed]
        incomplete_entries = [p for p in progress_entries if not p.completed]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = get_unified_user_stats(current_user.id)
        
        # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ —É—Ä–æ–∫–æ–≤
        lessons_progress = []
        for entry in progress_entries:
            lesson = Lesson.query.get(entry.lesson_id)
            if lesson:
                module = Module.query.get(lesson.module_id)
                lessons_progress.append({
                    'id': lesson.id,
                    'title': lesson.title,
                    'module_id': lesson.module_id,
                    'module_title': module.title if module else 'Unknown',
                    'completed': entry.completed,
                    'time_spent': entry.time_spent,
                    'last_accessed': entry.last_accessed
                })
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥—É–ª–µ–π
        modules_stats = []
        for module in Module.query.all():
            module_stats = get_module_stats_unified(module.id, current_user.id)
            modules_stats.append({
                'id': module.id,
                'title': module.title,
                'progress': module_stats['progress'],
                'completed_lessons': module_stats['completed_lessons'],
                'total_lessons': module_stats['total_lessons']
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É (–æ—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ –∫ –Ω–∞–∏–º–µ–Ω—å—à–µ–º—É)
        modules_stats.sort(key=lambda x: x['progress'], reverse=True)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ä–æ–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç—É–ø–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—Ä—Ö—É)
        lessons_progress.sort(key=lambda x: x['last_accessed'] if x.get('last_accessed') else datetime.min, reverse=True)
        
        return render_template(
            "debug_progress_status.html",
            stats=stats,
            lessons_progress=lessons_progress,
            modules_stats=modules_stats,
            completed_count=len(completed_entries),
            incomplete_count=len(incomplete_entries),
            total_count=len(progress_entries)
        )
        
    except Exception as e:
        current_app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {str(e)}", exc_info=True)
        flash(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {str(e)}", "danger")
        return redirect(url_for('learning_map_bp.learning_map', lang=lang))
    
@learning_map_bp.route('/api/path/<int:path_id>/subjects')
def get_path_subjects(path_id):
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏–∑ g, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≤ middleware
    lang = g.lang
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –ø–æ ID
    path = LearningPath.query.get_or_404(path_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —ç—Ç–æ–≥–æ –ø—É—Ç–∏
    subjects = Subject.query.filter_by(learning_path_id=path_id).all()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ JSON
    subjects_data = []
    for subject in subjects:
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        progress = 0
        if current_user.is_authenticated:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–µ–¥–º–µ—Ç–∞ (–∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ)
            # –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ—é –ª–æ–≥–∏–∫—É):
            lessons_complete = UserProgress.query.join(Lesson).join(Module).filter(
                UserProgress.user_id == current_user.id,
                UserProgress.completed == True,
                Module.subject_id == subject.id
            ).count()
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤ –≤ –ø—Ä–µ–¥–º–µ—Ç–µ
            total_lessons = Lesson.query.join(Module).filter(
                Module.subject_id == subject.id
            ).count()
            
            if total_lessons > 0:
                progress = round((lessons_complete / total_lessons) * 100)
        
        subjects_data.append({
            'id': subject.id,
            'name': subject.name,
            'description': subject.description,
            'progress': progress
        })
    
    return jsonify({
        'path_id': path_id,
        'path_name': path.name,
        'path_description': path.description,
        'subjects': subjects_data,
        'learning_map_text': t('learning_map', lang)
    })

@learning_map_bp.route('/path/<int:path_id>')
@login_required  # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def view_path(lang, path_id):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –ø—É—Ç–∏."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –ø–æ ID
        path = LearningPath.query.get_or_404(path_id)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–º–µ—Å—Ç–æ print
        current_app.logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω –ø—É—Ç—å ID: {path_id}, –Ω–∞–∑–≤–∞–Ω–∏–µ: {path.name}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —ç—Ç–æ–≥–æ –ø—É—Ç–∏
        path_subjects = Subject.query.filter_by(learning_path_id=path_id).all()
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö
        current_app.logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {len(path_subjects)}")
        for subject in path_subjects:
            current_app.logger.info(f"  - –ü—Ä–µ–¥–º–µ—Ç: {subject.id}, {subject.name}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—É—Ç–∏ (–¥–ª—è –ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏)
        learning_paths = LearningPath.query.order_by(LearningPath.order).all()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã (—Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏)
        subjects = Subject.query.order_by(Subject.name).all()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_categories = ContentCategory.query.order_by(ContentCategory.order).all()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stats = get_unified_user_stats(current_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = get_user_recommendations(current_user.id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        extra_scripts = """
        <script>
        document.addEventListener('DOMContentLoaded', function() {
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            const pathId = "%s";
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –≤ –ª–µ–≤–æ–º –º–µ–Ω—é
            const pathButton = document.querySelector(`.learning-path-button[data-path="${pathId}"]`);
            if (pathButton) {
                // –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É
                pathButton.click();
            }
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –≤ –º–æ–±–∏–ª—å–Ω–æ–º –º–µ–Ω—é
            const mobileButton = document.querySelector(`.mobile-nav-item[data-path="${pathId}"]`);
            if (mobileButton) {
                mobileButton.classList.add('active');
            }
        });
        </script>
        """ % path_id
        
        return render_template(
            'learning/subject_view.html',
            learning_paths=learning_paths,
            subjects=subjects,
            selected_path=path,
            selected_subject=None,
            subject_modules=None,
            stats=stats,
            recommendations=recommendations,
            content_categories=content_categories,
            lang=lang,
            extra_scripts=extra_scripts  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –≤ —à–∞–±–ª–æ–Ω
        )
    except Exception as e:
        current_app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—É—Ç–∏ {path_id}: {str(e)}", exc_info=True)
        flash(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}", "danger")
        return redirect(url_for('learning_map_bp.learning_map', lang=lang))
    
@learning_map_bp.route("/debug/post-rollback-check")
@login_required
def post_rollback_check(lang):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–∫–∞—Ç–∞"""
    try:
        html = ["<h1>üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–∫–∞—Ç–∞</h1>"]
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Git —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        try:
            # –¢–µ–∫—É—â–∏–π –∫–æ–º–º–∏—Ç
            result = subprocess.run(['git', 'rev-parse', 'HEAD'], capture_output=True, text=True)
            current_commit = result.stdout.strip()[:8]
            
            # –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞
            result = subprocess.run(['git', 'branch', '--show-current'], capture_output=True, text=True)
            current_branch = result.stdout.strip()
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç
            result = subprocess.run(['git', 'log', '-1', '--oneline'], capture_output=True, text=True)
            last_commit = result.stdout.strip()
            
            html.append(f"""
            <h2>1. Git —Å–æ—Å—Ç–æ—è–Ω–∏–µ</h2>
            <ul>
                <li><strong>–¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞:</strong> {current_branch}</li>
                <li><strong>–¢–µ–∫—É—â–∏–π –∫–æ–º–º–∏—Ç:</strong> {current_commit}</li>
                <li><strong>–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç:</strong> {last_commit}</li>
            </ul>
            """)
        except Exception as e:
            html.append(f"<h2>1. Git —Å–æ—Å—Ç–æ—è–Ω–∏–µ</h2><p style='color:red'>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Git –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}</p>")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        html.append("<h2>2. –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</h2>")
        
        paths = LearningPath.query.all()
        subjects = Subject.query.all()
        modules = Module.query.all()
        lessons = Lesson.query.all()
        
        html.append(f"""
        <table border='1' style='border-collapse: collapse;'>
            <tr><th>–¢–∞–±–ª–∏—Ü–∞</th><th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π</th></tr>
            <tr><td>LearningPath</td><td>{len(paths)}</td></tr>
            <tr><td>Subject</td><td>{len(subjects)}</td></tr>
            <tr><td>Module</td><td>{len(modules)}</td></tr>
            <tr><td>Lesson</td><td>{len(lessons)}</td></tr>
        </table>
        """)
        
        # 3. –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        html.append("<h2>3. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö</h2>")
        
        if not paths:
            html.append("<p style='color:red;'>‚ùå <strong>–ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç –ø—É—Ç–µ–π –æ–±—É—á–µ–Ω–∏—è!</strong></p>")
        elif not subjects:
            html.append("<p style='color:red;'>‚ùå <strong>–ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤!</strong></p>")
        elif not modules:
            html.append("<p style='color:red;'>‚ùå <strong>–ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç –º–æ–¥—É–ª–µ–π!</strong></p>")
        elif not lessons:
            html.append("<p style='color:red;'>‚ùå <strong>–ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç —É—Ä–æ–∫–æ–≤!</strong></p>")
        else:
            html.append("<p style='color:green;'>‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–∞–Ω–Ω—ã–µ</p>")
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
            for path in paths[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø—É—Ç–∏
                path_subjects = Subject.query.filter_by(learning_path_id=path.id).all()
                html.append(f"<h4>Path: {path.name} ({len(path_subjects)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤)</h4>")
                
                if path_subjects:
                    html.append("<ul>")
                    for subject in path_subjects[:3]:  # –ü–µ—Ä–≤—ã–µ 3 –ø—Ä–µ–¥–º–µ—Ç–∞
                        subject_modules = Module.query.filter_by(subject_id=subject.id).all()
                        html.append(f"<li>{subject.name} ({len(subject_modules)} –º–æ–¥—É–ª–µ–π)")
                        
                        if subject_modules:
                            html.append("<ul>")
                            for module in subject_modules[:2]:  # –ü–µ—Ä–≤—ã–µ 2 –º–æ–¥—É–ª—è
                                module_lessons = Lesson.query.filter_by(module_id=module.id).all()
                                html.append(f"<li>{module.title} ({len(module_lessons)} —É—Ä–æ–∫–æ–≤)</li>")
                            html.append("</ul>")
                        html.append("</li>")
                    html.append("</ul>")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        html.append("<h2>4. –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</h2>")
        
        db_files = []
        for filename in ['database.db', 'app.db', 'dental_academy.db', 'instance/database.db']:
            if os.path.exists(filename):
                size = os.path.getsize(filename)
                db_files.append(f"{filename} ({size} bytes)")
        
        if db_files:
            html.append("<ul>")
            for db_file in db_files:
                html.append(f"<li>{db_file}</li>")
            html.append("</ul>")
        else:
            html.append("<p style='color:red;'>‚ùå –§–∞–π–ª—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!</p>")
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        html.append("<h2>5. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Flask</h2>")
        html.append(f"""
        <ul>
            <li><strong>DATABASE_URL:</strong> {current_app.config.get('SQLALCHEMY_DATABASE_URI', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}</li>
            <li><strong>DEBUG:</strong> {current_app.config.get('DEBUG', False)}</li>
            <li><strong>ENV:</strong> {current_app.config.get('ENV', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}</li>
        </ul>
        """)
        
        # 6. –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        html.append("<h2>6. –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è</h2>")
        html.append(f"""
        <ul>
            <li><a href="{url_for('learning_map_bp.recreate_database', lang=lang)}" style="color: red;">üóëÔ∏è –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö</a> (—É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ!)</li>
            <li><a href="{url_for('learning_map_bp.create_sample_data', lang=lang)}" style="color: green;">‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ</a></li>
            <li><a href="{url_for('learning_map_bp.import_github_data', lang=lang)}" style="color: blue;">üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ GitHub</a></li>
        </ul>
        """)
        
        return "".join(html)
        
    except Exception as e:
        import traceback
        return f"<h1>‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏</h1><p>{str(e)}</p><pre>{traceback.format_exc()}</pre>"

@learning_map_bp.route("/debug/recreate-database")
@login_required
def recreate_database(lang):
    """–û–ü–ê–°–ù–û: –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        db.drop_all()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
        db.create_all()
        
        flash("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞! –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.", "warning")
        return redirect(url_for('learning_map_bp.create_sample_data', lang=lang))
        
    except Exception as e:
        flash(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –ë–î: {str(e)}", "danger")
        return redirect(url_for('learning_map_bp.post_rollback_check', lang=lang))

@learning_map_bp.route("/debug/create-sample-data")
@login_required
def create_sample_data(lang):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        if LearningPath.query.first():
            flash("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", "warning")
            return redirect(url_for('learning_map_bp.post_rollback_check', lang=lang))
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        # Learning Paths
        path1 = LearningPath(name="Theory (MCQ)", description="Multiple choice questions", order=1, is_active=True)
        path2 = LearningPath(name="–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç—ã", description="Virtual patient cases", order=2, is_active=True)
        
        db.session.add_all([path1, path2])
        db.session.flush()
        
        # Subjects
        subject1 = Subject(name="THK I: Cariology/Endo/Perio/Pedo", description="Basic dental subjects", learning_path_id=path1.id, order=1)
        subject2 = Subject(name="THK II: Prostho/Surgery/Ortho", description="Advanced dental subjects", learning_path_id=path1.id, order=2)
        
        db.session.add_all([subject1, subject2])
        db.session.flush()
        
        # Modules
        module1 = Module(title="–û—Å–Ω–æ–≤—ã –∫–∞—Ä–∏–æ–ª–æ–≥–∏–∏", description="–ò–∑—É—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞", subject_id=subject1.id, order=1)
        module2 = Module(title="–≠–Ω–¥–æ–¥–æ–Ω—Ç–∏—è", description="–õ–µ—á–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤", subject_id=subject1.id, order=2)
        module3 = Module(title="–û—Ä—Ç–æ–ø–µ–¥–∏—è", description="–ü—Ä–æ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ", subject_id=subject2.id, order=1)
        
        db.session.add_all([module1, module2, module3])
        db.session.flush()
        
        # Lessons
        lesson1 = Lesson(title="–£—Ä–æ–∫ 1: –ß—Ç–æ —Ç–∞–∫–æ–µ –∫–∞—Ä–∏–µ—Å", content="–û—Å–Ω–æ–≤—ã –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–∞—Ä–∏–µ—Å–∞", module_id=module1.id, order=1)
        lesson2 = Lesson(title="–£—Ä–æ–∫ 2: –°—Ç–∞–¥–∏–∏ –∫–∞—Ä–∏–µ—Å–∞", content="–†–∞–∑–≤–∏—Ç–∏–µ –∫–∞—Ä–∏–æ–∑–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞", module_id=module1.id, order=2)
        lesson3 = Lesson(title="–£—Ä–æ–∫ 1: –ê–Ω–∞—Ç–æ–º–∏—è –∫–æ—Ä–Ω–µ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤", content="–°—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–π", module_id=module2.id, order=1)
        
        db.session.add_all([lesson1, lesson2, lesson3])
        db.session.commit()
        
        flash("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!", "success")
        return redirect(url_for('learning_map_bp.post_rollback_check', lang=lang))
        
    except Exception as e:
        db.session.rollback()
        flash(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}", "danger")
        return redirect(url_for('learning_map_bp.post_rollback_check', lang=lang))

@learning_map_bp.route("/debug/import-github-data")
@login_required
def import_github_data(lang):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ GitHub"""
    flash("üì• –§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ GitHub –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.", "info")
    return redirect(url_for('learning_map_bp.post_rollback_check', lang=lang))

@learning_map_bp.route("/debug/test-caries")
@login_required
def test_caries(lang):
    """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è Caries"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º Caries
        caries_subject = Subject.query.filter_by(name="Caries").first()
        
        if not caries_subject:
            return "<h1>‚ùå –ü—Ä–µ–¥–º–µ—Ç Caries –Ω–µ –Ω–∞–π–¥–µ–Ω!</h1>"
        
        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥—É–ª–∏ Caries
        caries_modules = Module.query.filter_by(subject_id=caries_subject.id).all()
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –º–æ–¥—É–ª—è
        first_module = caries_modules[0] if caries_modules else None
        lessons = Lesson.query.filter_by(module_id=first_module.id).all() if first_module else []
        
        html = f"""
        <h1>üß™ –¢–µ—Å—Ç Caries</h1>
        
        <h2>–ü—Ä–µ–¥–º–µ—Ç Caries</h2>
        <p><strong>ID:</strong> {caries_subject.id}</p>
        <p><strong>Name:</strong> {caries_subject.name}</p>
        <p><strong>Learning Path ID:</strong> {caries_subject.learning_path_id}</p>
        
        <h2>–ú–æ–¥—É–ª–∏ ({len(caries_modules)})</h2>
        """
        
        if caries_modules:
            for module in caries_modules:
                module_lessons = Lesson.query.filter_by(module_id=module.id).all()
                html += f"""
                <div style="border: 1px solid #ccc; padding: 10px; margin: 10px 0;">
                    <h3>{module.title}</h3>
                    <p><strong>ID:</strong> {module.id}</p>
                    <p><strong>–£—Ä–æ–∫–æ–≤:</strong> {len(module_lessons)}</p>
                    <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {getattr(module, 'description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}</p>
                    
                    <h4>–ü–µ—Ä–≤—ã–µ 5 —É—Ä–æ–∫–æ–≤:</h4>
                    <ul>
                """
                
                for lesson in module_lessons[:5]:
                    html += f"<li>{lesson.title}</li>"
                
                html += "</ul></div>"
        else:
            html += "<p style='color: red;'>‚ùå –ù–µ—Ç –º–æ–¥—É–ª–µ–π!</p>"
        
        # –¢–µ—Å—Ç –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏
        if caries_subject:
            html += f"""
            <h2>–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞</h2>
            <p><a href="{url_for('subject_view_bp.view_subject', lang=lang, subject_id=caries_subject.id)}" 
                  style="background: green; color: white; padding: 10px; text-decoration: none;">
                üéØ –û—Ç–∫—Ä—ã—Ç—å Caries –Ω–∞–ø—Ä—è–º—É—é
            </a></p>
            """
        
        # –¢–µ—Å—Ç —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç—É –æ–±—É—á–µ–Ω–∏—è
        html += f"""
        <h2>–ß–µ—Ä–µ–∑ –∫–∞—Ä—Ç—É –æ–±—É—á–µ–Ω–∏—è</h2>
        <p><a href="{url_for('learning_map_bp.learning_map', lang=lang)}" 
              style="background: blue; color: white; padding: 10px; text-decoration: none;">
            üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É –æ–±—É—á–µ–Ω–∏—è
        </a></p>
        
        <h3>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</h3>
        <ol>
            <li>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ <strong>"Exams"</strong> –≤ –ª–µ–≤–æ–º –º–µ–Ω—é</li>
            <li>–ù–∞–π–¥–∏—Ç–µ <strong>"Caries"</strong> –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤</li>
            <li>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ <strong>"Caries"</strong></li>
            <li>–î–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –º–æ–¥—É–ª—å —Å 19 —É—Ä–æ–∫–∞–º–∏</li>
        </ol>
        """
        
        return html
        
    except Exception as e:
        import traceback
        return f"<h1>‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞</h1><p>{str(e)}</p><pre>{traceback.format_exc()}</pre>"
    
@learning_map_bp.route("/subject/<int:subject_id>/tests")
@login_required
def subject_tests(lang, subject_id):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    try:
        subject = Subject.query.get_or_404(subject_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞
        tests = Test.query.filter_by(subject_final_test_id=subject_id).all()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞
        categories = QuestionCategory.query.filter_by(subject_id=subject_id).all()
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ—Å—Ç–∞–º
        test_stats = {}
        if current_user.is_authenticated:
            for test in tests:
                attempts = TestAttempt.query.filter_by(
                    user_id=current_user.id,
                    test_id=test.id
                ).all()
                
                if attempts:
                    best_score = max(attempt.score for attempt in attempts)
                    total_attempts = len(attempts)
                else:
                    best_score = 0
                    total_attempts = 0
                
                test_stats[test.id] = {
                    'best_score': best_score,
                    'total_attempts': total_attempts,
                    'passed': best_score >= test.passing_score if test.passing_score else False
                }
        
        return render_template(
            'learning/subject_tests.html',
            subject=subject,
            tests=tests,
            categories=categories,
            test_stats=test_stats
        )
        
    except Exception as e:
        current_app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤: {str(e)}")
        flash("Er is een fout opgetreden bij het laden van de tests.", "error")
        return redirect(url_for('learning_map_bp.learning_map', lang=g.lang))

# === –§–£–ù–ö–¶–ò–ò –ü–†–û–í–ï–†–ö–ò –°–û–°–¢–û–Ø–ù–ò–Ø === #

def check_diagnostic_completed(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–æ—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π —Å–µ—Å—Å–∏–∏
        diagnostic_session = DiagnosticSession.query.filter_by(
            user_id=user_id,
            status='completed'
        ).order_by(DiagnosticSession.started_at.desc()).first()
        
        return diagnostic_session is not None
    except Exception as e:
        print(f"Error checking diagnostic completion: {e}")
        return False

def check_learning_progress(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –æ–±—É—á–µ–Ω–∏–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —É—Ä–æ–∫–∞—Ö
        lesson_progress = UserProgress.query.filter_by(
            user_id=user_id
        ).filter(UserProgress.completed == True).first()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —Ç–µ—Å—Ç–∞—Ö
        test_progress = TestAttempt.query.filter_by(
            user_id=user_id
        ).first()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞—Ö
        vp_progress = VirtualPatientAttempt.query.filter_by(
            user_id=user_id
        ).first()
        
        return lesson_progress is not None or test_progress is not None or vp_progress is not None
    except Exception as e:
        print(f"Error checking learning progress: {e}")
        return False

def get_user_learning_state(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    diagnostic_completed = check_diagnostic_completed(user_id)
    learning_progress = check_learning_progress(user_id)
    
    return {
        'diagnostic_completed': diagnostic_completed,
        'learning_progress': learning_progress,
        'stage': 'post_diagnostic' if diagnostic_completed else 'pre_diagnostic'
    }

