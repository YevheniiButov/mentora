#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ Question –≤ IRTParameters
"""

from app import app
from models import Question, IRTParameters
from extensions import db

def run_migration():
    """–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    
    print("üîÑ –ó–ê–ü–£–°–ö –ú–ò–ì–†–ê–¶–ò–ò IRT –ü–ê–†–ê–ú–ï–¢–†–û–í")
    print("=" * 50)
    
    with app.app_context():
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            questions_count = Question.query.count()
            irt_count = IRTParameters.query.count()
            
            print(f"üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
            print(f"   –í–æ–ø—Ä–æ—Å–æ–≤: {questions_count}")
            print(f"   IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {irt_count}")
            
            if irt_count > 0:
                print("‚ö†Ô∏è IRT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
            questions = Question.query.all()
            print(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤...")
            
            # –°–æ–∑–¥–∞–µ–º IRT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            created_count = 0
            skipped_count = 0
            
            for question in questions:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ IRT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ Question
                    if hasattr(question, 'irt_difficulty') and question.irt_difficulty is not None:
                        # –°–æ–∑–¥–∞–µ–º IRT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                        irt_params = IRTParameters(
                            question_id=question.id,
                            difficulty=question.irt_difficulty,
                            discrimination=question.irt_discrimination,
                            guessing=question.irt_guessing
                        )
                        
                        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                        irt_params.validate_parameters()
                        
                        db.session.add(irt_params)
                        created_count += 1
                        
                        if created_count % 50 == 0:
                            print(f"   üìù –°–æ–∑–¥–∞–Ω–æ {created_count} IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
                    else:
                        skipped_count += 1
                        
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {question.id}: {e}")
                    skipped_count += 1
                    continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            db.session.commit()
            
            print(f"\n‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê:")
            print(f"   –°–æ–∑–¥–∞–Ω–æ IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {created_count}")
            print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {skipped_count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            final_irt_count = IRTParameters.query.count()
            print(f"   –í—Å–µ–≥–æ IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –ë–î: {final_irt_count}")
            
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –ú–ò–ì–†–ê–¶–ò–ò: {e}")
            db.session.rollback()
            raise

if __name__ == "__main__":
    run_migration() 