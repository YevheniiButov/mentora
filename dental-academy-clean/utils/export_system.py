#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è
"""

import json
from datetime import datetime, timedelta, timezone
from io import BytesIO
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_LEFT
from models import User, PersonalLearningPlan, StudySession, BIGDomain

class LearningPlanExporter:
    """–°–∏—Å—Ç–µ–º–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–ª–∞–Ω–æ–≤ –æ–±—É—á–µ–Ω–∏—è"""
    
    def __init__(self):
        self.styles = getSampleStyleSheet()
        self.setup_custom_styles()
    
    def setup_custom_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π –¥–ª—è PDF"""
        self.title_style = ParagraphStyle(
            'CustomTitle',
            parent=self.styles['Heading1'],
            fontSize=24,
            spaceAfter=30,
            alignment=TA_CENTER,
            textColor=colors.HexColor('#3ECDC1')
        )
        
        self.heading_style = ParagraphStyle(
            'CustomHeading',
            parent=self.styles['Heading2'],
            fontSize=16,
            spaceAfter=12,
            textColor=colors.HexColor('#6C5CE7')
        )
        
        self.normal_style = ParagraphStyle(
            'CustomNormal',
            parent=self.styles['Normal'],
            fontSize=12,
            spaceAfter=6
        )
        
        self.highlight_style = ParagraphStyle(
            'CustomHighlight',
            parent=self.styles['Normal'],
            fontSize=12,
            spaceAfter=6,
            textColor=colors.HexColor('#22c55e'),
            fontName='Helvetica-Bold'
        )
    
    def export_to_ical(self, plan_id, user_id):
        """–≠–∫—Å–ø–æ—Ä—Ç –ø–ª–∞–Ω–∞ –æ–±—É—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç iCal"""
        try:
            plan = PersonalLearningPlan.query.get(plan_id)
            if not plan or plan.user_id != user_id:
                return None
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π
            study_sessions = plan.study_sessions.filter_by(status='planned').all()
            
            # –°–æ–∑–¥–∞–µ–º iCal –∫–æ–Ω—Ç–µ–Ω—Ç
            ical_content = self._generate_ical_content(plan, study_sessions)
            
            return ical_content
            
        except Exception as e:
            print(f"Error exporting to iCal: {e}")
            return None
    
    def _generate_ical_content(self, plan, study_sessions):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç iCal –∫–æ–Ω—Ç–µ–Ω—Ç"""
        now = datetime.now(timezone.utc)
        
        ical_lines = [
            "BEGIN:VCALENDAR",
            "VERSION:2.0",
            "PRODID:-//Mentora Academy//Learning Plan//RU",
            "CALSCALE:GREGORIAN",
            "METHOD:PUBLISH",
            f"X-WR-CALNAME:Mentora Academy - –ü–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è",
            f"X-WR-CALDESC:–ü–ª–∞–Ω –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ BIG —ç–∫–∑–∞–º–µ–Ω—É",
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–Ω—è—Ç–∏—è
        for session in study_sessions:
            if session.started_at:
                event_lines = self._create_ical_event(session, plan)
                ical_lines.extend(event_lines)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–∫–∑–∞–º–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
        if plan.exam_date:
            exam_lines = self._create_ical_exam_event(plan)
            ical_lines.extend(exam_lines)
        
        ical_lines.append("END:VCALENDAR")
        
        return "\r\n".join(ical_lines)
    
    def _create_ical_event(self, session, plan):
        """–°–æ–∑–¥–∞–µ—Ç iCal —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∑–∞–Ω—è—Ç–∏—è"""
        start_time = session.started_at
        end_time = start_time + timedelta(hours=session.planned_duration or 2)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è iCal
        start_str = start_time.strftime("%Y%m%dT%H%M%SZ")
        end_str = end_time.strftime("%Y%m%dT%H%M%SZ")
        created_str = datetime.now(timezone.utc).strftime("%Y%m%dT%H%M%SZ")
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        event_id = f"mentora-session-{session.id}@mentora.academy"
        
        # –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è
        domain_name = session.domain.name if session.domain else "–û–±—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª"
        description = f"–ò–∑—É—á–µ–Ω–∏–µ: {domain_name}\n"
        description += f"–¢–∏–ø: {session.session_type}\n"
        description += f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {session.planned_duration or 2} —á–∞—Å–∞\n"
        description += f"–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–ª–∞–Ω–∞: {plan.overall_progress or 0}%"
        
        # –õ–æ–∫–∞—Ü–∏—è (–≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è)
        location = "Mentora Academy - –û–Ω–ª–∞–π–Ω –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞"
        
        return [
            "BEGIN:VEVENT",
            f"UID:{event_id}",
            f"DTSTAMP:{created_str}",
            f"DTSTART:{start_str}",
            f"DTEND:{end_str}",
            f"SUMMARY:üìö {session.session_type.title()} - {domain_name}",
            f"DESCRIPTION:{description}",
            f"LOCATION:{location}",
            "CATEGORIES:EDUCATION,STUDY",
            "PRIORITY:3",
            "STATUS:CONFIRMED",
            "SEQUENCE:0",
            "END:VEVENT"
        ]
    
    def _create_ical_exam_event(self, plan):
        """–°–æ–∑–¥–∞–µ—Ç iCal —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–∞"""
        exam_date = plan.exam_date
        start_time = datetime.combine(exam_date, datetime.min.time().replace(hour=9, minute=0))
        start_time = start_time.replace(tzinfo=timezone.utc)
        end_time = start_time + timedelta(hours=4)  # 4 —á–∞—Å–∞ –Ω–∞ —ç–∫–∑–∞–º–µ–Ω
        
        start_str = start_time.strftime("%Y%m%dT%H%M%SZ")
        end_str = end_time.strftime("%Y%m%dT%H%M%SZ")
        created_str = datetime.now(timezone.utc).strftime("%Y%m%dT%H%M%SZ")
        
        event_id = f"mentora-exam-{plan.id}@mentora.academy"
        
        description = "BIG —ç–∫–∑–∞–º–µ–Ω - –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π\n"
        description += f"–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {plan.overall_progress or 0}%\n"
        description += "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∑—è—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –ø—Ä–∏–±—ã—Ç—å –∑–∞—Ä–∞–Ω–µ–µ!"
        
        return [
            "BEGIN:VEVENT",
            f"UID:{event_id}",
            f"DTSTAMP:{created_str}",
            f"DTSTART:{start_str}",
            f"DTEND:{end_str}",
            "SUMMARY:‚ö†Ô∏è BIG –≠–ö–ó–ê–ú–ï–ù",
            f"DESCRIPTION:{description}",
            "LOCATION:–£–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏",
            "CATEGORIES:EXAM,IMPORTANT",
            "PRIORITY:1",
            "STATUS:CONFIRMED",
            "SEQUENCE:0",
            "END:VEVENT"
        ]
    
    def export_to_pdf(self, plan_id, user_id):
        """–≠–∫—Å–ø–æ—Ä—Ç –ø–ª–∞–Ω–∞ –æ–±—É—á–µ–Ω–∏—è –≤ PDF"""
        try:
            plan = PersonalLearningPlan.query.get(plan_id)
            if not plan or plan.user_id != user_id:
                return None
            
            user = User.query.get(user_id)
            study_sessions = plan.study_sessions.all()
            
            # –°–æ–∑–¥–∞–µ–º PDF –¥–æ–∫—É–º–µ–Ω—Ç
            buffer = BytesIO()
            doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=72, leftMargin=72, topMargin=72, bottomMargin=72)
            
            # –°–æ–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞
            story = []
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            story.append(Paragraph("ü¶∑ Mentora Academy", self.title_style))
            story.append(Paragraph("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è", self.heading_style))
            story.append(Spacer(1, 20))
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            story.extend(self._create_user_info_section(user, plan))
            story.append(Spacer(1, 20))
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            story.extend(self._create_statistics_section(plan))
            story.append(Spacer(1, 20))
            
            # –ê–Ω–∞–ª–∏–∑ –¥–æ–º–µ–Ω–æ–≤
            story.extend(self._create_domain_analysis_section(plan))
            story.append(Spacer(1, 20))
            
            # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π
            story.extend(self._create_schedule_section(study_sessions))
            story.append(Spacer(1, 20))
            
            # –¶–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è
            story.extend(self._create_goals_section(plan))
            story.append(Spacer(1, 20))
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            story.extend(self._create_recommendations_section(plan))
            
            # –°—Ç—Ä–æ–∏–º PDF
            doc.build(story)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            pdf_content = buffer.getvalue()
            buffer.close()
            
            return pdf_content
            
        except Exception as e:
            print(f"Error exporting to PDF: {e}")
            return None
    
    def _create_user_info_section(self, user, plan):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        elements = []
        
        elements.append(Paragraph("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–µ–Ω—Ç–µ", self.heading_style))
        
        user_info = [
            ["–ò–º—è:", user.first_name or user.username or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"],
            ["Email:", user.email or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"],
            ["–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞:", plan.last_updated.strftime("%d.%m.%Y") if plan.last_updated else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"],
            ["–î–∞—Ç–∞ —ç–∫–∑–∞–º–µ–Ω–∞:", plan.exam_date.strftime("%d.%m.%Y") if plan.exam_date else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"],
            ["–°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∞:", plan.status.title()]
        ]
        
        user_table = Table(user_info, colWidths=[2*inch, 4*inch])
        user_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#f8f9fa')),
            ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
            ('GRID', (0, 0), (-1, -1), 1, colors.grey)
        ]))
        
        elements.append(user_table)
        return elements
    
    def _create_statistics_section(self, plan):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
        elements = []
        
        elements.append(Paragraph("–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", self.heading_style))
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_sessions = plan.study_sessions.count()
        completed_sessions = plan.study_sessions.filter_by(status='completed').count()
        upcoming_sessions = plan.study_sessions.filter_by(status='planned').count()
        
        days_to_exam = 0
        if plan.exam_date:
            days_to_exam = (plan.exam_date - datetime.now(timezone.utc).date()).days
        
        stats_info = [
            ["–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å:", f"{plan.overall_progress or 0}%"],
            ["–í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π:", str(total_sessions)],
            ["–ó–∞–≤–µ—Ä—à–µ–Ω–æ:", str(completed_sessions)],
            ["–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ:", str(upcoming_sessions)],
            ["–î–Ω–µ–π –¥–æ —ç–∫–∑–∞–º–µ–Ω–∞:", str(max(0, days_to_exam))],
            ["–¢–µ–∫—É—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:", f"{plan.current_ability:.3f}" if plan.current_ability else "–ù–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ"]
        ]
        
        stats_table = Table(stats_info, colWidths=[2*inch, 4*inch])
        stats_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#e3f2fd')),
            ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
            ('GRID', (0, 0), (-1, -1), 1, colors.grey)
        ]))
        
        elements.append(stats_table)
        return elements
    
    def _create_domain_analysis_section(self, plan):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å –∞–Ω–∞–ª–∏–∑–æ–º –¥–æ–º–µ–Ω–æ–≤"""
        elements = []
        
        elements.append(Paragraph("–ê–Ω–∞–ª–∏–∑ –ø–æ –¥–æ–º–µ–Ω–∞–º", self.heading_style))
        
        domain_analysis = plan.get_domain_analysis()
        if not domain_analysis:
            elements.append(Paragraph("–î–∞–Ω–Ω—ã–µ –ø–æ –¥–æ–º–µ–Ω–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", self.normal_style))
            return elements
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–æ–º–µ–Ω–æ–≤
        domain_data = [["–î–æ–º–µ–Ω", "–ü—Ä–æ–≥—Ä–µ—Å—Å", "–¶–µ–ª—å", "–°—Ç–∞—Ç—É—Å"]]
        
        for domain_code, data in domain_analysis.items():
            if data.get('has_data'):
                progress = data.get('accuracy_percentage', 0)
                target = data.get('target_percentage', 80)
                status = "‚úÖ –•–æ—Ä–æ—à–æ" if progress >= target else "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
                
                domain_data.append([
                    data.get('name', domain_code),
                    f"{progress:.1f}%",
                    f"{target}%",
                    status
                ])
        
        if len(domain_data) > 1:  # –ï—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            domain_table = Table(domain_data, colWidths=[2*inch, 1*inch, 1*inch, 2*inch])
            domain_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#6C5CE7')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 9),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
                ('GRID', (0, 0), (-1, -1), 1, colors.grey)
            ]))
            elements.append(domain_table)
        else:
            elements.append(Paragraph("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–æ–º–µ–Ω–∞–º", self.normal_style))
        
        return elements
    
    def _create_schedule_section(self, study_sessions):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"""
        elements = []
        
        elements.append(Paragraph("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π", self.heading_style))
        
        if not study_sessions:
            elements.append(Paragraph("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –Ω–µ —Å–æ–∑–¥–∞–Ω–æ", self.normal_style))
            return elements
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –ø–æ –Ω–µ–¥–µ–ª—è–º
        schedule_data = [["–î–∞—Ç–∞", "–í—Ä–µ–º—è", "–¢–∏–ø", "–î–æ–º–µ–Ω", "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–°—Ç–∞—Ç—É—Å"]]
        
        for session in study_sessions[:20]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–º–∏ 20 –∑–∞–Ω—è—Ç–∏—è–º–∏
            date_str = session.started_at.strftime("%d.%m.%Y") if session.started_at else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            time_str = session.started_at.strftime("%H:%M") if session.started_at else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            domain_name = session.domain.name if session.domain else "–û–±—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª"
            duration = f"{session.planned_duration or 2}—á" if session.planned_duration else "2—á"
            
            schedule_data.append([
                date_str,
                time_str,
                session.session_type.title(),
                domain_name,
                duration,
                session.status.title()
            ])
        
        schedule_table = Table(schedule_data, colWidths=[1*inch, 0.8*inch, 1*inch, 1.5*inch, 0.8*inch, 1*inch])
        schedule_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#3ECDC1')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 8),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 4),
            ('GRID', (0, 0), (-1, -1), 1, colors.grey)
        ]))
        
        elements.append(schedule_table)
        
        if len(study_sessions) > 20:
            elements.append(Paragraph(f"... –∏ –µ—â–µ {len(study_sessions) - 20} –∑–∞–Ω—è—Ç–∏–π", self.normal_style))
        
        return elements
    
    def _create_goals_section(self, plan):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å —Ü–µ–ª—è–º–∏ –æ–±—É—á–µ–Ω–∏—è"""
        elements = []
        
        elements.append(Paragraph("–¶–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è", self.heading_style))
        
        weak_domains = plan.get_weak_domain_names()
        if weak_domains:
            elements.append(Paragraph("–°–ª–∞–±—ã–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:", self.normal_style))
            for domain in weak_domains[:5]:  # –¢–æ–ø-5 —Å–ª–∞–±—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
                elements.append(Paragraph(f"‚Ä¢ {domain}", self.normal_style))
        else:
            elements.append(Paragraph("–í—Å–µ –æ–±–ª–∞—Å—Ç–∏ –∏–∑—É—á–µ–Ω—ã –Ω–∞ —Ö–æ—Ä–æ—à–µ–º —É—Ä–æ–≤–Ω–µ", self.highlight_style))
        
        elements.append(Spacer(1, 10))
        
        # –û–±—â–∏–µ —Ü–µ–ª–∏
        elements.append(Paragraph("–û–±—â–∏–µ —Ü–µ–ª–∏:", self.normal_style))
        elements.append(Paragraph("‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ BIG —ç–∫–∑–∞–º–µ–Ω—É", self.normal_style))
        elements.append(Paragraph("‚Ä¢ –£–ª—É—á—à–∏—Ç—å –∑–Ω–∞–Ω–∏—è –≤ —Å–ª–∞–±—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö", self.normal_style))
        elements.append(Paragraph("‚Ä¢ –î–æ—Å—Ç–∏—á—å 80% –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏", self.normal_style))
        
        return elements
    
    def _create_recommendations_section(self, plan):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
        elements = []
        
        elements.append(Paragraph("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", self.heading_style))
        
        recommendations = [
            "–†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–Ω–∏–º–∞–π—Ç–µ—Å—å –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é",
            "–§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–ª–∞–±—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö",
            "–ü—Ä–æ—Ö–æ–¥–∏—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–µ—Å—Ç—ã",
            "–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –Ω–∞ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞—è—Ö",
            "–ü–æ–≤—Ç–æ—Ä—è–π—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –ø–µ—Ä–µ–¥ —Å–Ω–æ–º"
        ]
        
        for rec in recommendations:
            elements.append(Paragraph(f"‚Ä¢ {rec}", self.normal_style))
        
        elements.append(Spacer(1, 20))
        elements.append(Paragraph("–£–¥–∞—á–∏ –≤ –æ–±—É—á–µ–Ω–∏–∏! ü¶∑", self.highlight_style))
        
        return elements

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞
exporter = LearningPlanExporter() 