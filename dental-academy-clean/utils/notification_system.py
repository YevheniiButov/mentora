#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è
"""

import json
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime, timedelta, timezone
from flask import current_app, render_template_string
from models import User, PersonalLearningPlan, StudySession
from extensions import db

class LearningNotificationSystem:
    """–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è"""
    
    def __init__(self):
        self.email_templates = {
            'session_reminder': {
                'subject': '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–Ω—è—Ç–∏–∏ - {{session_title}}',
                'template': '''
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                    <div style="background: linear-gradient(135deg, #3ECDC1, #6C5CE7); color: white; padding: 20px; text-align: center;">
                        <h1>ü¶∑ Mentora Academy</h1>
                        <h2>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–Ω—è—Ç–∏–∏</h2>
                    </div>
                    
                    <div style="padding: 20px; background: #f8f9fa;">
                        <h3>–ü—Ä–∏–≤–µ—Ç, {{user_name}}!</h3>
                        
                        <div style="background: white; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #3ECDC1;">
                            <h4>üìö –°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–Ω—è—Ç–∏–µ:</h4>
                            <p><strong>{{session_title}}</strong></p>
                            <p><strong>–í—Ä–µ–º—è:</strong> {{session_time}}</p>
                            <p><strong>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> {{session_duration}} —á–∞—Å–æ–≤</p>
                            <p><strong>–î–æ–º–µ–Ω:</strong> {{domain_name}}</p>
                        </div>
                        
                        <div style="background: #e3f2fd; padding: 15px; border-radius: 8px; margin: 20px 0;">
                            <h4>üéØ –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:</h4>
                            <p>–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: <strong>{{overall_progress}}%</strong></p>
                            <p>–î–Ω–µ–π –¥–æ —ç–∫–∑–∞–º–µ–Ω–∞: <strong>{{days_to_exam}}</strong></p>
                        </div>
                        
                        <div style="text-align: center; margin: 30px 0;">
                            <a href="{{login_url}}" style="background: #3ECDC1; color: white; padding: 12px 30px; text-decoration: none; border-radius: 6px; display: inline-block;">
                                –ù–∞—á–∞—Ç—å –∑–∞–Ω—è—Ç–∏–µ
                            </a>
                        </div>
                        
                        <div style="background: #fff3cd; padding: 15px; border-radius: 8px; margin: 20px 0;">
                            <h4>üí° –°–æ–≤–µ—Ç –¥–Ω—è:</h4>
                            <p>{{daily_tip}}</p>
                        </div>
                    </div>
                    
                    <div style="background: #f8f9fa; padding: 20px; text-align: center; color: #6c757d;">
                        <p>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç Mentora Academy</p>
                        <p>–ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, <a href="{{unsubscribe_url}}">–æ—Ç–ø–∏—à–∏—Ç–µ—Å—å –∑–¥–µ—Å—å</a></p>
                    </div>
                </div>
                '''
            },
            'weekly_progress': {
                'subject': '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ - {{week_number}} –Ω–µ–¥–µ–ª—è',
                'template': '''
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                    <div style="background: linear-gradient(135deg, #22c55e, #3ECDC1); color: white; padding: 20px; text-align: center;">
                        <h1>üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç</h1>
                        <h2>–ù–µ–¥–µ–ª—è {{week_number}} –æ–±—É—á–µ–Ω–∏—è</h2>
                    </div>
                    
                    <div style="padding: 20px; background: #f8f9fa;">
                        <h3>–ü—Ä–∏–≤–µ—Ç, {{user_name}}!</h3>
                        
                        <div style="background: white; padding: 20px; border-radius: 8px; margin: 20px 0;">
                            <h4>üìà –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ:</h4>
                            <ul>
                                <li>–ó–∞–Ω—è—Ç–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ: <strong>{{completed_sessions}}</strong></li>
                                <li>–ß–∞—Å–æ–≤ –∏–∑—É—á–µ–Ω–æ: <strong>{{hours_studied}}</strong></li>
                                <li>–í–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç–≤–µ—á–µ–Ω–æ: <strong>{{questions_answered}}</strong></li>
                                <li>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <strong>{{correct_answers}}</strong></li>
                            </ul>
                        </div>
                        
                        <div style="background: #e8f5e8; padding: 15px; border-radius: 8px; margin: 20px 0;">
                            <h4>üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –¥–æ–º–µ–Ω–∞–º:</h4>
                            {% for domain in domain_progress %}
                            <div style="margin: 10px 0;">
                                <p><strong>{{domain.name}}:</strong> {{domain.progress}}% ‚Üí {{domain.target}}%</p>
                                <div style="background: #ddd; height: 8px; border-radius: 4px;">
                                    <div style="background: #22c55e; height: 8px; border-radius: 4px; width: {{domain.progress}}%"></div>
                                </div>
                            </div>
                            {% endfor %}
                        </div>
                        
                        <div style="background: #fff3cd; padding: 15px; border-radius: 8px; margin: 20px 0;">
                            <h4>üìÖ –ü–ª–∞–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é:</h4>
                            <ul>
                                {% for session in next_week_sessions %}
                                <li>{{session.day}}: {{session.title}} ({{session.duration}}—á)</li>
                                {% endfor %}
                            </ul>
                        </div>
                        
                        <div style="text-align: center; margin: 30px 0;">
                            <a href="{{dashboard_url}}" style="background: #22c55e; color: white; padding: 12px 30px; text-decoration: none; border-radius: 6px; display: inline-block;">
                                –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏
                            </a>
                        </div>
                    </div>
                </div>
                '''
            },
            'exam_reminder': {
                'subject': '‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —ç–∫–∑–∞–º–µ–Ω–µ BIG - –æ—Å—Ç–∞–ª–æ—Å—å {{days_left}} –¥–Ω–µ–π',
                'template': '''
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                    <div style="background: linear-gradient(135deg, #ef4444, #f59e0b); color: white; padding: 20px; text-align: center;">
                        <h1>‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —ç–∫–∑–∞–º–µ–Ω–µ</h1>
                        <h2>–û—Å—Ç–∞–ª–æ—Å—å {{days_left}} –¥–Ω–µ–π –¥–æ BIG —ç–∫–∑–∞–º–µ–Ω–∞</h2>
                    </div>
                    
                    <div style="padding: 20px; background: #f8f9fa;">
                        <h3>–ü—Ä–∏–≤–µ—Ç, {{user_name}}!</h3>
                        
                        <div style="background: #fff3cd; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #f59e0b;">
                            <h4>üìÖ –í–∞—à —ç–∫–∑–∞–º–µ–Ω —Å–æ—Å—Ç–æ–∏—Ç—Å—è:</h4>
                            <p><strong>{{exam_date}}</strong></p>
                            <p><strong>–í—Ä–µ–º—è:</strong> {{exam_time}}</p>
                            <p><strong>–ú–µ—Å—Ç–æ:</strong> {{exam_location}}</p>
                        </div>
                        
                        <div style="background: white; padding: 20px; border-radius: 8px; margin: 20px 0;">
                            <h4>üìä –í–∞—à–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å:</h4>
                            <p>–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: <strong>{{readiness_percentage}}%</strong></p>
                            <p>–û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: <strong>{{readiness_level}}</strong></p>
                            
                            <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 15px 0;">
                                <h5>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:</h5>
                                <ul>
                                    {% for recommendation in recommendations %}
                                    <li>{{recommendation}}</li>
                                    {% endfor %}
                                </ul>
                            </div>
                        </div>
                        
                        <div style="text-align: center; margin: 30px 0;">
                            <a href="{{study_url}}" style="background: #ef4444; color: white; padding: 12px 30px; text-decoration: none; border-radius: 6px; display: inline-block;">
                                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É
                            </a>
                        </div>
                    </div>
                </div>
                '''
            }
        }
    
    def send_email_notification(self, user_id, notification_type, context_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            user = User.query.get(user_id)
            if not user or not user.email:
                return False
            
            template = self.email_templates.get(notification_type)
            if not template:
                return False
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context = {
                'user_name': user.first_name or user.username,
                'user_email': user.email,
                'login_url': f"{current_app.config.get('BASE_URL', 'http://localhost:5000')}/auth/login",
                'dashboard_url': f"{current_app.config.get('BASE_URL', 'http://localhost:5000')}/dashboard",
                'unsubscribe_url': f"{current_app.config.get('BASE_URL', 'http://localhost:5000')}/unsubscribe/{user.id}",
                **context_data
            }
            
            # –†–µ–Ω–¥–µ—Ä–∏–º —à–∞–±–ª–æ–Ω
            subject = render_template_string(template['subject'], **context)
            html_content = render_template_string(template['template'], **context)
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = MIMEMultipart('alternative')
            msg['Subject'] = subject
            msg['From'] = current_app.config.get('MAIL_DEFAULT_SENDER', 'noreply@mentora.academy')
            msg['To'] = user.email
            
            # –î–æ–±–∞–≤–ª—è–µ–º HTML –∫–æ–Ω—Ç–µ–Ω—Ç
            html_part = MIMEText(html_content, 'html', 'utf-8')
            msg.attach(html_part)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
            self._send_email(msg)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
            current_app.logger.info(f"Email notification sent to {user.email}: {notification_type}")
            return True
            
        except Exception as e:
            current_app.logger.error(f"Error sending email notification: {e}")
            return False
    
    def _send_email(self, msg):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email —á–µ—Ä–µ–∑ SMTP"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            smtp_server = current_app.config.get('MAIL_SERVER', 'localhost')
            smtp_port = current_app.config.get('MAIL_PORT', 587)
            smtp_username = current_app.config.get('MAIL_USERNAME')
            smtp_password = current_app.config.get('MAIL_PASSWORD')
            use_tls = current_app.config.get('MAIL_USE_TLS', True)
            
            # –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π SMTP
            if smtp_server == 'localhost':
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º Python's built-in SMTP server –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                with smtplib.SMTP('localhost', 1025) as server:
                    server.send_message(msg)
            else:
                # –ü—Ä–æ–¥–∞–∫—à–Ω SMTP
                with smtplib.SMTP(smtp_server, smtp_port) as server:
                    if use_tls:
                        server.starttls()
                    if smtp_username and smtp_password:
                        server.login(smtp_username, smtp_password)
                    server.send_message(msg)
                    
        except Exception as e:
            current_app.logger.error(f"SMTP error: {e}")
            raise
    
    def send_session_reminder(self, user_id, session_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏–∏"""
        try:
            session = StudySession.query.get(session_id)
            if not session:
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context = {
                'session_title': f"–ò–∑—É—á–µ–Ω–∏–µ {session.domain.name if session.domain else '–º–∞—Ç–µ—Ä–∏–∞–ª–∞'}",
                'session_time': session.started_at.strftime('%H:%M') if session.started_at else '09:00',
                'session_duration': session.planned_duration or 2,
                'domain_name': session.domain.name if session.domain else '–û–±—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª',
                'overall_progress': round(session.learning_plan.overall_progress or 0),
                'days_to_exam': self._calculate_days_to_exam(session.learning_plan),
                'daily_tip': self._get_daily_tip()
            }
            
            return self.send_email_notification(user_id, 'session_reminder', context)
            
        except Exception as e:
            current_app.logger.error(f"Error sending session reminder: {e}")
            return False
    
    def send_weekly_progress_report(self, user_id, plan_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        try:
            plan = PersonalLearningPlan.query.get(plan_id)
            if not plan:
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é
            week_start = datetime.now(timezone.utc) - timedelta(days=7)
            week_sessions = plan.study_sessions.filter(
                StudySession.completed_at >= week_start
            ).all()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            completed_sessions = len([s for s in week_sessions if s.status == 'completed'])
            hours_studied = sum(s.actual_duration or 0 for s in week_sessions if s.status == 'completed')
            questions_answered = sum(s.questions_answered or 0 for s in week_sessions)
            correct_answers = sum(s.correct_answers or 0 for s in week_sessions)
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –¥–æ–º–µ–Ω–∞–º
            domain_progress = self._get_domain_progress(plan)
            
            # –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è
            next_week_sessions = self._get_next_week_sessions(plan)
            
            context = {
                'week_number': self._calculate_week_number(plan),
                'completed_sessions': completed_sessions,
                'hours_studied': round(hours_studied / 60, 1),  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —á–∞—Å—ã
                'questions_answered': questions_answered,
                'correct_answers': correct_answers,
                'domain_progress': domain_progress,
                'next_week_sessions': next_week_sessions
            }
            
            return self.send_email_notification(user_id, 'weekly_progress', context)
            
        except Exception as e:
            current_app.logger.error(f"Error sending weekly report: {e}")
            return False
    
    def send_exam_reminder(self, user_id, plan_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —ç–∫–∑–∞–º–µ–Ω–µ"""
        try:
            plan = PersonalLearningPlan.query.get(plan_id)
            if not plan or not plan.exam_date:
                return False
            
            days_left = (plan.exam_date - datetime.now(timezone.utc).date()).days
            
            if days_left <= 0:
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            readiness_data = plan.calculate_readiness()
            
            context = {
                'days_left': days_left,
                'exam_date': plan.exam_date.strftime('%d.%m.%Y'),
                'exam_time': '09:00',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                'exam_location': '–£–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏',
                'readiness_percentage': round(readiness_data.get('readiness_percentage', 0)),
                'readiness_level': readiness_data.get('readiness_level', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                'recommendations': self._get_exam_recommendations(plan, days_left),
                'study_url': f"{current_app.config.get('BASE_URL', 'http://localhost:5000')}/dashboard/learning-plan/{plan.id}"
            }
            
            return self.send_email_notification(user_id, 'exam_reminder', context)
            
        except Exception as e:
            current_app.logger.error(f"Error sending exam reminder: {e}")
            return False
    
    def _calculate_days_to_exam(self, plan):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–Ω–∏ –¥–æ —ç–∫–∑–∞–º–µ–Ω–∞"""
        if not plan or not plan.exam_date:
            return 0
        return (plan.exam_date - datetime.now(timezone.utc).date()).days
    
    def _get_daily_tip(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–≤–µ—Ç –¥–Ω—è"""
        tips = [
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É –ü–æ–º–æ–¥–æ—Ä–æ: 25 –º–∏–Ω—É—Ç —É—á–µ–±—ã, 5 –º–∏–Ω—É—Ç –æ—Ç–¥—ã—Ö–∞",
            "–ü–æ–≤—Ç–æ—Ä—è–π—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –ø–µ—Ä–µ–¥ —Å–Ω–æ–º - —ç—Ç–æ —É–ª—É—á—à–∞–µ—Ç –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤",
            "–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞—è—Ö",
            "–û–±—ä—è—Å–Ω—è–π—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥—Ä—É–≥–∏–º - —ç—Ç–æ –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± –ø–æ–Ω—è—Ç—å –µ–≥–æ —Å–∞–º–æ–º—É"
        ]
        import random
        return random.choice(tips)
    
    def _get_domain_progress(self, plan):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –¥–æ–º–µ–Ω–∞–º"""
        domain_analysis = plan.get_domain_analysis()
        progress = []
        
        for domain_code, data in domain_analysis.items():
            if data.get('has_data'):
                progress.append({
                    'name': data.get('name', domain_code),
                    'progress': round(data.get('accuracy_percentage', 0)),
                    'target': round(data.get('target_percentage', 80))
                })
        
        return progress[:5]  # –¢–æ–ø-5 –¥–æ–º–µ–Ω–æ–≤
    
    def _get_next_week_sessions(self, plan):
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–Ω—è—Ç–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é"""
        schedule = plan.get_study_schedule()
        if not schedule or not schedule.get('weekly_schedule'):
            return []
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–µ–¥–µ–ª—é –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        week_data = schedule['weekly_schedule'][0] if schedule['weekly_schedule'] else {}
        sessions = week_data.get('daily_sessions', [])
        
        return [
            {
                'day': session.get('day', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'),
                'title': session.get('title', '–ò–∑—É—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞'),
                'duration': session.get('duration', 2)
            }
            for session in sessions[:5]  # –ü–µ—Ä–≤—ã–µ 5 –∑–∞–Ω—è—Ç–∏–π
        ]
    
    def _calculate_week_number(self, plan):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è"""
        if not plan.start_date:
            return 1
        
        start_date = plan.start_date
        if isinstance(start_date, str):
            start_date = datetime.strptime(start_date, '%Y-%m-%d').date()
        
        weeks_passed = (datetime.now(timezone.utc).date() - start_date).days // 7
        return max(1, weeks_passed + 1)
    
    def _get_exam_recommendations(self, plan, days_left):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–∞"""
        if days_left <= 7:
            return [
                "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏",
                "–ü—Ä–æ–π–¥–∏—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É",
                "–û—Ç–¥–æ—Ö–Ω–∏—Ç–µ –∏ –≤—ã—Å–ø–∏—Ç–µ—Å—å –ø–µ—Ä–µ–¥ —ç–∫–∑–∞–º–µ–Ω–æ–º"
            ]
        elif days_left <= 14:
            return [
                "–°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–ª–∞–±—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö",
                "–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –Ω–∞ —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö",
                "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã"
            ]
        else:
            return [
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è",
                "–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –Ω–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö",
                "–ò–∑—É—á–∞–π—Ç–µ –Ω–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"
            ]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_system = LearningNotificationSystem() 