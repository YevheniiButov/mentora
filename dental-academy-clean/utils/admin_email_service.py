"""
Admin Email Service
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email –∏–∑ –∞–¥–º–∏–Ω-–∫–∞–±–∏–Ω–µ—Ç–∞
"""

from flask import current_app
from models import User
from utils.email_service import send_email_confirmation
from utils.resend_email_service import send_email_confirmation_resend
import requests
import json

def send_admin_email(user, subject, message, email_type='custom'):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ –∞–¥–º–∏–Ω-–∫–∞–±–∏–Ω–µ—Ç–∞
    
    Args:
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        subject: –¢–µ–º–∞ –ø–∏—Å—å–º–∞
        message: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞
        email_type: –¢–∏–ø –ø–∏—Å—å–º–∞ ('custom', 'confirmation', 'notification')
    
    Returns:
        bool: True –µ—Å–ª–∏ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        print(f"=== ADMIN EMAIL SENDING to {user.email} ===")
        print(f"=== SUBJECT: {subject} ===")
        print(f"=== TYPE: {email_type} ===")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ email
        email_provider = current_app.config.get('EMAIL_PROVIDER', 'smtp')
        print(f"=== EMAIL_PROVIDER: {email_provider} ===")
        
        if email_provider == 'resend':
            return send_admin_email_resend(user, subject, message, email_type)
        else:
            return send_admin_email_smtp(user, subject, message, email_type)
            
    except Exception as e:
        print(f"=== ADMIN EMAIL ERROR: {str(e)} ===")
        current_app.logger.error(f"Failed to send admin email to {user.email}: {str(e)}")
        return False

def send_admin_email_resend(user, subject, message, email_type):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —á–µ—Ä–µ–∑ Resend API"""
    try:
        api_key = current_app.config.get('RESEND_API_KEY')
        from_email = current_app.config.get('RESEND_FROM_EMAIL', 'Mentora <noreply@bigmentor.nl>')
        
        if not api_key:
            print("‚ùå RESEND_API_KEY not configured")
            return False
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º HTML –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        html_content = get_admin_email_html(user, subject, message, email_type)
        text_content = get_admin_email_text(user, subject, message, email_type)
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è Resend API
        email_data = {
            "from": from_email,
            "to": [user.email],
            "subject": subject,
            "html": html_content,
            "text": text_content
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Resend API
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
        
        response = requests.post(
            "https://api.resend.com/emails",
            headers=headers,
            json=email_data,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Admin email sent successfully via Resend")
            print(f"üìß Email ID: {result.get('id')}")
            current_app.logger.info(f"Admin email sent to {user.email} via Resend. ID: {result.get('id')}")
            return True
        else:
            print(f"‚ùå Resend API error: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Resend API exception: {str(e)}")
        current_app.logger.error(f"Failed to send admin email to {user.email} via Resend: {str(e)}")
        return False

def send_admin_email_smtp(user, subject, message, email_type):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —á–µ—Ä–µ–∑ SMTP (fallback)"""
    try:
        from flask_mail import Message
        from extensions import mail
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ email
        mail_suppress = current_app.config.get('MAIL_SUPPRESS_SEND', False)
        
        if mail_suppress:
            # Development mode - console output
            print(f"\n{'='*60}")
            print(f"üìß ADMIN EMAIL for {user.email}")
            print(f"{'='*60}")
            print(f"üë§ User: {user.first_name} {user.last_name}")
            print(f"üìß Email: {user.email}")
            print(f"üìù Subject: {subject}")
            print(f"üìÑ Message: {message}")
            print(f"üè∑Ô∏è Type: {email_type}")
            print(f"{'='*60}\n")
            return True
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = Message(
            subject=subject,
            recipients=[user.email],
            sender=current_app.config['MAIL_DEFAULT_SENDER']
        )
        
        # HTML –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        msg.html = get_admin_email_html(user, subject, message, email_type)
        msg.body = get_admin_email_text(user, subject, message, email_type)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
        mail.send(msg)
        print(f"‚úÖ Admin email sent successfully via SMTP")
        current_app.logger.info(f"Admin email sent to {user.email} via SMTP")
        return True
        
    except Exception as e:
        print(f"‚ùå SMTP error: {str(e)}")
        current_app.logger.error(f"Failed to send admin email to {user.email} via SMTP: {str(e)}")
        return False

def get_admin_email_html(user, subject, message, email_type):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è admin email"""
    base_url = current_app.config.get('BASE_URL', 'https://bigmentor.nl')
    
    return f"""
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>{subject}</title>
        <style>
            body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
            .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
            .header {{ background-color: #3ECDC1; color: white; padding: 20px; text-align: center; }}
            .content {{ padding: 20px; background-color: #f9f9f9; }}
            .footer {{ padding: 20px; text-align: center; font-size: 12px; color: #666; }}
            .message {{ background-color: white; padding: 20px; border-radius: 5px; margin: 20px 0; }}
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>Mentora</h1>
                <p>–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∞–∫–∞–¥–µ–º–∏—è</p>
            </div>
            <div class="content">
                <h2>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!</h2>
                <div class="message">
                    {message.replace(chr(10), '<br>')}
                </div>
                <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ Mentora</p>
            </div>
            <div class="footer">
                <p>–≠—Ç–æ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ Mentora</p>
                <p><a href="{base_url}">–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç</a></p>
            </div>
        </div>
    </body>
    </html>
    """

def get_admin_email_text(user, subject, message, email_type):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è admin email"""
    return f"""
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!

{message}

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ Mentora

---
–≠—Ç–æ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ Mentora
"""

def send_bulk_admin_emails(users, subject, message, email_type='custom'):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    
    Args:
        users: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        subject: –¢–µ–º–∞ –ø–∏—Å—å–º–∞
        message: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞
        email_type: –¢–∏–ø –ø–∏—Å—å–º–∞
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ {'sent': int, 'failed': int, 'errors': list}
    """
    result = {'sent': 0, 'failed': 0, 'errors': []}
    
    for user in users:
        if user and user.email:
            try:
                success = send_admin_email(user, subject, message, email_type)
                if success:
                    result['sent'] += 1
                else:
                    result['failed'] += 1
                    result['errors'].append(f"Failed to send to {user.email}")
            except Exception as e:
                result['failed'] += 1
                result['errors'].append(f"Error sending to {user.email}: {str(e)}")
    
    return result
