"""
Admin Email Service
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email –∏–∑ –∞–¥–º–∏–Ω-–∫–∞–±–∏–Ω–µ—Ç–∞
"""

from flask import current_app, render_template
from models import User
from utils.email_service import send_email_confirmation
from utils.resend_email_service import send_email_confirmation_resend
import requests
import json

def send_admin_email(user, subject, message, email_type='custom', **kwargs):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ –∞–¥–º–∏–Ω-–∫–∞–±–∏–Ω–µ—Ç–∞
    
    Args:
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        subject: –¢–µ–º–∞ –ø–∏—Å—å–º–∞
        message: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞
        email_type: –¢–∏–ø –ø–∏—Å—å–º–∞ ('custom', 'confirmation', 'notification', 'password_reset')
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
    
    Returns:
        bool: True –µ—Å–ª–∏ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        print(f"=== ADMIN EMAIL SENDING to {user.email} ===")
        print(f"=== SUBJECT: {subject} ===")
        print(f"=== TYPE: {email_type} ===")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ email
        email_provider = current_app.config.get('EMAIL_PROVIDER', 'smtp')
        print(f"=== EMAIL_PROVIDER: {email_provider} ===")
        
        if email_provider == 'resend':
            return send_admin_email_resend(user, subject, message, email_type, **kwargs)
        else:
            return send_admin_email_smtp(user, subject, message, email_type, **kwargs)
            
    except Exception as e:
        print(f"=== ADMIN EMAIL ERROR: {str(e)} ===")
        current_app.logger.error(f"Failed to send admin email to {user.email}: {str(e)}")
        return False

def send_admin_email_resend(user, subject, message, email_type, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —á–µ—Ä–µ–∑ Resend API"""
    try:
        api_key = current_app.config.get('RESEND_API_KEY')
        from_email = current_app.config.get('RESEND_FROM_EMAIL', 'Mentora <noreply@bigmentor.nl>')
        
        if not api_key:
            print("‚ùå RESEND_API_KEY not configured")
            return False
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º HTML –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        html_content = get_admin_email_html(user, subject, message, email_type, **kwargs)
        text_content = get_admin_email_text(user, subject, message, email_type)
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è Resend API
        email_data = {
            "from": from_email,
            "to": [user.email],
            "subject": subject,
            "html": html_content,
            "text": text_content
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Resend API
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
        
        response = requests.post(
            "https://api.resend.com/emails",
            headers=headers,
            json=email_data,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Admin email sent successfully via Resend")
            print(f"üìß Email ID: {result.get('id')}")
            current_app.logger.info(f"Admin email sent to {user.email} via Resend. ID: {result.get('id')}")
            return True
        else:
            print(f"‚ùå Resend API error: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Resend API exception: {str(e)}")
        current_app.logger.error(f"Failed to send admin email to {user.email} via Resend: {str(e)}")
        return False

def send_admin_email_smtp(user, subject, message, email_type, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —á–µ—Ä–µ–∑ SMTP (fallback)"""
    try:
        from flask_mail import Message
        from extensions import mail
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ email
        mail_suppress = current_app.config.get('MAIL_SUPPRESS_SEND', False)
        
        if mail_suppress:
            # Development mode - console output
            print(f"\n{'='*60}")
            print(f"üìß ADMIN EMAIL for {user.email}")
            print(f"{'='*60}")
            print(f"üë§ User: {user.first_name} {user.last_name}")
            print(f"üìß Email: {user.email}")
            print(f"üìù Subject: {subject}")
            print(f"üìÑ Message: {message}")
            print(f"üè∑Ô∏è Type: {email_type}")
            print(f"{'='*60}\n")
            return True
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = Message(
            subject=subject,
            recipients=[user.email],
            sender=current_app.config['MAIL_DEFAULT_SENDER']
        )
        
        # HTML –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        msg.html = get_admin_email_html(user, subject, message, email_type, **kwargs)
        msg.body = get_admin_email_text(user, subject, message, email_type)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
        mail.send(msg)
        print(f"‚úÖ Admin email sent successfully via SMTP")
        current_app.logger.info(f"Admin email sent to {user.email} via SMTP")
        return True
        
    except Exception as e:
        print(f"‚ùå SMTP error: {str(e)}")
        current_app.logger.error(f"Failed to send admin email to {user.email} via SMTP: {str(e)}")
        return False

def get_admin_email_html(user, subject, message, email_type, **kwargs):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è admin email –∏—Å–ø–æ–ª—å–∑—É—è —à–∞–±–ª–æ–Ω—ã"""
    base_url = current_app.config.get('BASE_URL', 'https://bigmentor.nl')
    
    # –í—ã–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–∏—Å—å–º–∞
    if email_type == 'password_reset':
        template = 'emails/admin_password_reset.html'
        template_vars = {
            'user': user,
            'subject': subject,
            'message': message,
            'temp_password': kwargs.get('temp_password', ''),
            'login_url': f"{base_url}/auth/login"
        }
    elif email_type == 'notification':
        template = 'emails/admin_notification.html'
        template_vars = {
            'user': user,
            'subject': subject,
            'message': message,
            'notification_type': kwargs.get('notification_type', 'custom'),
            'action_url': kwargs.get('action_url'),
            'action_text': kwargs.get('action_text')
        }
    else:  # custom
        template = 'emails/admin_custom.html'
        template_vars = {
            'user': user,
            'subject': subject,
            'message': message,
            'action_url': kwargs.get('action_url'),
            'action_text': kwargs.get('action_text')
        }
    
    try:
        return render_template(template, **template_vars)
    except Exception as e:
        print(f"Template rendering error: {e}")
        # Fallback to simple HTML
        return f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>{subject}</title>
        </head>
        <body>
            <h1>Mentora</h1>
            <h2>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!</h2>
            <p>{message.replace(chr(10), '<br>')}</p>
            <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ Mentora</p>
        </body>
        </html>
        """

def get_admin_email_text(user, subject, message, email_type):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è admin email"""
    return f"""
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!

{message}

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ Mentora

---
–≠—Ç–æ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏ Mentora
"""

def send_bulk_admin_emails(users, subject, message, email_type='custom', **kwargs):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    
    Args:
        users: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        subject: –¢–µ–º–∞ –ø–∏—Å—å–º–∞
        message: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞
        email_type: –¢–∏–ø –ø–∏—Å—å–º–∞
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ {'sent': int, 'failed': int, 'errors': list}
    """
    result = {'sent': 0, 'failed': 0, 'errors': []}
    
    for user in users:
        if user and user.email:
            try:
                success = send_admin_email(user, subject, message, email_type, **kwargs)
                if success:
                    result['sent'] += 1
                else:
                    result['failed'] += 1
                    result['errors'].append(f"Failed to send to {user.email}")
            except Exception as e:
                result['failed'] += 1
                result['errors'].append(f"Error sending to {user.email}: {str(e)}")
    
    return result

def send_password_reset_email(user, temp_password):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    Args:
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        temp_password: –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
    
    Returns:
        bool: True –µ—Å–ª–∏ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    subject = "Mentora - –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
    message = "–í–∞—à –ø–∞—Ä–æ–ª—å –±—ã–ª —Å–±—Ä–æ—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
    
    return send_admin_email(
        user, 
        subject, 
        message, 
        'password_reset', 
        temp_password=temp_password
    )

def send_notification_email(user, subject, message, notification_type='custom', action_url=None, action_text=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    Args:
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        subject: –¢–µ–º–∞ –ø–∏—Å—å–º–∞
        message: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞
        notification_type: –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ('system_update', 'maintenance', 'feature', 'custom')
        action_url: URL –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è
        action_text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è
    
    Returns:
        bool: True –µ—Å–ª–∏ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    return send_admin_email(
        user, 
        subject, 
        message, 
        'notification', 
        notification_type=notification_type,
        action_url=action_url,
        action_text=action_text
    )

def send_custom_email(user, subject, message, action_url=None, action_text=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ –ø–∏—Å—å–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    Args:
        user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        subject: –¢–µ–º–∞ –ø–∏—Å—å–º–∞
        message: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞
        action_url: URL –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è
        action_text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è
    
    Returns:
        bool: True –µ—Å–ª–∏ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    """
    return send_admin_email(
        user, 
        subject, 
        message, 
        'custom', 
        action_url=action_url,
        action_text=action_text
    )
