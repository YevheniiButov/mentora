#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –æ–±—É—á–µ–Ω–∏—è
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω
"""

import json
from datetime import datetime, timedelta, timezone
from typing import Dict, List, Tuple, Optional
from models import User, PersonalLearningPlan, DiagnosticSession, BIGDomain, Question, Lesson, Module, Subject, StudySession
from extensions import db
import math
from utils.content_recommendations import get_smart_recommendations
from models import UserProgress, TestResult

# –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∏–∑ generate_results() –≤ —Ñ–æ—Ä–º–∞—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def convert_diagnostic_to_planner_format(diagnostic_data):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    print(f"üîç –û–¢–õ–ê–î–ö–ê: convert_diagnostic_to_planner_format –≤—ã–∑–≤–∞–Ω–∞")
    print(f"üîç –û–¢–õ–ê–î–ö–ê: diagnostic_data keys = {list(diagnostic_data.keys())}")
    
    # –í–°–ï 25 –¥–æ–º–µ–Ω–æ–≤ BIG —ç–∫–∑–∞–º–µ–Ω–∞
    ALL_BIG_DOMAINS = {
        'domain_1': 'Endodontics',
        'domain_2': 'Periodontics', 
        'domain_3': 'Orthodontics',
        'domain_4': 'Oral Surgery',
        'domain_5': 'Prosthodontics',
        'domain_6': 'Preventive Care',
        'domain_7': 'Dental Materials',
        'domain_8': 'Oral Pathology',
        'domain_9': 'Oral Medicine',
        'domain_10': 'Dental Radiology',
        'domain_11': 'Dental Anatomy',
        'domain_12': 'Dental Physiology',
        'domain_13': 'Dental Pharmacology',
        'domain_14': 'Dental Anesthesia',
        'domain_15': 'Dental Emergency',
        'domain_16': 'Dental Ethics',
        'domain_17': 'Dental Law',
        'domain_18': 'Practice Management',
        'domain_19': 'Patient Communication',
        'domain_20': 'Infection Control',
        'domain_21': 'Dental Implants',
        'domain_22': 'Cosmetic Dentistry',
        'domain_23': 'Pediatric Dentistry',
        'domain_24': 'Geriatric Dentistry',
        'domain_25': 'Special Needs Dentistry'
    }
    
    # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –Ω–∞ –Ω–æ–≤—ã–µ
    OLD_TO_NEW_DOMAIN_MAPPING = {
        'THER': 'domain_1',      # –¢–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è -> Endodontics
        'SURG': 'domain_4',      # –•–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è -> Oral Surgery
        'PROTH': 'domain_5',     # –û—Ä—Ç–æ–ø–µ–¥–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è -> Prosthodontics
        'PEDI': 'domain_23',     # –î–µ—Ç—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è -> Pediatric Dentistry
        'PARO': 'domain_2',      # –ü–∞—Ä–æ–¥–æ–Ω—Ç–æ–ª–æ–≥–∏—è -> Periodontics
        'ORTHO': 'domain_3',     # –û—Ä—Ç–æ–¥–æ–Ω—Ç–∏—è -> Orthodontics
        'PREV': 'domain_6',      # –ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ -> Preventive Care
        'ETHIEK': 'domain_16',   # –≠—Ç–∏–∫–∞ –∏ –ø—Ä–∞–≤–æ -> Dental Ethics
        'ANATOMIE': 'domain_11', # –ê–Ω–∞—Ç–æ–º–∏—è -> Dental Anatomy
        'FYSIOLOGIE': 'domain_12', # –§–∏–∑–∏–æ–ª–æ–≥–∏—è -> Dental Physiology
        'PATHOLOGIE': 'domain_8', # –ü–∞—Ç–æ–ª–æ–≥–∏—è -> Oral Pathology
        'MICROBIOLOGIE': 'domain_20', # –ú–∏–∫—Ä–æ–±–∏–æ–ª–æ–≥–∏—è -> Infection Control
        'MATERIAALKUNDE': 'domain_7', # –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤–µ–¥–µ–Ω–∏–µ -> Dental Materials
        'RADIOLOGIE': 'domain_10', # –†–µ–Ω—Ç–≥–µ–Ω–æ–ª–æ–≥–∏—è -> Dental Radiology
        'ALGEMENE_GENEESKUNDE': 'domain_9', # –û–±—â–∞—è –º–µ–¥–∏—Ü–∏–Ω–∞ -> Oral Medicine
        'EMERGENCY': 'domain_15', # –ù–µ–æ—Ç–ª–æ–∂–Ω–∞—è –ø–æ–º–æ—â—å -> Dental Emergency
        'SYSTEMIC': 'domain_9',  # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è -> Oral Medicine
        'PHARMA': 'domain_13',   # –§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è -> Dental Pharmacology
        'INFECTION': 'domain_20', # –ò–Ω—Ñ–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å -> Infection Control
        'SPECIAL': 'domain_25',  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ -> Special Needs Dentistry
        'DIAGNOSIS': 'domain_8', # –°–ª–æ–∂–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ -> Oral Pathology
        'DUTCH': 'domain_18',    # –ì–æ–ª–ª–∞–Ω–¥—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è -> Practice Management
        'PROFESSIONAL': 'domain_17', # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ -> Dental Law
        'FARMACOLOGIE': 'domain_13', # –§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ) -> Dental Pharmacology
        'DIAGNOSIS_SPECIAL': 'domain_8' # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ -> Oral Pathology
    }
    
    converted = {}
    
    print(f"üîç –û–¢–õ–ê–î–ö–ê: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –í–°–ï 25 –¥–æ–º–µ–Ω–æ–≤...")
    
    for domain_code, domain_name in ALL_BIG_DOMAINS.items():
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–º–µ–Ω {domain_code} = {domain_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–æ–º—É –¥–æ–º–µ–Ω—É (–ø—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
        if (diagnostic_data.get('domain_statistics') and 
            domain_code in diagnostic_data['domain_statistics'] and
            diagnostic_data['domain_statistics'][domain_code].get('has_data', False)):
            
            # –ï—Å—Ç—å –ø—Ä—è–º—ã–µ –¥–∞–Ω–Ω—ã–µ
            domain_data = diagnostic_data['domain_statistics'][domain_code]
            score = domain_data.get('accuracy_percentage', 0)
            questions_answered = domain_data.get('questions_answered', 0)
            correct_answers = domain_data.get('correct_answers', 0)
            print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ–º–µ–Ω {domain_name} –∏–º–µ–µ—Ç –ø—Ä—è–º—ã–µ –¥–∞–Ω–Ω—ã–µ: {score}%")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö –¥–æ–º–µ–Ω–æ–≤
            score = 0
            questions_answered = 0
            correct_answers = 0
            
            # –ò—â–µ–º —Å—Ç–∞—Ä—ã–π –¥–æ–º–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –º–∞–ø–ø–∏—Ç—Å—è –Ω–∞ —ç—Ç–æ—Ç –Ω–æ–≤—ã–π
            for old_domain, new_domain in OLD_TO_NEW_DOMAIN_MAPPING.items():
                if new_domain == domain_code:
                    if (diagnostic_data.get('domain_statistics') and 
                        old_domain in diagnostic_data['domain_statistics'] and
                        diagnostic_data['domain_statistics'][old_domain].get('has_data', False)):
                        
                        # –ù–∞—à–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–∞—Ä–æ–º –¥–æ–º–µ–Ω–µ
                        old_domain_data = diagnostic_data['domain_statistics'][old_domain]
                        score = old_domain_data.get('accuracy_percentage', 0)
                        questions_answered = old_domain_data.get('questions_answered', 0)
                        correct_answers = old_domain_data.get('correct_answers', 0)
                        print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ–º–µ–Ω {domain_name} –∏–º–µ–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –¥–æ–º–µ–Ω–∞ {old_domain}: {score}%")
                        break
            
            if score == 0:
                print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ–º–µ–Ω {domain_name} –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö: 0%")
        
        converted[domain_name] = {
            'domain_code': domain_code,
            'score': score,
            'questions_answered': questions_answered,
            'correct_answers': correct_answers,
            'accuracy': score,
            'target': 85,  # –¶–µ–ª–µ–≤–æ–π –±–∞–ª–ª
            'hours': max(24 - score * 0.3, 8)  # –†–∞—Å—á–µ—Ç —á–∞—Å–æ–≤
        }
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –¥–æ–º–µ–Ω {domain_name} = {converted[domain_name]}")
    
    print(f"üîç –û–¢–õ–ê–î–ö–ê: –∏—Ç–æ–≥–æ–≤—ã–π converted = {converted}")
    print(f"üîç –û–¢–õ–ê–î–ö–ê: –≤—Å–µ–≥–æ –¥–æ–º–µ–Ω–æ–≤ = {len(converted)}")
    return converted

class LearningPlanGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –æ–±—É—á–µ–Ω–∏—è"""
    
    def __init__(self, user_id: int):
        self.user_id = user_id
        self.user = User.query.get(user_id)
        
    def generate_plan(self, exam_date: Optional[datetime] = None) -> PersonalLearningPlan:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è"""
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é —Å–µ—Å—Å–∏—é
        diagnostic_session = self._get_latest_diagnostic()
        if not diagnostic_session:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–µ—Å—Å–∏—è. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É.")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        domain_analysis = self._analyze_diagnostic_results(diagnostic_session)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–∞–±—ã–µ –∏ —Å–∏–ª—å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
        weak_domains, strong_domains = self._identify_domain_strengths(domain_analysis)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
        target_ability = self._calculate_target_ability(exam_date)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è
        study_schedule = self._create_study_schedule(weak_domains, exam_date)
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ—Ö–∏
        milestones = self._create_milestones(exam_date)
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è
        plan = PersonalLearningPlan(
            user_id=self.user_id,
            exam_date=exam_date.date() if exam_date else None,
            target_ability=target_ability,
            study_hours_per_week=20.0,  # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º
            current_ability=diagnostic_session.current_ability,
            overall_progress=0.0,
            estimated_readiness=self._calculate_readiness(diagnostic_session.current_ability, target_ability),
            status='active'
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        plan.set_domain_analysis(domain_analysis)
        plan.set_weak_domains(weak_domains)
        plan.set_strong_domains(strong_domains)
        plan.set_study_schedule(study_schedule)
        plan.set_milestones(milestones)
        
        return plan
    
    def _get_latest_diagnostic(self) -> Optional[DiagnosticSession]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return DiagnosticSession.query.filter_by(
            user_id=self.user_id,
            status='completed'
        ).order_by(DiagnosticSession.completed_at.desc()).first()
    
    def _analyze_diagnostic_results(self, diagnostic_session: DiagnosticSession) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ –¥–æ–º–µ–Ω–∞–º"""
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        responses = diagnostic_session.responses.all()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ –¥–æ–º–µ–Ω–∞–º
        domain_results = {}
        domains = BIGDomain.query.filter_by(is_active=True).all()
        
        for domain in domains:
            # –ò—â–µ–º –≤–æ–ø—Ä–æ—Å—ã —ç—Ç–æ–≥–æ –¥–æ–º–µ–Ω–∞ —á–µ—Ä–µ–∑ —Å–≤—è–∑—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
            domain_questions = []
            for response in responses:
                question = response.question
                if question and hasattr(question, 'big_domain_id') and question.big_domain_id == domain.id:
                    domain_questions.append(response)
            
            if domain_questions:
                correct_count = sum(1 for r in domain_questions if r.is_correct)
                total_count = len(domain_questions)
                accuracy = correct_count / total_count
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –¥–ª—è –¥–æ–º–µ–Ω–∞
                abilities = [r.ability_after for r in domain_questions if r.ability_after is not None]
                avg_ability = sum(abilities) / len(abilities) if abilities else 0.0
                
                domain_results[domain.name] = {
                    'domain_id': domain.id,
                    'domain_code': domain.code,
                    'questions_answered': total_count,
                    'correct_answers': correct_count,
                    'accuracy': accuracy,
                    'average_ability': avg_ability,
                    'weight_percentage': domain.weight_percentage,
                    "difficulty_level": "medium",
                    'recommended_focus': accuracy < 0.7,  # –§–æ–∫—É—Å –µ—Å–ª–∏ —Ç–æ—á–Ω–æ—Å—Ç—å < 70%
                    'estimated_hours_needed': self._estimate_hours_needed(accuracy, domain.weight_percentage)
                }
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–æ–º–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–ø–∏—Å—å
                domain_results[domain.name] = {
                    'domain_id': domain.id,
                    'domain_code': domain.code,
                    'questions_answered': 0,
                    'correct_answers': 0,
                    'accuracy': 0.0,
                    'average_ability': 0.0,
                    'weight_percentage': domain.weight_percentage,
                    "difficulty_level": "medium",
                    'recommended_focus': True,  # –§–æ–∫—É—Å –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                    'estimated_hours_needed': self._estimate_hours_needed(0.0, domain.weight_percentage)
                }
        
        return domain_results
    
    def _identify_domain_strengths(self, domain_analysis: Dict) -> Tuple[List[str], List[str]]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–∞–±—ã–µ –∏ —Å–∏–ª—å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏"""
        
        weak_domains = []
        strong_domains = []
        
        for domain_name, analysis in domain_analysis.items():
            if analysis['recommended_focus']:
                weak_domains.append(domain_name)
            else:
                strong_domains.append(domain_name)
        
        return weak_domains, strong_domains
    
    def _calculate_target_ability(self, exam_date: Optional[datetime]) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–ª–µ–≤—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–∞"""
        
        # –ë–∞–∑–æ–≤–∞—è —Ü–µ–ª–µ–≤–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –¥–ª—è BIG —ç–∫–∑–∞–º–µ–Ω–∞
        base_target = 0.7  # 70% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ–π —Å–¥–∞—á–∏
        
        if exam_date:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º exam_date –≤ datetime –µ—Å–ª–∏ —ç—Ç–æ date
            from datetime import date
            if isinstance(exam_date, date):
                exam_datetime = datetime.combine(exam_date, datetime.min.time())
            else:
                exam_datetime = exam_date
            
            days_until_exam = (exam_datetime - datetime.now(timezone.utc)).days
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ü–µ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ —ç–∫–∑–∞–º–µ–Ω–∞
            if days_until_exam < 30:
                base_target = 0.8  # –í—ã—Å–æ–∫–∞—è —Ü–µ–ª—å –¥–ª—è –±–ª–∏–∑–∫–æ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞
            elif days_until_exam < 90:
                base_target = 0.75  # –°—Ä–µ–¥–Ω—è—è —Ü–µ–ª—å
            else:
                base_target = 0.7  # –ë–∞–∑–æ–≤–∞—è —Ü–µ–ª—å –¥–ª—è –¥–∞–ª–µ–∫–æ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞
        
        return base_target
    
    def _create_study_schedule(self, weak_domains: List[str], exam_date: Optional[datetime]) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å
        if exam_date:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º exam_date –≤ datetime –µ—Å–ª–∏ —ç—Ç–æ date
            from datetime import date
            if isinstance(exam_date, date):
                exam_datetime = datetime.combine(exam_date, datetime.min.time()).replace(tzinfo=timezone.utc)
            else:
                exam_datetime = exam_date
            
            weeks_until_exam = max(1, (exam_datetime - datetime.now(timezone.utc)).days // 7)
        else:
            weeks_until_exam = 12  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 12 –Ω–µ–¥–µ–ª—å
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–∞–±—ã–µ –æ–±–ª–∞—Å—Ç–∏ –ø–æ –Ω–µ–¥–µ–ª—è–º
        weekly_schedule = []
        
        for week_num in range(1, weeks_until_exam + 1):
            week_domains = self._assign_domains_to_week(weak_domains, week_num, weeks_until_exam)
            
            # –°–æ–∑–¥–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            daily_sessions = self._create_daily_sessions(week_domains, week_num)
            
            weekly_schedule.append({
                'week_number': week_num,
                'focus_domains': week_domains,
                'daily_sessions': daily_sessions,
                'milestone_test': week_num % 2 == 0,  # –¢–µ—Å—Ç –∫–∞–∂–¥—ã–µ 2 –Ω–µ–¥–µ–ª–∏
                'estimated_hours': sum(session['duration'] for session in daily_sessions)
            })
        
        return {
            'total_weeks': weeks_until_exam,
            'weekly_schedule': weekly_schedule,
            'total_hours': sum(week['estimated_hours'] for week in weekly_schedule)
        }
    
    def _assign_domains_to_week(self, weak_domains: List[str], week_num: int, total_weeks: int) -> List[str]:
        """–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ–º–µ–Ω—ã –ø–æ –Ω–µ–¥–µ–ª—è–º"""
        
        if not weak_domains:
            return []
        
        # –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ 1-2 –¥–æ–º–µ–Ω–∞—Ö
        domains_per_week = max(1, len(weak_domains) // total_weeks)
        start_idx = (week_num - 1) * domains_per_week
        end_idx = min(start_idx + domains_per_week, len(weak_domains))
        
        return weak_domains[start_idx:end_idx]
    
    def _create_daily_sessions(self, week_domains: List[str], week_num: int) -> List[Dict]:
        """–°–æ–∑–¥–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –Ω–µ–¥–µ–ª–∏"""
        
        sessions = []
        session_types = ['theory', 'practice', 'theory', 'practice', 'review', 'test', 'review']
        
        for day, session_type in enumerate(session_types, 1):
            session = {
                'day': day,
                'type': session_type,
                'duration': self._get_session_duration(session_type),
                'focus_domains': week_domains if session_type in ['theory', 'practice'] else [],
                'description': self._get_session_description(session_type, week_domains)
            }
            sessions.append(session)
        
        return sessions
    
    def _get_session_duration(self, session_type: str) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ –≤ —á–∞—Å–∞—Ö"""
        durations = {
            'theory': 2.0,
            'practice': 2.0,
            'review': 1.0,
            'test': 1.5
        }
        return durations.get(session_type, 1.5)
    
    def _get_session_description(self, session_type: str, domains: List[str]) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        domain_names = ', '.join(domains) if domains else '–æ–±—â–∏–µ —Ç–µ–º—ã'
        
        descriptions = {
            'theory': f'–ò–∑—É—á–µ–Ω–∏–µ —Ç–µ–æ—Ä–∏–∏ –ø–æ —Ç–µ–º–∞–º: {domain_names}',
            'practice': f'–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ —Ç–µ–º–∞–º: {domain_names}',
            'review': f'–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –∏–∑—É—á–µ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞',
            'test': f'–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π –ø–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º —Ç–µ–º–∞–º'
        }
        return descriptions.get(session_type, '–£—á–µ–±–Ω–∞—è —Å–µ—Å—Å–∏—è')
    
    def _create_milestones(self, exam_date: Optional[datetime]) -> List[Dict]:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –≤–µ—Ö–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        milestones = []
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_progress = self._get_user_real_progress()
        
        # –í–µ—Ö–∞ 1: –ü–µ—Ä–≤—ã–µ —É—Ä–æ–∫–∏ (5 –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤)
        if user_progress['completed_lessons'] >= 5:
            milestones.append({
                'title': '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
                'description': f'–ó–∞–≤–µ—Ä—à–µ–Ω–æ {user_progress["completed_lessons"]} —É—Ä–æ–∫–æ–≤',
                'target_date': user_progress.get('first_completion_date'),
                'type': 'first_lessons',
                'week': 1,
                'completed': True,
                'progress': min(100, (user_progress['completed_lessons'] / 5) * 100)
            })
        else:
            milestones.append({
                'title': '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
                'description': f'–ó–∞–≤–µ—Ä—à–∏—Ç–µ 5 —É—Ä–æ–∫–æ–≤ (–ø—Ä–æ–≥—Ä–µ—Å—Å: {user_progress["completed_lessons"]}/5)',
                'target_date': None,
                'type': 'first_lessons',
                'week': 1,
                'completed': False,
                'progress': (user_progress['completed_lessons'] / 5) * 100
            })
        
        # –í–µ—Ö–∞ 2: –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è (10 —á–∞—Å–æ–≤)
        if user_progress['total_time_spent'] >= 600:  # 600 –º–∏–Ω—É—Ç = 10 —á–∞—Å–æ–≤
            milestones.append({
                'title': '–í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è',
                'description': f'–ü–æ—Ç—Ä–∞—á–µ–Ω–æ {user_progress["total_time_spent"] // 60} —á–∞—Å–æ–≤ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ',
                'target_date': user_progress.get('time_milestone_date'),
                'type': 'study_time',
                'week': 2,
                'completed': True,
                'progress': 100
            })
        else:
            hours_spent = user_progress['total_time_spent'] // 60
            milestones.append({
                'title': '–í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è',
                'description': f'–ü–æ—Ç—Ä–∞—Ç—å—Ç–µ 10 —á–∞—Å–æ–≤ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ (–ø—Ä–æ–≥—Ä–µ—Å—Å: {hours_spent}/10 —á)',
                'target_date': None,
                'type': 'study_time',
                'week': 2,
                'completed': False,
                'progress': (hours_spent / 10) * 100
            })
        
        # –í–µ—Ö–∞ 3: –ú–æ–¥—É–ª–∏ (–∑–∞–≤–µ—Ä—à–∏—Ç—å 3 –º–æ–¥—É–ª—è)
        if user_progress['completed_modules'] >= 3:
            milestones.append({
                'title': '–û—Å–≤–æ–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π',
                'description': f'–ó–∞–≤–µ—Ä—à–µ–Ω–æ {user_progress["completed_modules"]} –º–æ–¥—É–ª–µ–π',
                'target_date': user_progress.get('modules_milestone_date'),
                'type': 'modules',
                'week': 3,
                'completed': True,
                'progress': 100
            })
        else:
            milestones.append({
                'title': '–û—Å–≤–æ–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π',
                'description': f'–ó–∞–≤–µ—Ä—à–∏—Ç–µ 3 –º–æ–¥—É–ª—è (–ø—Ä–æ–≥—Ä–µ—Å—Å: {user_progress["completed_modules"]}/3)',
                'target_date': None,
                'type': 'modules',
                'week': 3,
                'completed': False,
                'progress': (user_progress['completed_modules'] / 3) * 100
            })
        
        # –í–µ—Ö–∞ 4: –¢–µ—Å—Ç—ã (–ø—Ä–æ–π—Ç–∏ 5 —Ç–µ—Å—Ç–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º >70%)
        if user_progress['good_tests'] >= 5:
            milestones.append({
                'title': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
                'description': f'–ü—Ä–æ–π–¥–µ–Ω–æ {user_progress["good_tests"]} —Ç–µ—Å—Ç–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º >70%',
                'target_date': user_progress.get('tests_milestone_date'),
                'type': 'testing',
                'week': 4,
                'completed': True,
                'progress': 100
            })
        else:
            milestones.append({
                'title': '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
                'description': f'–ü—Ä–æ–π–¥–∏—Ç–µ 5 —Ç–µ—Å—Ç–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º >70% (–ø—Ä–æ–≥—Ä–µ—Å—Å: {user_progress["good_tests"]}/5)',
                'target_date': None,
                'type': 'testing',
                'week': 4,
                'completed': False,
                'progress': (user_progress['good_tests'] / 5) * 100
            })
        
        # –í–µ—Ö–∞ 5: –î–æ–º–µ–Ω—ã (–∏–∑—É—á–∏—Ç—å 5 –¥–æ–º–µ–Ω–æ–≤)
        if user_progress['studied_domains'] >= 5:
            milestones.append({
                'title': '–ò–∑—É—á–µ–Ω–∏–µ –¥–æ–º–µ–Ω–æ–≤',
                'description': f'–ò–∑—É—á–µ–Ω–æ {user_progress["studied_domains"]} –¥–æ–º–µ–Ω–æ–≤ BIG',
                'target_date': user_progress.get('domains_milestone_date'),
                'type': 'domains',
                'week': 5,
                'completed': True,
                'progress': 100
            })
        else:
            milestones.append({
                'title': '–ò–∑—É—á–µ–Ω–∏–µ –¥–æ–º–µ–Ω–æ–≤',
                'description': f'–ò–∑—É—á–∏—Ç–µ 5 –¥–æ–º–µ–Ω–æ–≤ BIG (–ø—Ä–æ–≥—Ä–µ—Å—Å: {user_progress["studied_domains"]}/5)',
                'target_date': None,
                'type': 'domains',
                'week': 5,
                'completed': False,
                'progress': (user_progress['studied_domains'] / 5) * 100
            })
        
        # –í–µ—Ö–∞ 6: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–ø—Ä–æ–π—Ç–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç)
        if user_progress['diagnostic_completed']:
            milestones.append({
                'title': '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞',
                'description': f'–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {user_progress["diagnostic_score"]:.1f}%',
                'target_date': user_progress.get('diagnostic_date'),
                'type': 'diagnostic',
                'week': 6,
                'completed': True,
                'progress': 100
            })
        else:
            milestones.append({
                'title': '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞',
                'description': '–ü—Ä–æ–π–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏',
                'target_date': None,
                'type': 'diagnostic',
                'week': 6,
                'completed': False,
                'progress': 0
            })
        
        return milestones
    
    def _get_user_real_progress(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏
        completed_lessons = UserProgress.query.filter_by(
            user_id=self.user_id,
            completed=True
        ).count()
        
        # –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è (–≤ –º–∏–Ω—É—Ç–∞—Ö)
        total_time_spent = db.session.query(
            db.func.sum(UserProgress.time_spent)
        ).filter_by(
            user_id=self.user_id
        ).scalar() or 0
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
        completed_modules = 0
        modules = Module.query.all()
        for module in modules:
            module_progress = module.get_progress_for_user(self.user_id)
            if module_progress['progress_percent'] == 100:
                completed_modules += 1
        
        # –¢–µ—Å—Ç—ã —Å —Ö–æ—Ä–æ—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º (>70%)
        good_tests = 0
        test_results = TestResult.query.filter_by(user_id=self.user_id).all()
        for result in test_results:
            if result.percentage_score > 70:
                good_tests += 1
        
        # –ò–∑—É—á–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã (—á–µ—Ä–µ–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É)
        studied_domains = 0
        diagnostic_sessions = DiagnosticSession.query.filter_by(
            user_id=self.user_id,
            status='completed'
        ).all()
        
        for session in diagnostic_sessions:
            results = session.generate_results()
            domain_abilities = results.get('domain_abilities', {})
            studied_domains = len(domain_abilities)
            break  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç
        diagnostic_completed = False
        diagnostic_score = 0
        diagnostic_date = None
        
        if diagnostic_sessions:
            latest_diagnostic = diagnostic_sessions[-1]
            diagnostic_completed = True
            results = latest_diagnostic.generate_results()
            diagnostic_score = results.get('accuracy', 0) * 100
            diagnostic_date = latest_diagnostic.completed_at
        
        # –î–∞—Ç—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–µ—Ö
        first_completion = UserProgress.query.filter_by(
            user_id=self.user_id,
            completed=True
        ).order_by(UserProgress.completed_at.asc()).first()
        
        first_completion_date = first_completion.completed_at if first_completion else None
        
        return {
            'completed_lessons': completed_lessons,
            'total_time_spent': total_time_spent,
            'completed_modules': completed_modules,
            'good_tests': good_tests,
            'studied_domains': studied_domains,
            'diagnostic_completed': diagnostic_completed,
            'diagnostic_score': diagnostic_score,
            'diagnostic_date': diagnostic_date,
            'first_completion_date': first_completion_date,
            'time_milestone_date': None,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            'modules_milestone_date': None,
            'tests_milestone_date': None,
            'domains_milestone_date': None
        }
    
    def _calculate_domain_difficulty(self, domain_questions: List) -> str:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –¥–æ–º–µ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ø—Ä–æ—Å–æ–≤"""
        
        if not domain_questions:
            return 'medium'
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω—é—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤
        difficulties = []
        for q in domain_questions:
            if hasattr(q.question, 'irt_parameters') and q.question.irt_parameters:
                irt_params = q.question.irt_parameters
                if hasattr(irt_params, 'difficulty'):
                    difficulties.append(irt_params.difficulty)
        
        if not difficulties:
            return 'medium'
        
        avg_difficulty = sum(difficulties) / len(difficulties)
        
        if avg_difficulty < -0.5:
            return 'easy'
        elif avg_difficulty > 0.5:
            return 'hard'
        else:
            return 'medium'
    
    def _estimate_hours_needed(self, accuracy: float, weight_percentage: float) -> float:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞"""
        
        # –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–µ—Å–∞ –¥–æ–º–µ–Ω–∞
        base_hours = weight_percentage * 0.2  # 20% –æ—Ç –≤–µ—Å–∞ –¥–æ–º–µ–Ω–∞
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ—á–Ω–æ—Å—Ç–∏
        if accuracy < 0.5:
            multiplier = 2.0  # –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏
        elif accuracy < 0.7:
            multiplier = 1.5
        else:
            multiplier = 1.0
        
        return base_hours * multiplier
    
    def _calculate_readiness(self, current_ability: float, target_ability: float) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —ç–∫–∑–∞–º–µ–Ω—É"""
        
        if current_ability >= target_ability:
            return 1.0
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–∏–Ω–µ–π–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è
        readiness = current_ability / target_ability
        return min(1.0, max(0.0, readiness))
    
    def get_recommended_lessons(self, domain_names: List[str], limit: int = 5) -> List[Lesson]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ –¥–ª—è –¥–æ–º–µ–Ω–æ–≤"""
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        return get_smart_recommendations(self.user_id, domain_names, limit)
    
    def update_plan_progress(self, plan: PersonalLearningPlan) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–ª–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        completed_sessions = plan.study_sessions.filter_by(status='completed').all()
        
        if not completed_sessions:
            return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        total_sessions = plan.study_sessions.count()
        completed_count = len(completed_sessions)
        
        progress_percent = (completed_count / total_sessions * 100) if total_sessions > 0 else 0
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω
        plan.overall_progress = progress_percent
        plan.last_updated = datetime.now(timezone.utc)
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
        plan.estimated_readiness = self._calculate_readiness(
            plan.current_ability, 
            plan.target_ability
        )
        
        db.session.commit()

def create_learning_plan_from_diagnostic(
    user_id: int, 
    exam_date: Optional[datetime] = None,
    start_date: Optional[datetime] = None,
    end_date: Optional[datetime] = None,
    intensity: str = 'moderate',
    study_time: str = 'afternoon',
    diagnostic_session_id: Optional[int] = None
) -> PersonalLearningPlan:
    """–°–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    
    print(f"üîç –û–¢–õ–ê–î–ö–ê: create_learning_plan_from_diagnostic –≤—ã–∑–≤–∞–Ω–∞")
    print(f"üîç –û–¢–õ–ê–î–ö–ê: user_id = {user_id}")
    print(f"üîç –û–¢–õ–ê–î–ö–ê: diagnostic_session_id = {diagnostic_session_id}")
    
    # –í–°–ï 25 –¥–æ–º–µ–Ω–æ–≤ BIG —ç–∫–∑–∞–º–µ–Ω–∞
    ALL_BIG_DOMAINS = {
        'domain_1': 'Endodontics',
        'domain_2': 'Periodontics', 
        'domain_3': 'Orthodontics',
        'domain_4': 'Oral Surgery',
        'domain_5': 'Prosthodontics',
        'domain_6': 'Preventive Care',
        'domain_7': 'Dental Materials',
        'domain_8': 'Oral Pathology',
        'domain_9': 'Oral Medicine',
        'domain_10': 'Dental Radiology',
        'domain_11': 'Dental Anatomy',
        'domain_12': 'Dental Physiology',
        'domain_13': 'Dental Pharmacology',
        'domain_14': 'Dental Anesthesia',
        'domain_15': 'Dental Emergency',
        'domain_16': 'Dental Ethics',
        'domain_17': 'Dental Law',
        'domain_18': 'Practice Management',
        'domain_19': 'Patient Communication',
        'domain_20': 'Infection Control',
        'domain_21': 'Dental Implants',
        'domain_22': 'Cosmetic Dentistry',
        'domain_23': 'Pediatric Dentistry',
        'domain_24': 'Geriatric Dentistry',
        'domain_25': 'Special Needs Dentistry'
    }
    
    # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –Ω–∞ –Ω–æ–≤—ã–µ
    OLD_TO_NEW_DOMAIN_MAPPING = {
        'THER': 'domain_1',      # –¢–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è -> Endodontics
        'SURG': 'domain_4',      # –•–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è -> Oral Surgery
        'PROTH': 'domain_5',     # –û—Ä—Ç–æ–ø–µ–¥–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è -> Prosthodontics
        'PEDI': 'domain_23',     # –î–µ—Ç—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è -> Pediatric Dentistry
        'PARO': 'domain_2',      # –ü–∞—Ä–æ–¥–æ–Ω—Ç–æ–ª–æ–≥–∏—è -> Periodontics
        'ORTHO': 'domain_3',     # –û—Ä—Ç–æ–¥–æ–Ω—Ç–∏—è -> Orthodontics
        'PREV': 'domain_6',      # –ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ -> Preventive Care
        'ETHIEK': 'domain_16',   # –≠—Ç–∏–∫–∞ –∏ –ø—Ä–∞–≤–æ -> Dental Ethics
        'ANATOMIE': 'domain_11', # –ê–Ω–∞—Ç–æ–º–∏—è -> Dental Anatomy
        'FYSIOLOGIE': 'domain_12', # –§–∏–∑–∏–æ–ª–æ–≥–∏—è -> Dental Physiology
        'PATHOLOGIE': 'domain_8', # –ü–∞—Ç–æ–ª–æ–≥–∏—è -> Oral Pathology
        'MICROBIOLOGIE': 'domain_20', # –ú–∏–∫—Ä–æ–±–∏–æ–ª–æ–≥–∏—è -> Infection Control
        'MATERIAALKUNDE': 'domain_7', # –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤–µ–¥–µ–Ω–∏–µ -> Dental Materials
        'RADIOLOGIE': 'domain_10', # –†–µ–Ω—Ç–≥–µ–Ω–æ–ª–æ–≥–∏—è -> Dental Radiology
        'ALGEMENE_GENEESKUNDE': 'domain_9', # –û–±—â–∞—è –º–µ–¥–∏—Ü–∏–Ω–∞ -> Oral Medicine
        'EMERGENCY': 'domain_15', # –ù–µ–æ—Ç–ª–æ–∂–Ω–∞—è –ø–æ–º–æ—â—å -> Dental Emergency
        'SYSTEMIC': 'domain_9',  # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è -> Oral Medicine
        'PHARMA': 'domain_13',   # –§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è -> Dental Pharmacology
        'INFECTION': 'domain_20', # –ò–Ω—Ñ–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å -> Infection Control
        'SPECIAL': 'domain_25',  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ -> Special Needs Dentistry
        'DIAGNOSIS': 'domain_8', # –°–ª–æ–∂–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ -> Oral Pathology
        'DUTCH': 'domain_18',    # –ì–æ–ª–ª–∞–Ω–¥—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è -> Practice Management
        'PROFESSIONAL': 'domain_17', # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ -> Dental Law
        'FARMACOLOGIE': 'domain_13', # –§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ) -> Dental Pharmacology
        'DIAGNOSIS_SPECIAL': 'domain_8' # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ -> Oral Pathology
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –ö–û–ù–ö–†–ï–¢–ù–£–Æ —Å–µ—Å—Å–∏—é, –∞ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—é—é
    if diagnostic_session_id:
        diagnostic_session = DiagnosticSession.query.get(diagnostic_session_id)
        print(f"üîç –û–¢–õ–ê–î–ö–ê: diagnostic_session = {diagnostic_session}")
        print(f"üîç –û–¢–õ–ê–î–ö–ê: diagnostic_session.id = {diagnostic_session.id if diagnostic_session else 'None'}")
        print(f"üîç –û–¢–õ–ê–î–ö–ê: diagnostic_session.status = {diagnostic_session.status if diagnostic_session else 'None'}")
        
        if not diagnostic_session:
            raise ValueError(f"Diagnostic session {diagnostic_session_id} not found")
        if diagnostic_session.user_id != user_id:
            raise ValueError("Diagnostic session does not belong to user")
        if diagnostic_session.status != 'completed':
            raise ValueError("Diagnostic session is not completed")
    else:
        # Fallback: –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ—Å—Å–∏—é
        print(f"üîç –û–¢–õ–ê–î–ö–ê: diagnostic_session_id –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ—Å—Å–∏—é")
        diagnostic_session = DiagnosticSession.query.filter_by(
            user_id=user_id,
            status='completed'
        ).order_by(DiagnosticSession.completed_at.desc()).first()
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–µ—Å—Å–∏—è = {diagnostic_session}")
        
        if not diagnostic_session:
            raise ValueError("No completed diagnostic session found")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º generate_results() –≤–º–µ—Å—Ç–æ _analyze_diagnostic_results()
    print(f"üîç –û–¢–õ–ê–î–ö–ê: –≤—ã–∑—ã–≤–∞–µ–º diagnostic_session.generate_results()")
    diagnostic_data = diagnostic_session.generate_results()
    print(f"üîç –û–¢–õ–ê–î–ö–ê: diagnostic_data = {diagnostic_data}")
    print(f"üîç –û–¢–õ–ê–î–ö–ê: domain_statistics = {diagnostic_data.get('domain_statistics', {})}")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –í–°–ï–• 25 –¥–æ–º–µ–Ω–æ–≤
    print(f"üîç –û–¢–õ–ê–î–ö–ê: —Å–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –í–°–ï–• 25 –¥–æ–º–µ–Ω–æ–≤")
    all_domains_data = {}
    
    for domain_code, domain_name in ALL_BIG_DOMAINS.items():
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–º–µ–Ω {domain_code} = {domain_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–æ–º—É –¥–æ–º–µ–Ω—É (–ø—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
        if (diagnostic_data.get('domain_statistics') and 
            domain_code in diagnostic_data['domain_statistics'] and
            diagnostic_data['domain_statistics'][domain_code].get('has_data', False)):
            
            # –ï—Å—Ç—å –ø—Ä—è–º—ã–µ –¥–∞–Ω–Ω—ã–µ
            domain_data = diagnostic_data['domain_statistics'][domain_code]
            score = domain_data.get('accuracy_percentage', 0)
            questions_answered = domain_data.get('questions_answered', 0)
            correct_answers = domain_data.get('correct_answers', 0)
            print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ–º–µ–Ω {domain_name} –∏–º–µ–µ—Ç –ø—Ä—è–º—ã–µ –¥–∞–Ω–Ω—ã–µ: {score}%")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö –¥–æ–º–µ–Ω–æ–≤
            score = 0
            questions_answered = 0
            correct_answers = 0
            
            # –ò—â–µ–º —Å—Ç–∞—Ä—ã–π –¥–æ–º–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –º–∞–ø–ø–∏—Ç—Å—è –Ω–∞ —ç—Ç–æ—Ç –Ω–æ–≤—ã–π
            for old_domain, new_domain in OLD_TO_NEW_DOMAIN_MAPPING.items():
                if new_domain == domain_code:
                    if (diagnostic_data.get('domain_statistics') and 
                        old_domain in diagnostic_data['domain_statistics'] and
                        diagnostic_data['domain_statistics'][old_domain].get('has_data', False)):
                        
                        # –ù–∞—à–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–∞—Ä–æ–º –¥–æ–º–µ–Ω–µ
                        old_domain_data = diagnostic_data['domain_statistics'][old_domain]
                        score = old_domain_data.get('accuracy_percentage', 0)
                        questions_answered = old_domain_data.get('questions_answered', 0)
                        correct_answers = old_domain_data.get('correct_answers', 0)
                        print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ–º–µ–Ω {domain_name} –∏–º–µ–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –¥–æ–º–µ–Ω–∞ {old_domain}: {score}%")
                        break
            
            if score == 0:
                print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ–º–µ–Ω {domain_name} –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö: 0%")
        
        all_domains_data[domain_name] = {
            'domain_code': domain_code,
            'score': score,
            'questions_answered': questions_answered,
            'correct_answers': correct_answers,
            'accuracy': score,
            'target': 85,  # –¶–µ–ª–µ–≤–æ–π –±–∞–ª–ª
            'hours': max(24 - score * 0.3, 8)  # –†–∞—Å—á–µ—Ç —á–∞—Å–æ–≤
        }
    
    print(f"üîç –û–¢–õ–ê–î–ö–ê: all_domains_data = {all_domains_data}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–∞–±—ã–µ –∏ —Å–∏–ª—å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
    weak_domains = []
    strong_domains = []
    for domain_name, domain_data in all_domains_data.items():
        if domain_data['score'] < 70:
            weak_domains.append(domain_name)
        elif domain_data['score'] >= 80:
            strong_domains.append(domain_name)
    
    print(f"üîç –û–¢–õ–ê–î–ö–ê: weak_domains = {weak_domains}")
    print(f"üîç –û–¢–õ–ê–î–ö–ê: strong_domains = {strong_domains}")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
    target_ability = 0.7  # –ë–∞–∑–æ–≤–∞—è —Ü–µ–ª—å –¥–ª—è BIG —ç–∫–∑–∞–º–µ–Ω–∞
    if exam_date:
        days_until_exam = (exam_date - datetime.now(timezone.utc)).days
        if days_until_exam < 30:
            target_ability = 0.8
        elif days_until_exam < 90:
            target_ability = 0.75
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è
    print(f"üîç –û–¢–õ–ê–î–ö–ê: —Å–æ–∑–¥–∞–µ–º PersonalLearningPlan")
    plan = PersonalLearningPlan(
        user_id=user_id,
        exam_date=exam_date.date() if exam_date else None,
        start_date=start_date.date() if start_date else None,
        end_date=end_date.date() if end_date else None,
        intensity=intensity,
        study_time=study_time,
        diagnostic_session_id=diagnostic_session.id,
        target_ability=target_ability,
        study_hours_per_week=20.0,
        current_ability=diagnostic_session.current_ability,
        overall_progress=0.0,
        estimated_readiness=diagnostic_data.get('readiness_percentage', 0) / 100.0,
        status='active'
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ü–†–ê–í–ò–õ–¨–ù–û–ú —Ñ–æ—Ä–º–∞—Ç–µ
    print(f"üîç –û–¢–õ–ê–î–ö–ê: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º domain_analysis = {all_domains_data}")
    plan.set_domain_analysis(all_domains_data)
    plan.set_weak_domains(weak_domains)
    plan.set_strong_domains(strong_domains)
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    study_schedule = {
        'weekly_schedule': [],
        'total_weeks': max(len(weak_domains) * 2, 8),
        'study_hours_per_week': 20.0
    }
    plan.set_study_schedule(study_schedule)
    
    # –°–æ–∑–¥–∞–µ–º –≤–µ—Ö–∏
    milestones = []
    if exam_date:
        milestones = [
            {'week': 1, 'title': 'Start of preparation', 'description': 'Begin intensive study'},
            {'week': max(len(weak_domains) * 2, 8) // 2, 'title': 'Mid-term review', 'description': 'Assess progress'},
            {'week': max(len(weak_domains) * 2, 8), 'title': 'Final preparation', 'description': 'Final review before exam'}
        ]
    plan.set_milestones(milestones)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    print(f"üîç –û–¢–õ–ê–î–ö–ê: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ –ë–î")
    db.session.add(plan)
    db.session.commit()
    
    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ø–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω, ID = {plan.id}")
    print(f"üîç –û–¢–õ–ê–î–ö–ê: plan.domain_analysis = {plan.domain_analysis}")
    print(f"üîç –û–¢–õ–ê–î–ö–ê: plan.get_domain_analysis() = {plan.get_domain_analysis()}")
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø–ª–∞–Ω–∞
    create_study_sessions_for_plan(plan)
    
    return plan

def update_user_learning_plan(user_id: int) -> Optional[PersonalLearningPlan]:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω
    plan = PersonalLearningPlan.query.filter_by(
        user_id=user_id,
        status='active'
    ).first()
    
    if not plan:
        return None
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    generator = LearningPlanGenerator(user_id)
    generator.update_plan_progress(plan)
    
    return plan 

def create_study_sessions_for_plan(plan: PersonalLearningPlan) -> List[StudySession]:
    """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø–ª–∞–Ω–∞"""
    
    study_schedule = plan.get_study_schedule()
    if not study_schedule or not study_schedule.get('weekly_schedule'):
        return []
    
    sessions = []
    weak_domains = plan.get_weak_domains()
    
    for week_data in study_schedule['weekly_schedule']:
        week_number = week_data['week_number']
        focus_domains = week_data['focus_domains']
        
        for daily_session in week_data['daily_sessions']:
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è
            session = StudySession(
                learning_plan_id=plan.id,
                session_type=daily_session['type'],
                domain_id=get_domain_id_by_name(focus_domains[0]) if focus_domains else None,
                planned_duration=int(daily_session['duration'] * 60),  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–Ω—É—Ç—ã
                status='planned',
                progress_percent=0.0
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–µ—Å—Å–∏–∏
            if focus_domains:
                recommended_lessons = get_smart_recommendations(
                    plan.user_id, 
                    focus_domains, 
                    limit=3
                )
                lesson_ids = [lesson.id for lesson in recommended_lessons]
                session.set_content_ids(lesson_ids)
            
            db.session.add(session)
            sessions.append(session)
    
    db.session.commit()
    return sessions

def get_domain_id_by_name(domain_name: str) -> Optional[int]:
    """–ü–æ–ª—É—á–∞–µ—Ç ID –¥–æ–º–µ–Ω–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    domain = BIGDomain.query.filter_by(name=domain_name).first()
    return domain.id if domain else None 