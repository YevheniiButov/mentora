#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
"""

from app import app
from models import BIGDomain
from extensions import db
from sqlalchemy import text

def fix_category_distribution():
    with app.app_context():
        print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú")
        print("=" * 50)
        
        # –¶–µ–ª–µ–≤–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:
        # THEORETICAL: 70% (22 –¥–æ–º–µ–Ω–∞)
        # METHODOLOGY: 10% (2 –¥–æ–º–µ–Ω–∞) 
        # PRACTICAL: 15% (1 –¥–æ–º–µ–Ω)
        # CLINICAL: 5% (3 –¥–æ–º–µ–Ω–∞)
        
        # –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–µ–Ω—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        category_reassignments = {
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º TREATMENT_PLANNING –∏–∑ CLINICAL –≤ THEORETICAL
            'TREATMENT_PLANNING': 'THEORETICAL',
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º COMMUNICATION –∏–∑ CLINICAL –≤ THEORETICAL  
            'COMMUNICATION': 'THEORETICAL',
            # ETHIEK –æ—Å—Ç–∞–µ—Ç—Å—è –≤ CLINICAL
        }
        
        print("üìã –ü–ª–∞–Ω –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:")
        for code, new_category in category_reassignments.items():
            print(f"   ‚Ä¢ {code}: CLINICAL ‚Üí {new_category}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        try:
            for code, new_category in category_reassignments.items():
                db.session.execute(text(
                    "UPDATE big_domain SET category = :category WHERE code = :code"
                ), {'category': new_category, 'code': code})
                print(f"‚úÖ {code}: {new_category}")
            
            db.session.commit()
            print("\n‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
            db.session.rollback()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–ï–†–ï–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø:")
        print("=" * 50)
        
        domains = BIGDomain.query.filter_by(is_active=True).all()
        total_weight = sum(d.weight_percentage for d in domains)
        print(f"–û–±—â–∏–π –≤–µ—Å: {total_weight:.1f}%")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for domain in domains:
            cat = domain.category or 'UNCATEGORIZED'
            if cat not in categories:
                categories[cat] = []
            categories[cat].append(domain)
        
        for category, domain_list in categories.items():
            cat_weight = sum(d.weight_percentage for d in domain_list)
            print(f"\nüìã {category} ({len(domain_list)} –¥–æ–º–µ–Ω–æ–≤, {cat_weight:.1f}%):")
            for domain in sorted(domain_list, key=lambda x: x.weight_percentage, reverse=True):
                critical = "‚≠ê" if domain.is_critical else "  "
                print(f"   {critical} {domain.code:15} | {domain.name:35} | {domain.weight_percentage:5.1f}%")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–ª–µ–≤—ã–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º
        print(f"\nüéØ –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –¶–ï–õ–ï–í–´–ú –ü–û–ö–ê–ó–ê–¢–ï–õ–Ø–ú:")
        theoretical_weight = sum(d.weight_percentage for d in domains if d.category == 'THEORETICAL')
        methodology_weight = sum(d.weight_percentage for d in domains if d.category == 'METHODOLOGY')
        practical_weight = sum(d.weight_percentage for d in domains if d.category == 'PRACTICAL')
        clinical_weight = sum(d.weight_percentage for d in domains if d.category == 'CLINICAL')
        
        print(f"   ‚Ä¢ THEORETICAL: {theoretical_weight:.1f}% (—Ü–µ–ª—å: 70%)")
        print(f"   ‚Ä¢ METHODOLOGY: {methodology_weight:.1f}% (—Ü–µ–ª—å: 10%)")
        print(f"   ‚Ä¢ PRACTICAL: {practical_weight:.1f}% (—Ü–µ–ª—å: 15%)")
        print(f"   ‚Ä¢ CLINICAL: {clinical_weight:.1f}% (—Ü–µ–ª—å: 5%)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–µ–Ω–æ–≤
        theoretical_count = len([d for d in domains if d.category == 'THEORETICAL'])
        methodology_count = len([d for d in domains if d.category == 'METHODOLOGY'])
        practical_count = len([d for d in domains if d.category == 'PRACTICAL'])
        clinical_count = len([d for d in domains if d.category == 'CLINICAL'])
        
        print(f"\nüìä –ö–û–õ–ò–ß–ï–°–¢–í–û –î–û–ú–ï–ù–û–í:")
        print(f"   ‚Ä¢ THEORETICAL: {theoretical_count} (—Ü–µ–ª—å: 22)")
        print(f"   ‚Ä¢ METHODOLOGY: {methodology_count} (—Ü–µ–ª—å: 2)")
        print(f"   ‚Ä¢ PRACTICAL: {practical_count} (—Ü–µ–ª—å: 1)")
        print(f"   ‚Ä¢ CLINICAL: {clinical_count} (—Ü–µ–ª—å: 3)")
        print(f"   ‚Ä¢ –í–°–ï–ì–û: {len(domains)} –¥–æ–º–µ–Ω–æ–≤")

if __name__ == "__main__":
    fix_category_distribution() 