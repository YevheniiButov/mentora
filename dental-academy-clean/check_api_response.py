#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ API
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç API /community/topic/<id>/content
"""

import os
import psycopg2
from urllib.parse import urlparse
import json

def get_production_db_connection():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ DATABASE_URL"""
    try:
        database_url = os.environ.get('DATABASE_URL')
        
        if not database_url:
            print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            return None
        
        print(f"üîó –ò—Å–ø–æ–ª—å–∑—É–µ–º DATABASE_URL: {database_url[:50]}...")
        
        conn = psycopg2.connect(database_url, sslmode='require')
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return conn
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def check_api_response(conn):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç API"""
    cursor = conn.cursor()
    
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –û–¢–í–ï–¢–ê API")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–º—É ID 40
    topic_id = 40
    print(f"\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–º—É ID {topic_id}:")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—É (–∫–∞–∫ –≤ API)
    cursor.execute("""
        SELECT ft.id, ft.title, ft.content, ft.category_id, ft.author_id, ft.created_at, ft.updated_at,
               ft.last_reply_at, ft.last_reply_by, ft.views_count, ft.replies_count, ft.is_sticky, ft.is_locked, ft.status,
               u.first_name, u.last_name, u.email,
               fc.name as category_name, fc.slug as category_slug
        FROM forum_topics ft
        LEFT JOIN "user" u ON ft.author_id = u.id
        LEFT JOIN forum_categories fc ON ft.category_id = fc.id
        WHERE ft.id = %s
    """, (topic_id,))
    
    topic_data = cursor.fetchone()
    
    if not topic_data:
        print(f"   ‚ùå –¢–µ–º–∞ ID {topic_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    print(f"   ‚úÖ –¢–µ–º–∞ –Ω–∞–π–¥–µ–Ω–∞:")
    print(f"      –ù–∞–∑–≤–∞–Ω–∏–µ: {topic_data[1]}")
    print(f"      –ê–≤—Ç–æ—Ä: {topic_data[14]} {topic_data[15]} (ID: {topic_data[4]})")
    print(f"      –û—Ç–≤–µ—Ç—ã: {topic_data[10]}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã (–∫–∞–∫ –≤ API)
    cursor.execute("""
        SELECT fp.id, fp.content, fp.author_id, fp.created_at, fp.updated_at, fp.is_edited, fp.is_deleted,
               u.first_name, u.last_name, u.email
        FROM forum_posts fp
        LEFT JOIN "user" u ON fp.author_id = u.id
        WHERE fp.topic_id = %s AND fp.is_deleted = false
        ORDER BY fp.created_at ASC
    """, (topic_id,))
    
    posts_data = cursor.fetchall()
    
    print(f"\nüìù –ü–æ—Å—Ç—ã –≤ —Ç–µ–º–µ (API –∑–∞–ø—Ä–æ—Å):")
    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts_data)}")
    
    for i, post in enumerate(posts_data):
        post_id, content, author_id, created_at, updated_at, is_edited, is_deleted, first_name, last_name, email = post
        author_name = f"{first_name} {last_name}".strip() if first_name and last_name else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        print(f"      üìù –ü–æ—Å—Ç {i+1} (ID: {post_id}):")
        print(f"         –ê–≤—Ç–æ—Ä: {author_name} (ID: {author_id})")
        print(f"         –ö–æ–Ω—Ç–µ–Ω—Ç: {content[:50]}...")
        print(f"         –£–¥–∞–ª–µ–Ω: {is_deleted}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç—ã –ë–ï–ó —Ñ–∏–ª—å—Ç—Ä–∞ is_deleted
    print(f"\nüìù –ü–æ—Å—Ç—ã –≤ —Ç–µ–º–µ (–ë–ï–ó —Ñ–∏–ª—å—Ç—Ä–∞ is_deleted):")
    cursor.execute("""
        SELECT fp.id, fp.content, fp.author_id, fp.created_at, fp.is_deleted,
               u.first_name, u.last_name
        FROM forum_posts fp
        LEFT JOIN "user" u ON fp.author_id = u.id
        WHERE fp.topic_id = %s
        ORDER BY fp.created_at ASC
    """, (topic_id,))
    
    all_posts = cursor.fetchall()
    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(all_posts)}")
    
    for i, post in enumerate(all_posts):
        post_id, content, author_id, created_at, is_deleted, first_name, last_name = post
        author_name = f"{first_name} {last_name}".strip() if first_name and last_name else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        print(f"      üìù –ü–æ—Å—Ç {i+1} (ID: {post_id}):")
        print(f"         –ê–≤—Ç–æ—Ä: {author_name}")
        print(f"         –ö–æ–Ω—Ç–µ–Ω—Ç: {content[:30]}...")
        print(f"         –£–¥–∞–ª–µ–Ω: {is_deleted}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ API
    print(f"\nüîß –î–ê–ù–ù–´–ï API (JSON):")
    print("-" * 30)
    
    if topic_data:
        topic_api_data = {
            'id': topic_data[0],
            'title': topic_data[1],
            'content': topic_data[2],
            'author': {
                'id': topic_data[4],
                'name': f"{topic_data[14]} {topic_data[15]}".strip(),
                'email': topic_data[16]
            },
            'category': {
                'id': topic_data[3],
                'name': topic_data[17],
                'slug': topic_data[18]
            },
            'created_at': topic_data[5].strftime('%d.%m.%Y %H:%M'),
            'updated_at': topic_data[6].strftime('%d.%m.%Y %H:%M') if topic_data[6] else None,
            'last_reply_at': topic_data[7].strftime('%d.%m.%Y %H:%M') if topic_data[7] else None,
            'views_count': topic_data[9],
            'replies_count': topic_data[10],
            'is_sticky': topic_data[11],
            'is_locked': topic_data[12],
            'status': topic_data[13]
        }
        
        print(f"   üìã –¢–µ–º–∞ API –¥–∞–Ω–Ω—ã–µ:")
        print(f"      ID: {topic_api_data['id']}")
        print(f"      –ê–≤—Ç–æ—Ä: {topic_api_data['author']['name']}")
        print(f"      –û—Ç–≤–µ—Ç—ã: {topic_api_data['replies_count']}")
        print(f"      –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {topic_api_data['views_count']}")
    
    # –î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–æ–≤ API
    posts_api_data = []
    for post in posts_data:
        post_id, content, author_id, created_at, updated_at, is_edited, is_deleted, first_name, last_name, email = post
        
        post_api_data = {
            'id': post_id,
            'content': content,
            'author': {
                'id': author_id,
                'name': f"{first_name} {last_name}".strip(),
                'email': email
            },
            'created_at': created_at.strftime('%d.%m.%Y %H:%M'),
            'updated_at': updated_at.strftime('%d.%m.%Y %H:%M') if updated_at else None,
            'is_edited': is_edited,
            'is_deleted': is_deleted
        }
        posts_api_data.append(post_api_data)
    
    print(f"\n   üìù –ü–æ—Å—Ç—ã API –¥–∞–Ω–Ω—ã–µ:")
    print(f"      –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {len(posts_api_data)}")
    
    for i, post in enumerate(posts_api_data):
        print(f"      –ü–æ—Å—Ç {i+1}: {post['author']['name']} - {post['content'][:30]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É JavaScript
    print(f"\nüéØ –õ–û–ì–ò–ö–ê JAVASCRIPT:")
    print("-" * 30)
    
    if posts_api_data:
        print(f"   posts.forEach(post => {{")
        print(f"       if (post.id !== posts[0].id) {{ // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ—Å—Ç")
        print(f"       }} else {{ // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç")
        print(f"       }}")
        print()
        
        first_post_id = posts_api_data[0]['id']
        print(f"   –ü–µ—Ä–≤—ã–π –ø–æ—Å—Ç ID: {first_post_id}")
        print(f"   –ü–æ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã:")
        
        shown_count = 0
        for post in posts_api_data:
            if post['id'] != first_post_id:
                print(f"      ‚úÖ –ü–æ—Å—Ç ID {post['id']}: {post['author']['name']}")
                shown_count += 1
            else:
                print(f"      ‚ùå –ü–æ—Å—Ç ID {post['id']}: {post['author']['name']} (–ü–ï–†–í–´–ô - –ù–ï –ü–û–ö–ê–ó–´–í–ê–¢–¨)")
        
        print(f"\n   üìä –ò–¢–û–ì:")
        print(f"      –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤ –≤ API: {len(posts_api_data)}")
        print(f"      –ü–æ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {shown_count}")
        print(f"      –î–æ–ª–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è: {len(posts_api_data) - 1} –ø–æ—Å—Ç–æ–≤")
    
    else:
        print("   ‚ùå –ü–æ—Å—Ç–æ–≤ –Ω–µ—Ç –≤ API –æ—Ç–≤–µ—Ç–µ!")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –û–¢–í–ï–¢–ê API –§–û–†–£–ú–ê")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not os.environ.get('DATABASE_URL'):
        print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return False
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = get_production_db_connection()
    if not conn:
        return False
    
    try:
        check_api_response(conn)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
        
    finally:
        conn.close()
        print("\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

if __name__ == "__main__":
    main()
