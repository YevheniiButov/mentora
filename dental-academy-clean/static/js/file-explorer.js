/**
 * File Explorer —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º GrapesJS
 * –î–ª—è Content Editor
 */

console.log('üîß file-explorer.js loading...');

class FileExplorer {
    constructor(options = {}) {
        console.log('üîß FileExplorer constructor called');
        this.options = {
            apiBase: '/api/content-editor',
            modalId: 'fileExplorerModal',
            ...options
        };
        
        this.currentPath = '';
        this.visualEditor = null;
        this.currentFile = null; // –¢–µ–∫—É—â–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π —Ñ–∞–π–ª
        this.apiBase = this.options.apiBase;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Enhanced File Loader
        this.fileLoader = null;
        
        console.log('üîß FileExplorer constructor - window.currentLang:', window.currentLang);
        console.log('üîß FileExplorer constructor - apiBase:', this.apiBase);
        
        this.init();
        this.initializeFileLoader();
    }
    
    init() {
        console.log('üîß File Explorer initializing...');
        
        this.createModal();
        this.setupEventListeners();
        
        console.log('‚úÖ File Explorer initialized');
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Enhanced File Loader
    initializeFileLoader() {
        console.log('üîß Initializing Enhanced File Loader...');
        
        const initLoader = () => {
            if (window.editor && window.editor.Canvas && window.EnhancedFileLoader) {
                try {
                    this.fileLoader = new window.EnhancedFileLoader(window.editor);
                    console.log('‚úÖ Enhanced File Loader initialized in FileExplorer');
                    return true;
                } catch (error) {
                    console.error('‚ùå Error creating EnhancedFileLoader:', error);
                    return false;
                }
            }
            return false;
        };
        
        // –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–∞–∑—É
        if (!initLoader()) {
            // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∂–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            const checkInterval = setInterval(() => {
                if (initLoader()) {
                    clearInterval(checkInterval);
                }
            }, 100);
            
            // –¢–∞–π–º–∞—É—Ç —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                clearInterval(checkInterval);
                console.warn('‚ö†Ô∏è EnhancedFileLoader initialization timeout in FileExplorer');
            }, 10000);
        }
    }
    
    createModal() {
        console.log('üîß Creating modal...');
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–æ–¥–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
        const existingModal = document.getElementById(this.options.modalId);
        if (existingModal) {
            existingModal.remove();
        }
        
        const modalHTML = `
            <div class="modal fade file-explorer-modal" id="${this.options.modalId}" tabindex="-1">
                <div class="modal-dialog modal-xl">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">
                                <i class="fas fa-folder-open me-2"></i>
                                –§–∞–π–ª–æ–≤—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫
                            </h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <!-- Breadcrumbs –Ω–∞–≤–∏–≥–∞—Ü–∏—è -->
                            <div class="path-breadcrumbs">
                                <nav aria-label="breadcrumb">
                                    <ol class="breadcrumb mb-0">
                                        <li class="breadcrumb-item">
                                            <a href="#" data-path="">–ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞</a>
                                        </li>
                                    </ol>
                                </nav>
                            </div>
                            
                            <!-- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ñ–∞–π–ª–æ–≤ -->
                            <div class="file-list">
                                <div class="loading-spinner">
                                    <i class="fas fa-spinner fa-spin"></i>
                                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤...</p>
                                </div>
                            </div>
                            
                            <!-- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ -->
                            <div class="file-preview" style="display: none;">
                                <div class="preview-header">
                                    <h6>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞</h6>
                                </div>
                                <pre><code></code></pre>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.insertAdjacentHTML('beforeend', modalHTML);
        this.modal = document.getElementById(this.options.modalId);
        console.log('üîß Modal created:', this.modal);
    }
    
    setupEventListeners() {
        console.log('üîß Setting up event listeners...');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ breadcrumbs
        this.modal.addEventListener('click', (e) => {
            if (e.target.matches('.breadcrumb-item a')) {
                e.preventDefault();
                const path = e.target.dataset.path || '';
                this.navigateTo(path);
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Ñ–∞–π–ª–∞–º
        this.modal.addEventListener('click', (e) => {
            const fileItem = e.target.closest('.file-item');
            if (!fileItem) return;
            
            const path = fileItem.dataset.path;
            if (!path) return;
            
            if (e.target.closest('.file-actions')) {
                return; // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º –¥–µ–π—Å—Ç–≤–∏–π
            }
            
            // –ï—Å–ª–∏ —ç—Ç–æ –ø–∞–ø–∫–∞ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–µ—ë
            if (fileItem.classList.contains('directory')) {
                this.navigateTo(path);
            } else {
                            // –ï—Å–ª–∏ —ç—Ç–æ HTML —Ñ–∞–π–ª - –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä
            const extension = path.toLowerCase().split('.').pop();
            if (extension === 'html' || extension === 'htm') {
                this.loadFileInEditor(path);
            } else {
                // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
                this.previewFile(path);
            }
            }
        });
    }
    
    open() {
        console.log('üîß Opening File Explorer...');
        
        if (typeof bootstrap === 'undefined') {
            console.error('‚ùå Bootstrap not loaded');
            alert('Bootstrap –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤.');
            return;
        }
        
        const modal = new bootstrap.Modal(this.modal);
        modal.show();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É
        this.navigateTo('');
    }
    
    close() {
        const modal = bootstrap.Modal.getInstance(this.modal);
        if (modal) {
            modal.hide();
        }
    }
    
    async navigateTo(path) {
        console.log('üîß Navigating to:', path);
        this.currentPath = path;
        
        try {
            await this.loadCurrentPath();
            this.updateBreadcrumbs();
        } catch (error) {
            console.error('‚ùå Navigation error:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: ' + error.message, 'error');
        }
    }
    
    async loadCurrentPath() {
        const fileList = this.modal.querySelector('.file-list');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        fileList.innerHTML = `
            <div class="loading-spinner">
                <i class="fas fa-spinner fa-spin"></i>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤...</p>
            </div>
        `;
        
        try {
            console.log('üîß FileExplorer - Making request to:', `${this.apiBase}/file-explorer?path=${this.currentPath}`);
            
            const response = await fetch(`${this.apiBase}/file-explorer?path=${this.currentPath}`, {
                headers: {
                    'X-CSRFToken': this.getCSRFToken()
                }
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            
            if (data.success) {
                this.displayFiles(data.files);
            } else {
                throw new Error(data.error || 'Failed to load files');
            }
            
        } catch (error) {
            console.error('Error loading files:', error);
            fileList.innerHTML = `
                <div class="text-center py-4">
                    <i class="fas fa-exclamation-triangle fa-3x text-danger mb-3"></i>
                    <p class="text-danger">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤</p>
                    <p class="text-muted">${error.message}</p>
                </div>
            `;
        }
    }
    
    displayFiles(files) {
        const fileList = this.modal.querySelector('.file-list');
        if (!fileList) return;

        if (!files || files.length === 0) {
            fileList.innerHTML = `
                <div class="text-center py-4">
                    <i class="fas fa-folder-open fa-3x text-muted mb-3"></i>
                    <p class="text-muted">–ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞</p>
                </div>
            `;
            return;
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –ø–∞–ø–∫–∏, –ø–æ—Ç–æ–º —Ñ–∞–π–ª—ã
        const sortedFiles = files.sort((a, b) => {
            if (a.type === 'directory' && b.type === 'file') return -1;
            if (a.type === 'file' && b.type === 'directory') return 1;
            return a.name.localeCompare(b.name);
        });

        let filesHtml = '<div class="file-grid">';
        
        sortedFiles.forEach(file => {
            const isHTML = file.extension === '.html' || file.extension === '.htm';
            const isEditable = file.editable;
            
            filesHtml += `
                <div class="file-item ${file.type}" data-path="${file.path}">
                    <div class="file-icon">
                        ${this.getFileIcon(file)}
                    </div>
                    <div class="file-info">
                        <div class="file-name" title="${file.name}">${file.name}</div>
                        ${file.size ? `<div class="file-size">${this.formatFileSize(file.size)}</div>` : ''}
                    </div>
                    <div class="file-actions">
                        ${isHTML ? `
                            <button class="btn btn-sm btn-primary me-1" 
                                    onclick="window.fileExplorer.openVisualEditor('${file.path}')"
                                    title="–í–∏–∑—É–∞–ª—å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ">
                                <i class="fas fa-palette"></i>
                            </button>
                            <button class="btn btn-sm btn-info me-1" 
                                    onclick="window.fileExplorer.previewFullPage('${file.path}')"
                                    title="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã">
                                <i class="fas fa-external-link-alt"></i>
                            </button>
                        ` : ''}
                        ${isEditable ? `
                            <button class="btn btn-sm btn-outline-secondary me-1" 
                                    onclick="window.fileExplorer.editTextFile('${file.path}')"
                                    title="–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ">
                                <i class="fas fa-code"></i>
                            </button>
                        ` : ''}
                        <button class="btn btn-sm btn-outline-danger" 
                                onclick="window.fileExplorer.deleteFile('${file.path}')"
                                title="–£–¥–∞–ª–∏—Ç—å">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
            `;
        });
        
        filesHtml += '</div>';
        fileList.innerHTML = filesHtml;
    }
    
    getFileIcon(file) {
        if (file.type === 'directory') {
            return '<i class="fas fa-folder"></i>';
        }
        
        const extension = file.extension?.toLowerCase();
        switch (extension) {
            case '.html':
            case '.htm':
                return '<i class="fas fa-file-code"></i>';
            case '.css':
                return '<i class="fas fa-file-code"></i>';
            case '.js':
                return '<i class="fas fa-file-code"></i>';
            case '.json':
                return '<i class="fas fa-file-code"></i>';
            case '.png':
            case '.jpg':
            case '.jpeg':
            case '.gif':
            case '.svg':
                return '<i class="fas fa-file-image"></i>';
            default:
                return '<i class="fas fa-file"></i>';
        }
    }
    
    formatFileSize(bytes) {
        if (!bytes) return '';
        
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(1024));
        return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
    }
    
    updateBreadcrumbs() {
        const breadcrumb = this.modal.querySelector('.breadcrumb');
        const pathParts = this.currentPath.split('/').filter(part => part);
        
        let breadcrumbHTML = `
            <li class="breadcrumb-item">
                <a href="#" data-path="">–ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞</a>
            </li>
        `;
        
        let currentPath = '';
        pathParts.forEach((part, index) => {
            currentPath += (currentPath ? '/' : '') + part;
            const isLast = index === pathParts.length - 1;
            
            breadcrumbHTML += `
                <li class="breadcrumb-item ${isLast ? 'active' : ''}">
                    ${isLast ? part : `<a href="#" data-path="${currentPath}">${part}</a>`}
                </li>
            `;
        });
        
        breadcrumb.innerHTML = breadcrumbHTML;
    }
    
    async previewFile(path) {
        console.log('üîß Previewing file:', path);
        
        try {
            const response = await fetch(`${this.apiBase}/template-content/${encodeURIComponent(path)}`, {
                headers: {
                    'X-CSRFToken': this.getCSRFToken()
                }
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            
            if (data.success) {
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ë–ï–ó document.write
                const previewWindow = window.open('', '_blank');
                this.writeToPreviewWindow(previewWindow, data.content);
            } else {
                throw new Error(data.error || 'Failed to load template');
            }
            
        } catch (error) {
            console.error('Error previewing file:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: ' + error.message, 'error');
        }
    }
    
    async loadFile(path) {
        console.log('üîß Loading file:', path);
        
        try {
            const response = await fetch(`${this.apiBase}/template-content/${encodeURIComponent(path)}`, {
                headers: {
                    'X-CSRFToken': this.getCSRFToken()
                }
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            
            if (data.success && this.editor) {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
                this.editor.setComponents('');
                this.editor.setStyle('');
                
                if (data.content) {
                    this.editor.setComponents(data.content);
                }
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≤–æ–¥–Ω–∏–∫
                this.close();
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                this.showNotification('–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω', 'success');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                const selectedTemplate = document.getElementById('selected-template');
                if (selectedTemplate) {
                    selectedTemplate.textContent = path.split('/').pop();
                }
            } else {
                throw new Error(data.error || 'Failed to load template');
            }
            
        } catch (error) {
            console.error('Error loading file:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + error.message, 'error');
        }
    }
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä enhanced-editor
    async loadFileInEditor(path) {
        console.log('üîß Loading file with enhanced loader:', path);
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Enhanced File Loader
            if (!this.fileLoader) {
                console.warn('‚ö†Ô∏è Enhanced File Loader not ready, falling back to basic loading');
                return this.loadFileInEditorBasic(path);
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Enhanced File Loader
            const result = await this.fileLoader.loadFile(path);
            
            if (result.success) {
                // –£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
                this.showNotification('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä', 'success');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º UI —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤
                this.updateTemplateSelector(path);
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º FileExplorer
                this.close();
                
                // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º
                this.enableEditorControls();
                
                console.log('‚úÖ File loaded successfully via Enhanced File Loader');
                
            } else {
                throw new Error(result.error || 'Failed to load file');
            }
            
        } catch (error) {
            console.error('‚ùå Error loading file via Enhanced File Loader:', error);
            this.showNotification(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`, 'error');
            
            // Fallback –∫ –±–∞–∑–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
            console.log('üîÑ Falling back to basic file loading...');
            try {
                await this.loadFileInEditorBasic(path);
            } catch (fallbackError) {
                console.error('‚ùå Fallback loading also failed:', fallbackError);
                this.showNotification('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞', 'error');
            }
        }
    }
    
    // Fallback –º–µ—Ç–æ–¥ –¥–ª—è –±–∞–∑–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    async loadFileInEditorBasic(path) {
        console.log('üîß Basic file loading for:', path);
        
        try {
            const response = await fetch(`${this.apiBase}/template-content/${encodeURIComponent(path)}`, {
                headers: {
                    'X-CSRFToken': this.getCSRFToken()
                }
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            
            if (data.success && window.editor) {
                // –ë–∞–∑–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∏–ª–µ–π
                const { bodyHtml, cssContent } = this.parseBasicHTML(data.content);
                
                // –û—á–∏—â–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä
                window.editor.setComponents('');
                window.editor.setStyle('');
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                if (bodyHtml) {
                    window.editor.setComponents(bodyHtml);
                }
                if (cssContent) {
                    window.editor.setStyle(cssContent);
                }
                
                this.showNotification('–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω (–±–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º)', 'warning');
                this.close();
                
            } else {
                throw new Error(data.error || 'Failed to load template');
            }
            
        } catch (error) {
            console.error('‚ùå Basic loading failed:', error);
            throw error;
        }
    }
    
    // –ù–û–í–û–ï: –û—á–∏—Å—Ç–∫–∞ Jinja2 —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∏–∑ HTML (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ ExternalCSSLoader)
    cleanJinjaFromHTML(htmlContent) {
        return htmlContent
            // –ó–∞–º–µ–Ω—è–µ–º url_for –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ –ü–ï–†–ï–î –ø–∞—Ä—Å–∏–Ω–≥–æ–º DOM
            .replace(/\{\{\s*url_for\(\s*['"]static['"],?\s*filename\s*=\s*['"]([^'"]+)['"]\s*\)\s*\}\}/g, '/static/$1')
            .replace(/\{\{\s*url_for\(\s*['"]static['"],?\s*filename=['"]([^'"]+)['"]\s*\)\s*\}\}/g, '/static/$1')
            // –£–±–∏—Ä–∞–µ–º –¥—Ä—É–≥–∏–µ Jinja2 –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            .replace(/\{\%\s*.*?\s*\%\}/g, '')
            .replace(/\{\{\s*[^}]*\s*\}\}/g, '')
            // –û—á–∏—â–∞–µ–º —É—Å–ª–æ–≤–Ω—ã–µ –±–ª–æ–∫–∏
            .replace(/\{\%\s*if\s+.*?\%\}[\s\S]*?\{\%\s*endif\s*\%\}/g, '')
            .replace(/\{\%\s*for\s+.*?\%\}[\s\S]*?\{\%\s*endfor\s*\%\}/g, '')
            // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –æ—Å—Ç–∞—Ç—å—Å—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è Jinja2
            .replace(/href\s*=\s*["']\s*["']/g, 'href="#"')
            .replace(/src\s*=\s*["']\s*["']/g, 'src="#"')
            .replace(/action\s*=\s*["']\s*["']/g, 'action="#"');
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML
    parseBasicHTML(htmlContent) {
        const cleanedHtml = this.cleanJinjaFromHTML(htmlContent);
        
        const parser = new DOMParser();
        const doc = parser.parseFromString(cleanedHtml, 'text/html');
        
        let cssContent = '';
        let bodyHtml = '';
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º CSS –∏–∑ style —Ç–µ–≥–æ–≤
        const styleTags = doc.querySelectorAll('style');
        styleTags.forEach(style => {
            cssContent += style.textContent + '\n';
        });
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ body
        if (doc.body) {
            bodyHtml = doc.body.innerHTML;
        }
        
        return { bodyHtml, cssContent };
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤
    updateTemplateSelector(path) {
        const selectedTemplate = document.getElementById('selected-template');
        if (selectedTemplate) {
            const fileName = path.split('/').pop();
            selectedTemplate.textContent = fileName;
            selectedTemplate.title = path; // –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –≤ tooltip
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        const editorTitle = document.querySelector('.editor-title');
        if (editorTitle) {
            editorTitle.textContent = `–†–µ–¥–∞–∫—Ç–æ—Ä: ${path}`;
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    enableEditorControls() {
        const controlButtons = [
            'save-btn',
            'preview-btn', 
            'undo-btn',
            'redo-btn',
            'clear-btn'
        ];
        
        controlButtons.forEach(btnId => {
            const btn = document.getElementById(btnId);
            if (btn) {
                btn.disabled = false;
                btn.classList.remove('disabled');
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        this.updateEditorStatus('ready', '–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω - –≥–æ—Ç–æ–≤ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é');
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    updateEditorStatus(type, message) {
        const statusDot = document.getElementById('status-dot');
        const statusText = document.getElementById('status-text');
        
        if (statusDot && statusText) {
            // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã —Å—Ç–∞—Ç—É—Å–∞
            statusDot.classList.remove('loading', 'ready', 'error', 'saving');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            statusDot.classList.add(type);
            statusText.textContent = message;
        }
    }
    
    // –û—Ç–∫—Ä—ã—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä (GrapesJS)
    async openVisualEditor(filePath) {
        try {
            console.log('üé® Opening visual editor for:', filePath);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            const response = await fetch(`${this.apiBase}/template-content/${encodeURIComponent(filePath)}`);
            const data = await response.json();
            
            if (!data.success) {
                throw new Error(data.message);
            }
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º File Explorer
            this.close();
            
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ/–º–æ–¥–∞–ª —Å GrapesJS
            this.openGrapesJSEditor(filePath, data.content, { name: filePath.split('/').pop() });
            
        } catch (error) {
            console.error('‚ùå Error opening visual editor:', error);
            alert(`–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞: ${error.message}`);
        }
    }
    
    // –°–æ–∑–¥–∞—Ç—å –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å GrapesJS —Ä–µ–¥–∞–∫—Ç–æ—Ä
    openGrapesJSEditor(filePath, htmlContent, fileInfo) {
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π –º–æ–¥–∞–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        const editorModal = document.createElement('div');
        editorModal.className = 'modal fade';
        editorModal.id = 'visualEditorModal';
        editorModal.setAttribute('data-bs-backdrop', 'static');
        editorModal.innerHTML = `
            <div class="modal-dialog modal-fullscreen">
                <div class="modal-content">
                    <div class="modal-header bg-primary text-white">
                        <h5 class="modal-title">
                            <i class="fas fa-palette me-2"></i>
                            –í–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä - ${fileInfo.name}
                        </h5>
                        <div class="header-actions">
                            <button class="btn btn-light btn-sm me-2" id="save-visual-changes">
                                <i class="fas fa-save"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                            </button>
                            <button class="btn btn-light btn-sm me-2" id="preview-page">
                                <i class="fas fa-eye"></i> –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
                            </button>
                            <button class="btn btn-outline-light btn-sm" data-bs-dismiss="modal">
                                <i class="fas fa-times"></i> –ó–∞–∫—Ä—ã—Ç—å
                            </button>
                        </div>
                    </div>
                    <div class="modal-body p-0">
                        <div id="visual-editor-container" style="height: calc(100vh - 120px);"></div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(editorModal);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª
        const modal = new bootstrap.Modal(editorModal);
        modal.show();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º GrapesJS –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª–∞
        setTimeout(async () => {
            await this.initGrapesJS(filePath, htmlContent, fileInfo);
        }, 500);
        
        // –£–¥–∞–ª—è–µ–º –º–æ–¥–∞–ª –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        editorModal.addEventListener('hidden.bs.modal', () => {
            if (this.visualEditor) {
                this.visualEditor.destroy();
                this.visualEditor = null;
            }
            editorModal.remove();
        });
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GrapesJS
    async initGrapesJS(filePath, htmlContent, fileInfo) {
        const container = document.getElementById('visual-editor-container');
        if (!container) {
            console.error('‚ùå Visual editor container not found');
            return;
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ HTML –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        const { bodyHtml, cssContent, externalStyles, externalScripts } = this.parseFullHTMLContent(htmlContent);
        
        this.visualEditor = grapesjs.init({
            container: '#visual-editor-container',
            width: '100%',
            height: '100%',
            
            // –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ
            storageManager: false,
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–Ω–µ–ª–µ–π
            panels: {
                defaults: [
                    {
                        id: 'basic-actions',
                        el: '.panel__basic-actions',
                        buttons: [
                            {
                                id: 'visibility',
                                active: true,
                                className: 'btn-toggle-borders',
                                label: '<i class="fas fa-border-style"></i>',
                                command: 'sw-visibility',
                            },
                            {
                                id: 'export',
                                className: 'btn-open-export',
                                label: '<i class="fas fa-code"></i>',
                                command: 'export-template',
                                context: 'export-template',
                            },
                            {
                                id: 'show-json',
                                className: 'btn-show-json',
                                label: '<i class="fas fa-file-code"></i>',
                                context: 'show-json',
                                command(editor) {
                                    editor.Modal.setTitle('Components JSON')
                                        .setContent(`<textarea style="width:100%; height: 250px;">
                                            ${JSON.stringify(editor.getComponents(), null, 2)}
                                        </textarea>`)
                                        .open();
                                },
                            }
                        ],
                    },
                    {
                        id: 'panel-devices',
                        el: '.panel__devices',
                        buttons: [
                            {
                                id: 'device-desktop',
                                label: '<i class="fas fa-desktop"></i>',
                                command: 'set-device-desktop',
                                active: true,
                            },
                            {
                                id: 'device-tablet',
                                label: '<i class="fas fa-tablet-alt"></i>',
                                command: 'set-device-tablet',
                            },
                            {
                                id: 'device-mobile',
                                label: '<i class="fas fa-mobile-alt"></i>',
                                command: 'set-device-mobile',
                            },
                        ],
                    },
                ]
            },
            
            // –ú–µ–Ω–µ–¥–∂–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            deviceManager: {
                devices: [
                    {
                        name: 'Desktop',
                        width: '',
                    },
                    {
                        name: 'Tablet',
                        width: '768px',
                        widthMedia: '992px',
                    },
                    {
                        name: 'Mobile',
                        width: '320px',
                        widthMedia: '768px',
                    },
                ]
            },
            
            // –ú–µ–Ω–µ–¥–∂–µ—Ä –±–ª–æ–∫–æ–≤
            blockManager: {
                appendTo: '.blocks-container',
                blocks: [
                    {
                        id: 'section',
                        label: 'Section',
                        content: `<section class="section">
                            <div class="container">
                                <div class="row">
                                    <div class="col">
                                        <h2>New Section</h2>
                                        <p>Start editing this section...</p>
                                    </div>
                                </div>
                            </div>
                        </section>`,
                        category: 'Layout',
                        media: '<i class="fas fa-square"></i>'
                    },
                    {
                        id: 'text',
                        label: 'Text',
                        content: '<div data-gjs-type="text">Insert your text here</div>',
                        category: 'Basic',
                        media: '<i class="fas fa-font"></i>'
                    },
                    {
                        id: 'image',
                        label: 'Image',
                        content: { type: 'image' },
                        category: 'Basic',
                        media: '<i class="fas fa-image"></i>'
                    },
                    {
                        id: 'button',
                        label: 'Button',
                        content: '<a class="btn btn-primary">Click me</a>',
                        category: 'Basic',
                        media: '<i class="fas fa-hand-pointer"></i>'
                    },
                    {
                        id: 'dental-hero',
                        label: 'Dental Hero',
                        content: `
                            <section class="hero-section bg-primary text-white py-5">
                                <div class="container">
                                    <div class="row align-items-center">
                                        <div class="col-md-6">
                                            <h1 class="display-4 fw-bold">–í–∞—à–∞ —É–ª—ã–±–∫–∞ - –Ω–∞—à–∞ –∑–∞–±–æ—Ç–∞</h1>
                                            <p class="lead">–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º</p>
                                            <a href="#" class="btn btn-light btn-lg">–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º</a>
                                        </div>
                                        <div class="col-md-6">
                                            <img src="/static/images/dental-hero.jpg" class="img-fluid rounded" alt="–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è">
                                        </div>
                                    </div>
                                </div>
                            </section>
                        `,
                        category: 'Dental',
                        media: '<i class="fas fa-tooth"></i>'
                    },
                    {
                        id: 'services-grid',
                        label: 'Services Grid',
                        content: `
                            <section class="services-section py-5">
                                <div class="container">
                                    <h2 class="text-center mb-5">–ù–∞—à–∏ —É—Å–ª—É–≥–∏</h2>
                                    <div class="row">
                                        <div class="col-md-4 mb-4">
                                            <div class="service-card text-center p-4 border rounded">
                                                <i class="fas fa-tooth fa-3x text-primary mb-3"></i>
                                                <h4>–õ–µ—á–µ–Ω–∏–µ –∫–∞—Ä–∏–µ—Å–∞</h4>
                                                <p>–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ª–µ—á–µ–Ω–∏—è –∫–∞—Ä–∏–µ—Å–∞</p>
                                            </div>
                                        </div>
                                        <div class="col-md-4 mb-4">
                                            <div class="service-card text-center p-4 border rounded">
                                                <i class="fas fa-smile fa-3x text-primary mb-3"></i>
                                                <h4>–û—Ç–±–µ–ª–∏–≤–∞–Ω–∏–µ</h4>
                                                <p>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ—Ç–±–µ–ª–∏–≤–∞–Ω–∏–µ –∑—É–±–æ–≤</p>
                                            </div>
                                        </div>
                                        <div class="col-md-4 mb-4">
                                            <div class="service-card text-center p-4 border rounded">
                                                <i class="fas fa-user-md fa-3x text-primary mb-3"></i>
                                                <h4>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</h4>
                                                <p>–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </section>
                        `,
                        category: 'Dental',
                        media: '<i class="fas fa-th"></i>'
                    }
                ]
            },
            
            // –ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–∏–ª–µ–π
            styleManager: {
                appendTo: '.styles-container',
            },
            
            // –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–ª–æ–µ–≤
            layerManager: {
                appendTo: '.layers-container'
            },
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Canvas
            canvas: {
                styles: [
                    'https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css',
                    'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css'
                ],
                scripts: [
                    'https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js'
                ]
            }
        });
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        this.visualEditor.setComponents(bodyHtml);
        this.visualEditor.setStyle(cssContent);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã —á–µ—Ä–µ–∑ ExternalCSSLoader
        if (externalStyles.length > 0 || externalScripts.length > 0) {
            console.log('üîß Loading external resources:', { styles: externalStyles.length, scripts: externalScripts.length });
            await this.loadExternalResources(this.visualEditor, externalStyles, externalScripts);
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        this.setupDeviceCommands();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        this.setupSaveEvents(filePath, fileInfo);
        
        console.log('‚úÖ GrapesJS Visual Editor initialized');
    }
    
    // –ü–∞—Ä—Å–∏–Ω–≥ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    parseHTMLContent(htmlContent) {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π DOM —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        const parser = new DOMParser();
        const doc = parser.parseFromString(htmlContent, 'text/html');
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º CSS –∏–∑ style —Ç–µ–≥–æ–≤ –∏ link —Ç–µ–≥–æ–≤
        let cssContent = '';
        
        // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å—Ç–∏–ª–∏
        const styleTags = doc.querySelectorAll('style');
        styleTags.forEach(style => {
            cssContent += style.textContent + '\n';
        });
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ body
        const bodyContent = doc.body ? doc.body.innerHTML : htmlContent;
        
        return {
            bodyHtml: bodyContent,
            cssContent: cssContent
        };
    }
    
    // –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    parseFullHTMLContent(htmlContent) {
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –æ—á–∏—Å—Ç–∫—É Jinja2 —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        const cleanedHtml = this.cleanJinjaFromHTML(htmlContent);
        
        const parser = new DOMParser();
        const doc = parser.parseFromString(cleanedHtml, 'text/html');
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º CSS –∏–∑ style —Ç–µ–≥–æ–≤
        let cssContent = '';
        const styleTags = doc.querySelectorAll('style');
        styleTags.forEach(style => {
            cssContent += style.textContent + '\n';
        });
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º JavaScript –∏–∑ script —Ç–µ–≥–æ–≤
        let jsContent = '';
        const scriptTags = doc.querySelectorAll('script');
        scriptTags.forEach(script => {
            if (script.textContent.trim()) {
                jsContent += script.textContent + '\n';
            }
        });
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ —Å—Ç–∏–ª–∏ (link —Ç–µ–≥–∏)
        const externalStyles = [];
        const linkTags = doc.querySelectorAll('link[rel="stylesheet"]');
        linkTags.forEach(link => {
            const href = link.href;
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π URL, –∞ –Ω–µ Jinja2 —à–∞–±–ª–æ–Ω
            if (href && 
                !href.includes('{{') && 
                !href.includes('}}') && 
                !href.includes('url_for') &&
                !href.includes('%7B%7B') && // URL-encoded {{ 
                !href.includes('%7D%7D') && // URL-encoded }}
                href !== '#' &&
                href !== window.location.href) {
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL
                try {
                    new URL(href);
                    externalStyles.push(href);
                } catch (e) {
                    console.warn('‚ö†Ô∏è Skipping invalid CSS URL:', href);
                }
            } else {
                console.warn('‚ö†Ô∏è Skipping Jinja2 template or invalid URL in CSS:', href);
            }
        });
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç—ã
        const externalScripts = [];
        const externalScriptTags = doc.querySelectorAll('script[src]');
        externalScriptTags.forEach(script => {
            const src = script.src;
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π URL, –∞ –Ω–µ Jinja2 —à–∞–±–ª–æ–Ω
            if (src && 
                !src.includes('{{') && 
                !src.includes('}}') &&
                !src.includes('%7B%7B') && // URL-encoded {{ 
                !src.includes('%7D%7D') && // URL-encoded }}
                src !== '#' &&
                src !== window.location.href) {
                externalScripts.push(src);
            } else {
                console.warn('‚ö†Ô∏è Skipping Jinja2 template or invalid URL in script:', src);
            }
        });
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ body
        const bodyContent = doc.body ? doc.body.innerHTML : htmlContent;
        
        return {
            bodyHtml: bodyContent,
            cssContent: cssContent,
            jsContent: jsContent,
            externalStyles: externalStyles,
            externalScripts: externalScripts
        };
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ canvas —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    async loadExternalResources(editor, externalStyles, externalScripts) {
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º ExternalCSSLoader –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL
        if (externalStyles.length > 0) {
            console.log('üé® Loading external styles through ExternalCSSLoader...');
            
            try {
                // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä ExternalCSSLoader –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if (!window.ExternalCSSLoader) {
                    console.warn('‚ö†Ô∏è ExternalCSSLoader not available, falling back to basic loading');
                    this.loadExternalResourcesBasic(editor, externalStyles, externalScripts);
                    return;
                }
                
                const cssLoader = new window.ExternalCSSLoader(editor);
                
                // –°–æ–∑–¥–∞–µ–º HTML —Å CSS —Å—Å—ã–ª–∫–∞–º–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                const cssHTML = externalStyles.map(url => `<link rel="stylesheet" href="${url}">`).join('\n');
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º CSS —á–µ—Ä–µ–∑ ExternalCSSLoader
                await cssLoader.loadExternalCSSFromHTML(cssHTML);
                
                console.log('‚úÖ External CSS loaded through ExternalCSSLoader');
                
            } catch (error) {
                console.warn('‚ö†Ô∏è ExternalCSSLoader failed, falling back to basic loading:', error);
                this.loadExternalResourcesBasic(editor, externalStyles, externalScripts);
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç—ã –≤ canvas
        this.loadExternalScripts(editor, externalScripts);
    }
    
    // –ë–∞–∑–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ (fallback)
    loadExternalResourcesBasic(editor, externalStyles, externalScripts) {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–µ —Å—Ç–∏–ª–∏ –≤ canvas
        if (externalStyles.length > 0) {
            try {
                const canvas = editor.Canvas.getFrameEl();
                if (canvas && canvas.contentDocument) {
                    const canvasDoc = canvas.contentDocument;
                    const head = canvasDoc.head;
                    
                    externalStyles.forEach(styleUrl => {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π URL, –∞ –Ω–µ Jinja2 —à–∞–±–ª–æ–Ω
                        if (styleUrl && 
                            !styleUrl.includes('{{') && 
                            !styleUrl.includes('}}') &&
                            !styleUrl.includes('%7B%7B') && // URL-encoded {{ 
                            !styleUrl.includes('%7D%7D') && // URL-encoded }}
                            styleUrl !== '#' &&
                            styleUrl !== window.location.href) {
                            
                            const link = canvasDoc.createElement('link');
                            link.rel = 'stylesheet';
                            link.href = styleUrl;
                            link.onload = () => console.log('‚úÖ External CSS loaded in canvas:', styleUrl);
                            link.onerror = () => console.warn('‚ùå Failed to load external CSS in canvas:', styleUrl);
                            head.appendChild(link);
                        } else {
                            console.warn('‚ö†Ô∏è Skipping invalid style URL in editor:', styleUrl);
                        }
                    });
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è Could not load external styles:', error);
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç—ã –≤ canvas
        this.loadExternalScripts(editor, externalScripts);
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤ –≤ canvas —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    loadExternalScripts(editor, externalScripts) {
        if (externalScripts.length > 0) {
            try {
                const canvas = editor.Canvas.getFrameEl();
                if (canvas && canvas.contentDocument) {
                    const canvasDoc = canvas.contentDocument;
                    const body = canvasDoc.body;
                    
                    externalScripts.forEach(scriptUrl => {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π URL, –∞ –Ω–µ Jinja2 —à–∞–±–ª–æ–Ω
                        if (scriptUrl && 
                            !scriptUrl.includes('{{') && 
                            !scriptUrl.includes('}}') &&
                            !scriptUrl.includes('%7B%7B') && // URL-encoded {{ 
                            !scriptUrl.includes('%7D%7D') && // URL-encoded }}
                            scriptUrl !== '#' &&
                            scriptUrl !== window.location.href) {
                            
                            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ –ë–ï–ó document.write
                            const script = canvasDoc.createElement('script');
                            script.src = scriptUrl;
                            script.onload = () => console.log('‚úÖ External script loaded in canvas:', scriptUrl);
                            script.onerror = () => console.warn('‚ùå Failed to load external script in canvas:', scriptUrl);
                            body.appendChild(script);
                        } else {
                            console.warn('‚ö†Ô∏è Skipping invalid script URL in editor:', scriptUrl);
                        }
                    });
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è Could not load external scripts:', error);
            }
        }
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ JavaScript –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä
    loadJavaScript(editor, jsContent) {
        if (!jsContent.trim()) return;
        
        try {
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π script —Ç–µ–≥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è JavaScript
            const scriptElement = document.createElement('script');
            scriptElement.textContent = jsContent;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ canvas —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
            const canvas = editor.Canvas.getFrameEl();
            if (canvas && canvas.contentDocument) {
                const canvasDoc = canvas.contentDocument;
                const canvasScript = canvasDoc.createElement('script');
                canvasScript.textContent = jsContent;
                canvasDoc.body.appendChild(canvasScript);
            }
            
            console.log('‚úÖ JavaScript loaded in editor');
        } catch (error) {
            console.warn('‚ö†Ô∏è Warning: Could not load JavaScript in editor:', error);
        }
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    setupDeviceCommands() {
        this.visualEditor.Commands.add('set-device-desktop', {
            run: editor => editor.setDevice('Desktop')
        });
        this.visualEditor.Commands.add('set-device-tablet', {
            run: editor => editor.setDevice('Tablet')
        });
        this.visualEditor.Commands.add('set-device-mobile', {
            run: editor => editor.setDevice('Mobile')
        });
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–±—ã—Ç–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    setupSaveEvents(filePath, fileInfo) {
        const saveBtn = document.getElementById('save-visual-changes');
        const previewBtn = document.getElementById('preview-page');
        
        if (saveBtn) {
            saveBtn.addEventListener('click', () => {
                this.saveVisualChanges(filePath, fileInfo);
            });
        }
        
        if (previewBtn) {
            previewBtn.addEventListener('click', () => {
                this.previewVisualChanges();
            });
        }
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    async saveVisualChanges(filePath, fileInfo) {
        if (!this.visualEditor) return;
        
        try {
            const saveBtn = document.getElementById('save-visual-changes');
            const originalText = saveBtn.innerHTML;
            saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
            saveBtn.disabled = true;
            
            // –ü–æ–ª—É—á–∞–µ–º HTML –∏ CSS –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
            const htmlComponents = this.visualEditor.getHtml();
            const cssStyles = this.visualEditor.getCss();
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π HTML –¥–æ–∫—É–º–µ–Ω—Ç
            const fullHTML = this.buildFullHTML(htmlComponents, cssStyles, fileInfo);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ API
            const response = await fetch(`${this.apiBase}/template-content/${encodeURIComponent(filePath)}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': this.getCSRFToken()
                },
                body: JSON.stringify({ content: fullHTML })
            });
            
            const data = await response.json();
            
            if (!data.success) {
                throw new Error(data.message);
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            this.showNotification('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!', 'success');
            
            console.log('‚úÖ Visual changes saved successfully');
            
        } catch (error) {
            console.error('‚ùå Error saving visual changes:', error);
            this.showNotification(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`, 'error');
        } finally {
            const saveBtn = document.getElementById('save-visual-changes');
            if (saveBtn) {
                saveBtn.innerHTML = '<i class="fas fa-save"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
                saveBtn.disabled = false;
            }
        }
    }
    
    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ HTML –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    buildFullHTML(htmlComponents, cssStyles, fileInfo) {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤–Ω–µ—à–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        const editor = window.editor;
        const externalStyles = editor?.getConfig()?.canvas?.styles || [];
        const externalScripts = editor?.getConfig()?.canvas?.scripts || [];
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ URL (–∏—Å–∫–ª—é—á–∞–µ–º Jinja2 —à–∞–±–ª–æ–Ω—ã)
        const validStyles = externalStyles.filter(style => 
            style && !style.includes('{{') && !style.includes('}}')
        );
        const validScripts = externalScripts.filter(script => 
            script && !script.includes('{{') && !script.includes('}}')
        );
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–µ —Å—Ç–∏–ª–∏
        const externalStylesHTML = validStyles
            .map(style => `<link href="${style}" rel="stylesheet">`)
            .join('\n    ');
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–æ—Ä–º–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç—ã —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
        const externalScriptsHTML = validScripts
            .map(script => `<script src="${script}" async></script>`)
            .join('\n    ');
        
        return `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${fileInfo.name.replace('.html', '')}</title>
    
    <!-- External Styles -->
    ${externalStylesHTML}
    
    <!-- Custom Styles -->
    <style>
${cssStyles}
    </style>
</head>
<body>
${htmlComponents}

    <!-- External Scripts -->
    ${externalScriptsHTML}
</body>
</html>`;
    }
    
    // –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π
    previewVisualChanges() {
        if (!this.visualEditor) return;
        
        const htmlComponents = this.visualEditor.getHtml();
        const cssStyles = this.visualEditor.getCss();
        
        const previewHTML = this.buildFullHTML(htmlComponents, cssStyles, { name: 'Preview' });
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –ë–ï–ó document.write
        const previewWindow = window.open('', '_blank');
        this.writeToPreviewWindow(previewWindow, previewHTML);
    }
    
    // –ü–æ–ª–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏)
    async previewFullPage(filePath) {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            const response = await fetch(`${this.apiBase}/template-content/${encodeURIComponent(filePath)}`);
            const data = await response.json();
            
            if (!data.success) {
                throw new Error(data.message);
            }
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –ë–ï–ó document.write
            const previewWindow = window.open('', '_blank');
            this.writeToPreviewWindow(previewWindow, data.content);
            
        } catch (error) {
            console.error('‚ùå Error previewing page:', error);
            alert(`–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: ${error.message}`);
        }
    }
    
    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    async editTextFile(filePath) {
        // –ú–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º
        // –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ —Å CodeMirror/Monaco Editor
        console.log('üìù Opening text editor for:', filePath);
        alert('–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏');
    }
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    async deleteFile(filePath) {
        if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª: ${filePath}?`)) {
            return;
        }
        
        try {
            const response = await fetch(`${this.apiBase}/template-content/${encodeURIComponent(filePath)}`, {
                method: 'DELETE',
                headers: {
                    'X-CSRFToken': this.getCSRFToken()
                }
            });
            
            const data = await response.json();
            
            if (!data.success) {
                throw new Error(data.message);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
            this.loadCurrentPath();
            
            this.showNotification('–§–∞–π–ª —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
            
        } catch (error) {
            console.error('‚ùå Error deleting file:', error);
            this.showNotification(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error.message}`, 'error');
        }
    }
    
    // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    showNotification(message, type = 'info') {
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ Bootstrap
        const notification = document.createElement('div');
        notification.className = `alert alert-${type === 'error' ? 'danger' : type} alert-dismissible fade show position-fixed`;
        notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
        notification.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        document.body.appendChild(notification);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 5000);
    }
    
    getCSRFToken() {
        return document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || '';
    }
    
    // –ù–û–í–û–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–ø–∏—Å—å HTML –≤ preview –æ–∫–Ω–æ –ë–ï–ó document.write
    writeToPreviewWindow(previewWindow, htmlContent) {
        try {
            // –ú–µ—Ç–æ–¥ 1: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ data URL (—Å–∞–º—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π)
            const dataURL = 'data:text/html;charset=utf-8,' + encodeURIComponent(htmlContent);
            previewWindow.location.href = dataURL;
            console.log('‚úÖ Preview window updated using data URL (no document.write)');
            return;
        } catch (error) {
            console.warn('‚ö†Ô∏è Data URL method failed, trying innerHTML:', error);
        }
        
        try {
            // –ú–µ—Ç–æ–¥ 2: –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å innerHTML
            if (previewWindow && previewWindow.document) {
                previewWindow.document.open();
                previewWindow.document.close();
                
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π HTML –¥–æ–∫—É–º–µ–Ω—Ç
                const newDoc = previewWindow.document.implementation.createHTMLDocument('Preview');
                newDoc.documentElement.innerHTML = htmlContent;
                
                // –ó–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–∫–Ω–∞
                previewWindow.document.replaceChild(
                    previewWindow.document.importNode(newDoc.documentElement, true),
                    previewWindow.document.documentElement
                );
                
                console.log('‚úÖ Preview window updated safely with innerHTML');
                return;
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è innerHTML method failed:', error);
        }
        
        // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - document.write (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
        try {
            console.warn('‚ö†Ô∏è Using document.write as last resort');
            previewWindow.document.open();
            previewWindow.document.write(htmlContent);
            previewWindow.document.close();
        } catch (error) {
            console.error('‚ùå All preview methods failed:', error);
        }
    }
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑ enhanced-editor
    async saveEnhancedEditorChanges(filePath) {
        const editor = window.editor;
        if (!editor) {
            this.showNotification('–†–µ–¥–∞–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
            return;
        }
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º HTML –∏ CSS –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
            const htmlComponents = editor.getHtml();
            const cssStyles = editor.getCss();
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π HTML –¥–æ–∫—É–º–µ–Ω—Ç
            const fullHTML = this.buildFullHTML(htmlComponents, cssStyles, { name: filePath.split('/').pop() });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ API
            const response = await fetch(`${this.apiBase}/template-content/${encodeURIComponent(filePath)}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRFToken': this.getCSRFToken()
                },
                body: JSON.stringify({ content: fullHTML })
            });
            
            const data = await response.json();
            
            if (!data.success) {
                throw new Error(data.message);
            }
            
            this.showNotification('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!', 'success');
            console.log('‚úÖ Enhanced editor changes saved successfully');
            
        } catch (error) {
            console.error('‚ùå Error saving enhanced editor changes:', error);
            this.showNotification(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`, 'error');
        }
    }
}

console.log('üîß FileExplorer class defined');

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä FileExplorer
window.fileExplorer = new FileExplorer();

// –î–µ–ª–∞–µ–º –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ
window.saveCurrentFile = () => {
    if (window.fileExplorer && window.fileExplorer.currentFile) {
        window.fileExplorer.saveEnhancedEditorChanges(window.fileExplorer.currentFile);
    } else {
        console.warn('‚ö†Ô∏è No file is currently loaded for saving');
    }
};

console.log('‚úÖ FileExplorer class loaded and global instance created');
