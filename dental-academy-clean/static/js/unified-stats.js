/**
 * –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤
 */

class UnifiedStatsManager {
    constructor() {
        this.currentLang = document.documentElement.lang || 'ru';
        this.updateInterval = null;
        this.isUpdating = false;
        this.init();
    }

    init() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.setupEventListeners();
        this.setupAutoRefresh();
        
        console.log('‚úÖ UnifiedStatsManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    setupEventListeners() {
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤
        document.addEventListener('lessonCompleted', (e) => {
            this.updateStats();
        });

        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        document.addEventListener('progressSaved', (e) => {
            this.updateStats();
        });

        // –°–ª—É—à–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞
        document.addEventListener('click', (e) => {
            if (e.target.matches('[data-action="complete-lesson"], .complete-lesson-btn, .mark-completed')) {
                setTimeout(() => this.updateStats(), 1000);
            }
        });

        // –°–ª—É—à–∞–µ–º AJAX –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–∫–∞
        this.interceptAjaxRequests();
    }

    interceptAjaxRequests() {
        // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º AJAX –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤
        const originalFetch = window.fetch;
        window.fetch = async (...args) => {
            const response = await originalFetch(...args);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Ä–æ–∫–∞
            const url = args[0];
            if (typeof url === 'string' && (
                url.includes('/mark-completed') ||
                url.includes('/save-progress') ||
                url.includes('/complete')
            )) {
                // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if (response.ok) {
                    setTimeout(() => this.updateStats(), 500);
                }
            }
            
            return response;
        };
    }

    setupAutoRefresh() {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        this.updateInterval = setInterval(() => {
            if (!this.isUpdating) {
                this.updateStats(true); // silent update
            }
        }, 30000);
    }

    async updateStats(silent = false) {
        if (this.isUpdating) {
            console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...');
            return;
        }

        this.isUpdating = true;

        try {
            if (!silent) {
                console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
            }

            const response = await fetch(`/${this.currentLang}/api/update-stats`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                credentials: 'same-origin'
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();

            if (data.success) {
                this.updateUIWithStats(data.stats);
                
                if (!silent) {
                    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', data.stats);
                    this.showSuccessMessage('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
                }
            } else {
                throw new Error(data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            
            if (!silent) {
                this.showErrorMessage(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`);
            }
        } finally {
            this.isUpdating = false;
        }
    }

    updateUIWithStats(stats) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        
        // 1. –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        this.updateProgressElements(stats.overall_progress);
        
        // 2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤
        this.updateCompletedLessons(stats.completed_lessons);
        
        // 3. –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è
        this.updateTimeSpent(stats.total_time_spent);
        
        // 4. –î–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        this.updateActiveDays(stats.active_days);
        
        // 5. –£—Ä–æ–≤–µ–Ω—å –∏ –æ–ø—ã—Ç
        this.updateLevelAndExperience(stats.level, stats.experience_points, stats.next_level_progress);
        
        // 6. –ê–Ω–∏–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        this.animateStatsUpdate();
    }

    updateProgressElements(progress) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –æ–±—â–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        const progressElements = document.querySelectorAll('[data-stat="overall-progress"], .overall-progress, .progress-percentage');
        
        progressElements.forEach(element => {
            const oldValue = element.textContent;
            const newValue = `${progress}%`;
            
            if (oldValue !== newValue) {
                // –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
                this.animateValueChange(element, oldValue, newValue);
            }
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã
        const progressBars = document.querySelectorAll('.progress-bar, .circular-progress');
        progressBars.forEach(bar => {
            const progressCircle = bar.querySelector('.progress-circle');
            if (progressCircle) {
                const circumference = 2 * Math.PI * 45; // —Ä–∞–¥–∏—É—Å 45
                const offset = circumference - (progress / 100) * circumference;
                progressCircle.style.strokeDashoffset = offset;
            }
        });
    }

    updateCompletedLessons(completed) {
        const elements = document.querySelectorAll('[data-stat="completed-lessons"], .completed-lessons');
        elements.forEach(element => {
            const oldValue = element.textContent;
            const newValue = completed.toString();
            
            if (oldValue !== newValue) {
                this.animateValueChange(element, oldValue, newValue);
            }
        });
    }

    updateTimeSpent(timeSpent) {
        const elements = document.querySelectorAll('[data-stat="time-spent"], .time-spent');
        elements.forEach(element => {
            const oldValue = element.textContent;
            const newValue = `${timeSpent} –º–∏–Ω`;
            
            if (oldValue !== newValue) {
                this.animateValueChange(element, oldValue, newValue);
            }
        });
    }

    updateActiveDays(days) {
        const elements = document.querySelectorAll('[data-stat="active-days"], .active-days');
        elements.forEach(element => {
            const oldValue = element.textContent;
            const newValue = days.toString();
            
            if (oldValue !== newValue) {
                this.animateValueChange(element, oldValue, newValue);
            }
        });
    }

    updateLevelAndExperience(level, experience, nextLevelProgress) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å
        const levelElements = document.querySelectorAll('[data-stat="level"], .user-level');
        levelElements.forEach(element => {
            element.textContent = level;
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—ã—Ç
        const expElements = document.querySelectorAll('[data-stat="experience"], .experience-points');
        expElements.forEach(element => {
            element.textContent = experience;
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        const nextLevelElements = document.querySelectorAll('[data-stat="next-level-progress"], .next-level-progress');
        nextLevelElements.forEach(element => {
            element.textContent = `${nextLevelProgress}%`;
        });
    }

    animateValueChange(element, oldValue, newValue) {
        // –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
        element.style.transition = 'all 0.3s ease';
        element.style.transform = 'scale(1.1)';
        element.style.color = '#28a745';
        
        setTimeout(() => {
            element.textContent = newValue;
            element.style.transform = 'scale(1)';
            element.style.color = '';
        }, 150);
    }

    animateStatsUpdate() {
        // –ê–Ω–∏–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const statsContainer = document.querySelector('.stats-container, .progress-stats');
        if (statsContainer) {
            statsContainer.style.transition = 'all 0.3s ease';
            statsContainer.style.boxShadow = '0 0 20px rgba(40, 167, 69, 0.3)';
            
            setTimeout(() => {
                statsContainer.style.boxShadow = '';
            }, 300);
        }
    }

    showSuccessMessage(message) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        const notification = document.createElement('div');
        notification.className = 'stats-notification success';
        notification.innerHTML = `
            <i class="fas fa-check-circle"></i>
            <span>${message}</span>
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 3000);
    }

    showErrorMessage(message) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        const notification = document.createElement('div');
        notification.className = 'stats-notification error';
        notification.innerHTML = `
            <i class="fas fa-exclamation-circle"></i>
            <span>${message}</span>
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 5000);
    }

    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    refresh() {
        this.updateStats();
    }

    destroy() {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    window.unifiedStatsManager = new UnifiedStatsManager();
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.UnifiedStatsManager = UnifiedStatsManager; 