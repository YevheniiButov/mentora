class ExternalCSSLoader{constructor(editor){this.editor=editor;this.loadedCSS=new Set();this.cssCache=new Map();this.projectCSSFiles=[];this.baseURL=window.location.origin;this.initProjectCSSFiles();}async initProjectCSSFiles(){try{const response=await fetch('/api/content-editor/css-files');const data=await response.json();if(data.success&&data.data?.css_files){this.projectCSSFiles=data.data.css_files.map(file=>({path: file.path,url: `/static/${file.path}`,name: file.name,full_name: file.full_name,category: file.category}));}else{console.warn('⚠️ Could not load project CSS files,using defaults');this.setDefaultProjectCSS();}}catch(error){console.warn('⚠️ Error loading project CSS files:',error);this.setDefaultProjectCSS();}}setDefaultProjectCSS(){this.projectCSSFiles=[{path: 'css/themes/themes.css',url: '/static/css/themes/themes.css',name: 'themes'},{path: 'css/learning_map.css',url: '/static/css/learning_map.css',name: 'learning_map'},{path: 'css/universal-styles.css',url: '/static/css/universal-styles.css',name: 'universal-styles'},{path: 'css/dental-components.css',url: '/static/css/dental-components.css',name: 'dental-components'},{path: 'css/components/components.css',url: '/static/css/components/components.css',name: 'components'},{path: 'css/base/global.css',url: '/static/css/base/global.css',name: 'global'},{path: 'css/pages/learning_map.css',url: '/static/css/pages/learning_map.css',name: 'learning_map_page'},{path: 'css/category-navigation.css',url: '/static/css/category-navigation.css',name: 'category-navigation'}];}cleanJinjaFromHTML(htmlContent){return htmlContent .replace(/\{\{\s*url_for\(\s*['"]static['"],?\s*filename\s*=\s*['"]([^'"]+)['"]\s*\)\s*\}\}/g,'/static/$1').replace(/\{\{\s*url_for\(\s*['"]static['"],?\s*filename=['"]([^'"]+)['"]\s*\)\s*\}\}/g,'/static/$1').replace(/\{\%\s*.*?\s*\%\}/g,'').replace(/\{\{\s*[^}]*\s*\}\}/g,'').replace(/\{\%\s*if\s+.*?\%\}[\s\S]*?\{\%\s*endif\s*\%\}/g,'').replace(/\{\%\s*for\s+.*?\%\}[\s\S]*?\{\%\s*endfor\s*\%\}/g,'');}resolveURL(href,originalHTML=''){if(href.includes('%7D')||href.includes('%7B')){console.warn('⚠️ Detected encoded Jinja2 syntax,trying to fix:',href);const match=originalHTML.match(new RegExp(`url_for\\([^)]*['"]([^'"]*${href.split('.')[0]}[^'"]*)['"]`,'i'));if(match){const filename=match[1];return `${this.baseURL}/static/${filename}`;}}if(href.startsWith('/static/')){return `${this.baseURL}${href}`;}if(href.startsWith('http: return href;}if(href.startsWith('/')){return `${this.baseURL}${href}`;}if(href.startsWith('./')||href.startsWith('../')){return `${this.baseURL}/static/${href.replace(/^\.\}if(href.endsWith('.css')){const projectFile=this.findProjectCSSFile(href);if(projectFile){return `${this.baseURL}${projectFile.url}`;}return `${this.baseURL}/static/css/${href}`;}console.warn('⚠️ Could not resolve URL:',href);return null;}findProjectCSSFile(filename){const baseName=filename.replace(/^.*\ const nameWithoutExt=baseName.replace('.css','');let found=this.projectCSSFiles.find(file=>file.path.endsWith(filename)||file.full_name===baseName||file.name===nameWithoutExt);if(found){return found;}found=this.projectCSSFiles.find(file=>file.path.includes(nameWithoutExt)||file.name.includes(nameWithoutExt));if(found){return found;}return null;}async loadSingleCSS(url,linkElement=null){try{if(this.cssCache.has(url)){const cached=this.cssCache.get(url);await this.injectCSSIntoCanvas(cached.content,url);this.loadedCSS.add(url);return{url,success: true,source: 'cache'};}const response=await fetch(url);if(!response.ok){throw new Error(`HTTP ${response.status}: ${response.statusText}`);}const cssContent=await response.text();if(!cssContent||cssContent.trim()===''){throw new Error('Empty CSS content');}const processedCSS=this.processRelativeURLsInCSS(cssContent,url);this.cssCache.set(url,{content: processedCSS,originalURL: url,loadedAt: Date.now(),size: cssContent.length});await this.injectCSSIntoCanvas(processedCSS,url);this.loadedCSS.add(url);return{url,success: true,source: 'network',size: cssContent.length};}catch(error){console.error('❌ Failed to load CSS:',url,error.message);const alternatives=this.getAlternativeURLs(url);for(const altURL of alternatives){try{const altResponse=await fetch(altURL);if(altResponse.ok){const altCSS=await altResponse.text();if(altCSS&&altCSS.trim()!==''){const processedCSS=this.processRelativeURLsInCSS(altCSS,altURL);await this.injectCSSIntoCanvas(processedCSS,altURL);this.loadedCSS.add(url);this.loadedCSS.add(altURL);return{url: altURL,success: true,source: 'alternative'};}}}catch(altError){console.warn('⚠️ Alternative also failed:',altURL,altError.message);}}return{url,success: false,error: error.message};}}getAlternativeURLs(originalURL){const alternatives=[];const fileName=originalURL.split('/').pop().split('?')[0];const staticPaths=[ `/static/css/${fileName}`,`/static/css/themes/${fileName}`,`/static/css/components/${fileName}`,`/static/css/pages/${fileName}`,`/static/css/base/${fileName}`,`/static/styles/${fileName}`,`/static/${fileName}` ];staticPaths.forEach(path=>{const fullURL=`${this.baseURL}${path}`;if(!originalURL.includes(path)&&!alternatives.includes(fullURL)){alternatives.push(fullURL);}});const projectFile=this.findProjectCSSFile(fileName);if(projectFile){const projectURL=`${this.baseURL}${projectFile.url}`;if(!alternatives.includes(projectURL)){alternatives.push(projectURL);}}return alternatives;}async injectCSSIntoCanvas(cssContent,sourceURL){const canvas=this.editor.Canvas;const canvasDoc=canvas.getDocument();if(!canvasDoc){console.warn('⚠️ Canvas document not ready');await new Promise(resolve=>{const checkCanvas=setInterval(()=>{if(canvas.getDocument()){clearInterval(checkCanvas);resolve();}},100);});return this.injectCSSIntoCanvas(cssContent,sourceURL);}const existingStyle=canvasDoc.querySelector(`style[data-source="${sourceURL}"]`);if(existingStyle){existingStyle.textContent=cssContent;return;}const styleElement=canvasDoc.createElement('style');styleElement.setAttribute('data-source',sourceURL);styleElement.setAttribute('data-loaded-by','ExternalCSSLoader');styleElement.setAttribute('type','text/css');styleElement.textContent=cssContent;const head=canvasDoc.head||canvasDoc.getElementsByTagName('head')[0];if(head){head.appendChild(styleElement);}else{const newHead=canvasDoc.createElement('head');newHead.appendChild(styleElement);const htmlElement=canvasDoc.documentElement||canvasDoc.getElementsByTagName('html')[0];if(htmlElement){htmlElement.insertBefore(newHead,htmlElement.firstChild);}else{console.warn('⚠️ Could not inject CSS-no HTML structure');}}}processRelativeURLsInCSS(cssContent,cssURL){const cssBaseURL=cssURL.substring(0,cssURL.lastIndexOf('/'));return cssContent.replace(/url\(\s*['"]?([^'")]+)['"]?\s*\)/g,(match,url)=>{if(url.startsWith('http: return match;}if(url.startsWith('data:')){return match;}const absoluteURL=`${cssBaseURL}/${url}`;return `url('${absoluteURL}')`;});}extractImportsFromCSS(cssContent){const imports=[];const importRegex=/@import\s+(?:url\()?['"]?([^'")]+)['"]?\)?/g;let match;while((match=importRegex.exec(cssContent))!==null){imports.push(match[1]);}return imports;}async loadExternalCSSFromHTML(htmlContent){const cleanedHTML=this.cleanJinjaFromHTML(htmlContent);const parser=new DOMParser();const doc=parser.parseFromString(cleanedHTML,'text/html');const linkTags=doc.querySelectorAll('link[rel="stylesheet"],link[href*=".css"]');const cssPromises=[];for(const link of linkTags){const href=link.getAttribute('href');if(href){const resolvedURL=this.resolveURL(href,htmlContent);if(resolvedURL&&!this.loadedCSS.has(resolvedURL)){cssPromises.push(this.loadSingleCSS(resolvedURL,link));}else{console.warn('⚠️ Could not resolve URL:',href);}}}const styleTags=doc.querySelectorAll('style');for(const style of styleTags){const imports=this.extractImportsFromCSS(style.textContent);for(const importURL of imports){const resolvedURL=this.resolveURL(importURL,htmlContent);if(resolvedURL&&!this.loadedCSS.has(resolvedURL)){cssPromises.push(this.loadSingleCSS(resolvedURL));}}}const results=await Promise.allSettled(cssPromises);const successful=results.filter(r=>r.status==='fulfilled').length;const failed=results.filter(r=>r.status==='rejected').length;return results;}clearLoadedCSS(){this.loadedCSS.clear();const canvas=this.editor.Canvas;const canvasDoc=canvas.getDocument();if(canvasDoc){const injectedStyles=canvasDoc.querySelectorAll('style[data-loaded-by="ExternalCSSLoader"]');injectedStyles.forEach(style=>style.remove());}}async loadCSSFromTemplate(htmlContent){try{this.clearLoadedCSS();const results=await this.loadExternalCSSFromHTML(htmlContent);await this.loadBaseCSSFiles();return results;}catch(error){console.error('❌ Error loading external CSS:',error);throw error;}}async loadBaseCSSFiles(){const baseCSSFiles=[ '/static/css/themes/themes.css','/static/css/universal-styles.css','/static/css/dental-components.css','/static/css/learning_map.css','/static/css/category-navigation.css' ];const promises=baseCSSFiles.map(url=>{const fullURL=`${this.baseURL}${url}`;if(!this.loadedCSS.has(fullURL)){return this.loadSingleCSS(fullURL);}return Promise.resolve({url: fullURL,success: true,source: 'already-loaded'});});const results=await Promise.allSettled(promises);const successful=results.filter(r=>r.status==='fulfilled'&&r.value.success).length;return results;}getLoadingStats(){return{loadedCount: this.loadedCSS.size,cachedCount: this.cssCache.size,projectFilesCount: this.projectCSSFiles.length,loadedFiles: Array.from(this.loadedCSS),cacheInfo: Array.from(this.cssCache.entries()).map(([url,info])=>({url,size: info.size,loadedAt: new Date(info.loadedAt).toLocaleTimeString()}))};}}if(typeof window!=='undefined'){window.ExternalCSSLoader=ExternalCSSLoader;}