/**
 * –ú–æ–±–∏–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è –∫–∞—Ä—Ç—ã –æ–±—É—á–µ–Ω–∏—è
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç drawer-–º–µ–Ω—é –∏ –º–æ–±–∏–ª—å–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
 */

class MobileNavigation {
    constructor() {
        this.isInitialized = false;
        this.isDrawerOpen = false;
        this.init();
    }

    init() {
        if (this.isInitialized) return;
        
        this.setupElements();
        this.setupEventListeners();
        this.setupTouchGestures();
        this.isInitialized = true;
        
        console.log('üì± –ú–æ–±–∏–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    setupElements() {
        this.navToggle = document.getElementById('mobileNavToggle');
        this.drawer = document.getElementById('mobileDrawer');
        this.overlay = document.getElementById('mobileDrawerOverlay');
        this.body = document.body;
        
        if (!this.navToggle || !this.drawer || !this.overlay) {
            console.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –º–æ–±–∏–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
            return;
        }
    }

    setupEventListeners() {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ drawer
        this.navToggle?.addEventListener('click', () => this.toggleDrawer());
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
        this.overlay?.addEventListener('click', () => this.closeDrawer());
        
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.isDrawerOpen) {
                this.closeDrawer();
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º –≤ drawer
        this.drawer?.addEventListener('click', (e) => {
            const subjectItem = e.target.closest('.subject-item');
            if (subjectItem) {
                const subjectId = subjectItem.dataset.subject;
                if (subjectId) {
                    this.navigateToSubject(subjectId);
                    this.closeDrawer();
                }
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ –ø—É—Ç—è–º –æ–±—É—á–µ–Ω–∏—è
        this.drawer?.addEventListener('click', (e) => {
            const pathButton = e.target.closest('.learning-path-button');
            if (pathButton) {
                this.togglePathExpansion(pathButton);
            }
        });
    }

    setupTouchGestures() {
        let startX = 0;
        let startY = 0;
        let isDragging = false;

        // Swipe –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è drawer
        document.addEventListener('touchstart', (e) => {
            if (e.touches.length === 1) {
                startX = e.touches[0].clientX;
                startY = e.touches[0].clientY;
                isDragging = false;
            }
        });

        document.addEventListener('touchmove', (e) => {
            if (e.touches.length === 1 && !this.isDrawerOpen) {
                const currentX = e.touches[0].clientX;
                const currentY = e.touches[0].clientY;
                const deltaX = currentX - startX;
                const deltaY = currentY - startY;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π swipe
                if (Math.abs(deltaX) > Math.abs(deltaY) && deltaX > 50) {
                    isDragging = true;
                }
            }
        });

        document.addEventListener('touchend', (e) => {
            if (isDragging && !this.isDrawerOpen) {
                this.openDrawer();
            }
            isDragging = false;
        });

        // Swipe –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è drawer
        this.drawer?.addEventListener('touchstart', (e) => {
            if (e.touches.length === 1) {
                startX = e.touches[0].clientX;
                startY = e.touches[0].clientY;
                isDragging = false;
            }
        });

        this.drawer?.addEventListener('touchmove', (e) => {
            if (e.touches.length === 1 && this.isDrawerOpen) {
                const currentX = e.touches[0].clientX;
                const currentY = e.touches[0].clientY;
                const deltaX = currentX - startX;
                const deltaY = currentY - startY;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π swipe –≤–ª–µ–≤–æ
                if (Math.abs(deltaX) > Math.abs(deltaY) && deltaX < -50) {
                    isDragging = true;
                }
            }
        });

        this.drawer?.addEventListener('touchend', (e) => {
            if (isDragging && this.isDrawerOpen) {
                this.closeDrawer();
            }
            isDragging = false;
        });
    }

    toggleDrawer() {
        if (this.isDrawerOpen) {
            this.closeDrawer();
        } else {
            this.openDrawer();
        }
    }

    openDrawer() {
        if (!this.drawer || !this.overlay || !this.navToggle) return;

        this.drawer.classList.add('active');
        this.overlay.classList.add('active');
        this.navToggle.classList.add('active');
        this.body.style.overflow = 'hidden';
        this.isDrawerOpen = true;

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        this.drawer.style.transform = 'translateX(0)';
        
        console.log('üì± Drawer –æ—Ç–∫—Ä—ã—Ç');
    }

    closeDrawer() {
        if (!this.drawer || !this.overlay || !this.navToggle) return;

        this.drawer.classList.remove('active');
        this.overlay.classList.remove('active');
        this.navToggle.classList.remove('active');
        this.body.style.overflow = '';
        this.isDrawerOpen = false;

        // –ê–Ω–∏–º–∞—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è
        this.drawer.style.transform = 'translateX(-100%)';
        
        console.log('üì± Drawer –∑–∞–∫—Ä—ã—Ç');
    }

    togglePathExpansion(button) {
        const pathId = button.dataset.path;
        const subjectList = document.getElementById(`mobile-path-filter-list-${pathId}`);
        
        if (!subjectList) return;

        const isExpanded = subjectList.classList.contains('expanded');
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –¥—Ä—É–≥–∏–µ —Å–ø–∏—Å–∫–∏
        document.querySelectorAll('.subject-list').forEach(list => {
            list.classList.remove('expanded');
        });

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º/–∑–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
        if (!isExpanded) {
            subjectList.classList.add('expanded');
        }

        // –ê–Ω–∏–º–∞—Ü–∏—è chevron
        const chevron = button.querySelector('.chevron-icon');
        if (chevron) {
            chevron.style.transform = isExpanded ? 'rotate(0deg)' : 'rotate(90deg)';
        }
    }

    navigateToSubject(subjectId) {
        const currentLang = document.documentElement.lang || 'nl';
        const url = `/${currentLang}/learning-map/subject/${subjectId}`;
        
        console.log(`üì± –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥–º–µ—Ç—É ${subjectId}: ${url}`);
        window.location.href = url;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    updateProgress(stats) {
        const progressCircle = document.querySelector('.mobile-progress-circle .circle-progress');
        if (progressCircle && stats.total_progress !== undefined) {
            const circumference = 2 * Math.PI * 36; // r=36
            const progress = (stats.total_progress / 100) * circumference;
            progressCircle.style.strokeDasharray = `${progress} ${circumference}`;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        const progressText = document.querySelector('.mobile-progress-text');
        if (progressText && stats.total_progress !== undefined) {
            progressText.textContent = `${stats.total_progress}%`;
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    const isMobile = window.innerWidth <= 768;
    
    if (isMobile) {
        window.mobileNavigation = new MobileNavigation();
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
window.addEventListener('resize', () => {
    const isMobile = window.innerWidth <= 768;
    
    if (isMobile && !window.mobileNavigation) {
        window.mobileNavigation = new MobileNavigation();
    } else if (!isMobile && window.mobileNavigation) {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º drawer –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø
        window.mobileNavigation.closeDrawer();
        window.mobileNavigation = null;
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = MobileNavigation;
} 