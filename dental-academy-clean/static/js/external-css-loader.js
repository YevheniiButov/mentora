/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π ExternalCSSLoader - —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –ø–∞—Ä—Å–∏–Ω–≥–∞ URL
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç: 404 –æ—à–∏–±–∫–∏, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ url_for(), document.write –ø—Ä–æ–±–ª–µ–º—ã
 */

class ExternalCSSLoader {
    constructor(editor) {
        this.editor = editor;
        this.loadedCSS = new Set();
        this.cssCache = new Map();
        this.projectCSSFiles = [];
        this.baseURL = window.location.origin;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ CSS —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
        this.initProjectCSSFiles();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ CSS —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
     */
    async initProjectCSSFiles() {
        try {
            const response = await fetch('/api/content-editor/css-files');
            const data = await response.json();
            
            if (data.success && data.data?.css_files) {
                this.projectCSSFiles = data.data.css_files.map(file => ({
                    path: file.path,
                    url: `/static/${file.path}`,
                    name: file.name,
                    full_name: file.full_name,
                    category: file.category
                }));
                console.log('üìÅ Project CSS files loaded:', this.projectCSSFiles.length);
            } else {
                console.warn('‚ö†Ô∏è Could not load project CSS files, using defaults');
                this.setDefaultProjectCSS();
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Error loading project CSS files:', error);
            this.setDefaultProjectCSS();
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö CSS —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
     */
    setDefaultProjectCSS() {
        this.projectCSSFiles = [
            { path: 'css/themes/themes.css', url: '/static/css/themes/themes.css', name: 'themes' },
            { path: 'css/learning_map.css', url: '/static/css/learning_map.css', name: 'learning_map' },
            { path: 'css/universal-styles.css', url: '/static/css/universal-styles.css', name: 'universal-styles' },
            { path: 'css/dental-components.css', url: '/static/css/dental-components.css', name: 'dental-components' },
            { path: 'css/components/components.css', url: '/static/css/components/components.css', name: 'components' },
            { path: 'css/base/global.css', url: '/static/css/base/global.css', name: 'global' },
            { path: 'css/pages/learning_map.css', url: '/static/css/pages/learning_map.css', name: 'learning_map_page' },
            { path: 'css/category-navigation.css', url: '/static/css/category-navigation.css', name: 'category-navigation' }
        ];
    }

    /**
     * –ù–û–í–û–ï: –û—á–∏—Å—Ç–∫–∞ Jinja2 —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∏–∑ HTML –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º
     */
    cleanJinjaFromHTML(htmlContent) {
        return htmlContent
            // –ó–∞–º–µ–Ω—è–µ–º url_for –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ –ü–ï–†–ï–î –ø–∞—Ä—Å–∏–Ω–≥–æ–º DOM
            .replace(/\{\{\s*url_for\(\s*['"]static['"],?\s*filename\s*=\s*['"]([^'"]+)['"]\s*\)\s*\}\}/g, '/static/$1')
            .replace(/\{\{\s*url_for\(\s*['"]static['"],?\s*filename=['"]([^'"]+)['"]\s*\)\s*\}\}/g, '/static/$1')
            // –£–±–∏—Ä–∞–µ–º –¥—Ä—É–≥–∏–µ Jinja2 –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
            .replace(/\{\%\s*.*?\s*\%\}/g, '')
            .replace(/\{\{\s*[^}]*\s*\}\}/g, '')
            // –û—á–∏—â–∞–µ–º —É—Å–ª–æ–≤–Ω—ã–µ –±–ª–æ–∫–∏
            .replace(/\{\%\s*if\s+.*?\%\}[\s\S]*?\{\%\s*endif\s*\%\}/g, '')
            .replace(/\{\%\s*for\s+.*?\%\}[\s\S]*?\{\%\s*endfor\s*\%\}/g, '');
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ URL —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
     */
    resolveURL(href, originalHTML = '') {
        console.log('üîç Resolving URL:', href);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL —Å –æ—à–∏–±–∫–∞–º–∏
        if (href.includes('%7D') || href.includes('%7B')) {
            console.warn('‚ö†Ô∏è Detected encoded Jinja2 syntax, trying to fix:', href);
            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL –≤ –∏—Å—Ö–æ–¥–Ω–æ–º HTML
            const match = originalHTML.match(new RegExp(`url_for\\([^)]*['"]([^'"]*${href.split('.')[0]}[^'"]*)['"]`, 'i'));
            if (match) {
                const filename = match[1];
                return `${this.baseURL}/static/${filename}`;
            }
        }

        // –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø—É—Ç–∏
        if (href.startsWith('/static/')) {
            return `${this.baseURL}${href}`;
        }

        // –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ URL - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if (href.startsWith('http://') || href.startsWith('https://')) {
            return href;
        }

        // –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –æ—Ç –∫–æ—Ä–Ω—è
        if (href.startsWith('/')) {
            return `${this.baseURL}${href}`;
        }

        // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
        if (href.startsWith('./') || href.startsWith('../')) {
            return `${this.baseURL}/static/${href.replace(/^\.\//, '')}`;
        }

        // –ü—Ä–æ—Å—Ç—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ - –∏—â–µ–º –≤ –ø—Ä–æ–µ–∫—Ç–µ
        if (href.endsWith('.css')) {
            const projectFile = this.findProjectCSSFile(href);
            if (projectFile) {
                console.log('üìÅ Found in project files:', projectFile.url);
                return `${this.baseURL}${projectFile.url}`;
            }
            // Fallback - –ø—Ä–æ–±—É–µ–º static
            return `${this.baseURL}/static/css/${href}`;
        }

        console.warn('‚ö†Ô∏è Could not resolve URL:', href);
        return null;
    }

    /**
     * –£–õ–£–ß–®–ï–ù–û: –ü–æ–∏—Å–∫ CSS —Ñ–∞–π–ª–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ –ø–æ –∏–º–µ–Ω–∏
     */
    findProjectCSSFile(filename) {
        const baseName = filename.replace(/^.*\//, ''); // –£–±–∏—Ä–∞–µ–º –ø—É—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –∏–º—è
        const nameWithoutExt = baseName.replace('.css', '');
        
        // –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        let found = this.projectCSSFiles.find(file => 
            file.path.endsWith(filename) || 
            file.full_name === baseName ||
            file.name === nameWithoutExt
        );
        
        if (found) {
            console.log('üéØ Exact match found:', found);
            return found;
        }
        
        // –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        found = this.projectCSSFiles.find(file => 
            file.path.includes(nameWithoutExt) ||
            file.name.includes(nameWithoutExt)
        );
        
        if (found) {
            console.log('üìç Partial match found:', found);
            return found;
        }
        
        console.log('‚ùå No match found for:', filename);
        return null;
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ CSS —Ñ–∞–π–ª–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
     */
    async loadSingleCSS(url, linkElement = null) {
        console.log('üì• Loading CSS:', url);
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if (this.cssCache.has(url)) {
                const cached = this.cssCache.get(url);
                await this.injectCSSIntoCanvas(cached.content, url);
                this.loadedCSS.add(url);
                console.log('üíæ CSS loaded from cache:', url);
                return { url, success: true, source: 'cache' };
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º CSS
            const response = await fetch(url);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const cssContent = await response.text();
            
            if (!cssContent || cssContent.trim() === '') {
                throw new Error('Empty CSS content');
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –≤ CSS
            const processedCSS = this.processRelativeURLsInCSS(cssContent, url);
            
            // –ö—ç—à–∏—Ä—É–µ–º
            this.cssCache.set(url, {
                content: processedCSS,
                originalURL: url,
                loadedAt: Date.now(),
                size: cssContent.length
            });
            
            // –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º –≤ canvas
            await this.injectCSSIntoCanvas(processedCSS, url);
            this.loadedCSS.add(url);
            
            console.log('‚úÖ CSS loaded successfully:', url, `(${cssContent.length} bytes)`);
            return { url, success: true, source: 'network', size: cssContent.length };
            
        } catch (error) {
            console.error('‚ùå Failed to load CSS:', url, error.message);
            
            // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏
            const alternatives = this.getAlternativeURLs(url);
            for (const altURL of alternatives) {
                try {
                    console.log('üîÑ Trying alternative:', altURL);
                    const altResponse = await fetch(altURL);
                    if (altResponse.ok) {
                        const altCSS = await altResponse.text();
                        if (altCSS && altCSS.trim() !== '') {
                            const processedCSS = this.processRelativeURLsInCSS(altCSS, altURL);
                            await this.injectCSSIntoCanvas(processedCSS, altURL);
                            this.loadedCSS.add(url); // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL
                            this.loadedCSS.add(altURL); // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL
                            console.log('‚úÖ Alternative CSS loaded:', altURL);
                            return { url: altURL, success: true, source: 'alternative' };
                        }
                    }
                } catch (altError) {
                    console.warn('‚ö†Ô∏è Alternative also failed:', altURL, altError.message);
                }
            }
            
            return { url, success: false, error: error.message };
        }
    }

    /**
     * –£–õ–£–ß–®–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö URL –¥–ª—è CSS —Ñ–∞–π–ª–∞
     */
    getAlternativeURLs(originalURL) {
        const alternatives = [];
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        const fileName = originalURL.split('/').pop().split('?')[0]; // –£–±–∏—Ä–∞–µ–º query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        
        // –ü—Ä–æ–±—É–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö static
        const staticPaths = [
            `/static/css/${fileName}`,
            `/static/css/themes/${fileName}`,
            `/static/css/components/${fileName}`,
            `/static/css/pages/${fileName}`,
            `/static/css/base/${fileName}`,
            `/static/styles/${fileName}`, // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞–ø–∫–∞
            `/static/${fileName}` // –ü—Ä—è–º–æ –≤ static
        ];
        
        staticPaths.forEach(path => {
            const fullURL = `${this.baseURL}${path}`;
            if (!originalURL.includes(path) && !alternatives.includes(fullURL)) {
                alternatives.push(fullURL);
            }
        });
        
        // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ –ø–æ –∏–º–µ–Ω–∏
        const projectFile = this.findProjectCSSFile(fileName);
        if (projectFile) {
            const projectURL = `${this.baseURL}${projectFile.url}`;
            if (!alternatives.includes(projectURL)) {
                alternatives.push(projectURL);
            }
        }
        
        console.log('üîÑ Alternative URLs for', fileName, ':', alternatives);
        return alternatives;
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∂–µ–∫—Ü–∏—è CSS –≤ canvas –±–µ–∑ document.write
     */
    async injectCSSIntoCanvas(cssContent, sourceURL) {
        const canvas = this.editor.Canvas;
        const canvasDoc = canvas.getDocument();
        
        if (!canvasDoc) {
            console.warn('‚ö†Ô∏è Canvas document not ready');
            // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ canvas
            await new Promise(resolve => {
                const checkCanvas = setInterval(() => {
                    if (canvas.getDocument()) {
                        clearInterval(checkCanvas);
                        resolve();
                    }
                }, 100);
            });
            return this.injectCSSIntoCanvas(cssContent, sourceURL);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç CSS
        const existingStyle = canvasDoc.querySelector(`style[data-source="${sourceURL}"]`);
        if (existingStyle) {
            console.log('üîÑ Updating existing CSS:', sourceURL);
            existingStyle.textContent = cssContent;
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º style —ç–ª–µ–º–µ–Ω—Ç –ë–ï–ó document.write
        const styleElement = canvasDoc.createElement('style');
        styleElement.setAttribute('data-source', sourceURL);
        styleElement.setAttribute('data-loaded-by', 'ExternalCSSLoader');
        styleElement.setAttribute('type', 'text/css');
        styleElement.textContent = cssContent;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ head
        const head = canvasDoc.head || canvasDoc.getElementsByTagName('head')[0];
        if (head) {
            head.appendChild(styleElement);
            console.log('üé® CSS injected into canvas:', sourceURL);
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç head - —Å–æ–∑–¥–∞–µ–º
            const newHead = canvasDoc.createElement('head');
            newHead.appendChild(styleElement);
            const htmlElement = canvasDoc.documentElement || canvasDoc.getElementsByTagName('html')[0];
            if (htmlElement) {
                htmlElement.insertBefore(newHead, htmlElement.firstChild);
                console.log('üé® CSS injected into new head:', sourceURL);
            } else {
                console.warn('‚ö†Ô∏è Could not inject CSS - no HTML structure');
            }
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö URL –≤ CSS —Ñ–∞–π–ª–µ
     */
    processRelativeURLsInCSS(cssContent, cssURL) {
        const cssBaseURL = cssURL.substring(0, cssURL.lastIndexOf('/'));
        
        // –ó–∞–º–µ–Ω—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –≤ url() –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
        return cssContent.replace(/url\(\s*['"]?([^'")]+)['"]?\s*\)/g, (match, url) => {
            if (url.startsWith('http://') || url.startsWith('https://') || url.startsWith('/')) {
                return match; // –£–∂–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π
            }
            
            if (url.startsWith('data:')) {
                return match; // Data URL
            }
            
            // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å - –¥–µ–ª–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–º
            const absoluteURL = `${cssBaseURL}/${url}`;
            return `url('${absoluteURL}')`;
        });
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ @import –∏–∑ CSS
     */
    extractImportsFromCSS(cssContent) {
        const imports = [];
        const importRegex = /@import\s+(?:url\()?['"]?([^'")]+)['"]?\)?/g;
        
        let match;
        while ((match = importRegex.exec(cssContent)) !== null) {
            imports.push(match[1]);
        }
        
        return imports;
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –≤–Ω–µ—à–Ω–∏—Ö CSS —Ñ–∞–π–ª–æ–≤ –∏–∑ HTML
     */
    async loadExternalCSSFromHTML(htmlContent) {
        console.log('üîß Loading external CSS from HTML...');
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º Jinja2 —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏–∑ HTML
        const cleanedHTML = this.cleanJinjaFromHTML(htmlContent);
        
        const parser = new DOMParser();
        const doc = parser.parseFromString(cleanedHTML, 'text/html');
        
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ link —Ç–µ–≥–∏ —Å CSS
        const linkTags = doc.querySelectorAll('link[rel="stylesheet"], link[href*=".css"]');
        const cssPromises = [];
        
        console.log(`üîç Found ${linkTags.length} CSS link tags`);
        
        for (const link of linkTags) {
            const href = link.getAttribute('href');
            if (href) {
                console.log('üîó Processing CSS link:', href);
                
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ URL
                const resolvedURL = this.resolveURL(href, htmlContent);
                if (resolvedURL && !this.loadedCSS.has(resolvedURL)) {
                    console.log('‚úÖ Resolved URL:', resolvedURL);
                    cssPromises.push(this.loadSingleCSS(resolvedURL, link));
                } else {
                    console.warn('‚ö†Ô∏è Could not resolve URL:', href);
                }
            }
        }

        // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º style —Ç–µ–≥–∏ —Å @import
        const styleTags = doc.querySelectorAll('style');
        for (const style of styleTags) {
            const imports = this.extractImportsFromCSS(style.textContent);
            for (const importURL of imports) {
                const resolvedURL = this.resolveURL(importURL, htmlContent);
                if (resolvedURL && !this.loadedCSS.has(resolvedURL)) {
                    cssPromises.push(this.loadSingleCSS(resolvedURL));
                }
            }
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ CSS —Ñ–∞–π–ª—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const results = await Promise.allSettled(cssPromises);
        
        const successful = results.filter(r => r.status === 'fulfilled').length;
        const failed = results.filter(r => r.status === 'rejected').length;
        
        console.log(`üìä CSS loading results: ${successful} —É—Å–ø–µ—à–Ω–æ, ${failed} –æ—à–∏–±–æ–∫`);
        
        return results;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö CSS
     */
    clearLoadedCSS() {
        this.loadedCSS.clear();
        
        const canvas = this.editor.Canvas;
        const canvasDoc = canvas.getDocument();
        
        if (canvasDoc) {
            const injectedStyles = canvasDoc.querySelectorAll('style[data-loaded-by="ExternalCSSLoader"]');
            injectedStyles.forEach(style => style.remove());
            console.log('üßπ Cleared', injectedStyles.length, 'injected CSS styles');
        }
        
        console.log('üßπ Cleared all loaded CSS cache');
    }

    /**
     * –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ CSS –∏–∑ HTML
     */
    async loadCSSFromTemplate(htmlContent) {
        console.log('üé® Starting external CSS loading...');
        
        try {
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ CSS
            this.clearLoadedCSS();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º CSS –∏–∑ HTML
            const results = await this.loadExternalCSSFromHTML(htmlContent);
            
            // –¢–∞–∫–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ CSS —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
            await this.loadBaseCSSFiles();
            
            console.log('‚úÖ External CSS loading completed');
            return results;
            
        } catch (error) {
            console.error('‚ùå Error loading external CSS:', error);
            throw error;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤—ã—Ö CSS —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
     */
    async loadBaseCSSFiles() {
        console.log('üì¶ Loading base project CSS files...');
        
        const baseCSSFiles = [
            '/static/css/themes/themes.css',
            '/static/css/universal-styles.css',
            '/static/css/dental-components.css',
            '/static/css/learning_map.css',
            '/static/css/category-navigation.css'
        ];
        
        const promises = baseCSSFiles.map(url => {
            const fullURL = `${this.baseURL}${url}`;
            if (!this.loadedCSS.has(fullURL)) {
                return this.loadSingleCSS(fullURL);
            }
            return Promise.resolve({ url: fullURL, success: true, source: 'already-loaded' });
        });
        
        const results = await Promise.allSettled(promises);
        const successful = results.filter(r => r.status === 'fulfilled' && r.value.success).length;
        
        console.log('üì¶ Base CSS files loading completed:', successful, 'loaded');
        
        return results;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö CSS
     */
    getLoadingStats() {
        return {
            loadedCount: this.loadedCSS.size,
            cachedCount: this.cssCache.size,
            projectFilesCount: this.projectCSSFiles.length,
            loadedFiles: Array.from(this.loadedCSS),
            cacheInfo: Array.from(this.cssCache.entries()).map(([url, info]) => ({
                url,
                size: info.size,
                loadedAt: new Date(info.loadedAt).toLocaleTimeString()
            }))
        };
    }
}

// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å window
if (typeof window !== 'undefined') {
    window.ExternalCSSLoader = ExternalCSSLoader;
}

console.log('‚úÖ ExternalCSSLoader v2.0 loaded (Fixed URL parsing)'); 