const CACHE_NAME='dental-academy-v1.2.0';const OFFLINE_URL='/offline';const STATIC_CACHE_URLS=[ '/','/offline','/static/css/mobile-app.css','/static/css/modern-theme.css','/static/css/theme-fixes.css','/static/js/mobile-app.js','/static/js/theme-system.js','/static/images/logo.png','/static/images/favicon.png','/static/favicon.png','/manifest.json','https: 'https: ];const API_CACHE_URLS=[ '/api/user-stats','/api/learning-paths','/api/user-progress' ];const CACHE_PATTERNS={images:/\.(png|jpg|jpeg|svg|gif|webp)$/i,fonts:/\.(woff|woff2|ttf|eot)$/i,api:/^\/api\ lessons:/^\/\w+\/lesson\ modules:/^\/\w+\/module\};const CACHE_STRATEGIES={CACHE_FIRST: 'cache-first',NETWORK_FIRST: 'network-first',NETWORK_ONLY: 'network-only',CACHE_ONLY: 'cache-only',STALE_WHILE_REVALIDATE: 'stale-while-revalidate'};self.addEventListener('install',event=>{console.log('üì¶ Service Worker installing...');event.waitUntil(caches.open(CACHE_NAME).then(cache=>{console.log('üìÅ Caching static assets...');return Promise.allSettled(STATIC_CACHE_URLS.map(url=>cache.add(url).catch(error=>{console.warn(`‚ö†Ô∏è Failed to cache ${url}:`,error.message);return null;})));}).then(()=>{console.log('‚úÖ Static assets cached successfully');return self.skipWaiting();}).catch(error=>{console.error('‚ùå Failed to cache static assets:',error);}));});self.addEventListener('activate',event=>{console.log('üöÄ Service Worker activating...');event.waitUntil(Promise.all([ caches.keys().then(cacheNames=>{return Promise.all(cacheNames.map(cacheName=>{if(cacheName!==CACHE_NAME){console.log('üóëÔ∏è Deleting old cache:',cacheName);return caches.delete(cacheName);}}));}),self.clients.claim()]).then(()=>{console.log('‚úÖ Service Worker activated and ready');}));});self.addEventListener('fetch',event=>{const{request}=event;const url=new URL(request.url);if(request.method!=='GET'){return;}if(!url.protocol.startsWith('http')){return;}if(url.pathname.startsWith('/admin')||url.pathname.startsWith('/auth/logout')){return;}const strategy=getCacheStrategy(request);event.respondWith(executeStrategy(request,strategy).catch(error=>{console.error('üî• Fetch failed:',error);return handleFetchError(request,error);}));});function getCacheStrategy(request){const url=new URL(request.url);const pathname=url.pathname;if(CACHE_PATTERNS.api.test(pathname)){return CACHE_STRATEGIES.NETWORK_FIRST;}if(CACHE_PATTERNS.images.test(pathname)){return CACHE_STRATEGIES.CACHE_FIRST;}if(CACHE_PATTERNS.fonts.test(pathname)){return CACHE_STRATEGIES.CACHE_FIRST;}if(CACHE_PATTERNS.lessons.test(pathname)||CACHE_PATTERNS.modules.test(pathname)){return CACHE_STRATEGIES.STALE_WHILE_REVALIDATE;}if(url.origin!==self.location.origin){return CACHE_STRATEGIES.CACHE_FIRST;}return CACHE_STRATEGIES.NETWORK_FIRST;}async function executeStrategy(request,strategy){switch(strategy){case CACHE_STRATEGIES.CACHE_FIRST: return cacheFirst(request);case CACHE_STRATEGIES.NETWORK_FIRST: return networkFirst(request);case CACHE_STRATEGIES.STALE_WHILE_REVALIDATE: return staleWhileRevalidate(request);case CACHE_STRATEGIES.CACHE_ONLY: return cacheOnly(request);case CACHE_STRATEGIES.NETWORK_ONLY: return networkOnly(request);default: return networkFirst(request);}}async function cacheFirst(request){const cache=await caches.open(CACHE_NAME);const cachedResponse=await cache.match(request);if(cachedResponse){return cachedResponse;}try{const networkResponse=await fetch(request);if(networkResponse.ok){cache.put(request,networkResponse.clone());}return networkResponse;}catch(error){throw error;}}async function networkFirst(request){const cache=await caches.open(CACHE_NAME);try{const networkResponse=await fetch(request);if(networkResponse.ok){cache.put(request,networkResponse.clone());}return networkResponse;}catch(error){const cachedResponse=await cache.match(request);if(cachedResponse){return cachedResponse;}throw error;}}async function staleWhileRevalidate(request){const cache=await caches.open(CACHE_NAME);const cachedResponse=await cache.match(request);const networkResponsePromise=fetch(request).then(response=>{if(response.ok){cache.put(request,response.clone());}return response;}).catch(()=>{});if(cachedResponse){return cachedResponse;}return networkResponsePromise;}async function cacheOnly(request){const cache=await caches.open(CACHE_NAME);const cachedResponse=await cache.match(request);if(cachedResponse){return cachedResponse;}throw new Error('No cached response available');}async function networkOnly(request){return fetch(request);}async function handleFetchError(request,error){const url=new URL(request.url);if(request.mode==='navigate'){const cache=await caches.open(CACHE_NAME);const offlineResponse=await cache.match(OFFLINE_URL);if(offlineResponse){return offlineResponse;}return new Response(`<!DOCTYPE html><html lang="ru"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width,initial-scale=1.0"><title>Offline-Mentora</title><style>*{box-sizing: border-box;}body{font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,sans-serif;display: flex;flex-direction: column;align-items: center;justify-content: center;min-height: 100vh;margin: 0;background: linear-gradient(135deg,#f8fafc 0%,#e2e8f0 100%);color: #374151;text-align: center;padding: 20px;}.offline-container{background: white;padding: 3rem 2rem;border-radius: 16px;box-shadow: 0 10px 25px rgba(0,0,0,0.1);max-width: 400px;width: 100%;}.offline-icon{font-size: 64px;margin-bottom: 20px;opacity: 0.8;}.offline-title{font-size: 24px;font-weight: 700;margin-bottom: 12px;color: #111827;}.offline-message{font-size: 16px;line-height: 1.6;opacity: 0.8;margin-bottom: 24px;}.retry-btn{padding: 12px 24px;background: linear-gradient(135deg,#3ECDC1,#2BB6AC);color: white;border: none;border-radius: 12px;font-size: 16px;font-weight: 600;cursor: pointer;transition: all 0.3s ease;text-decoration: none;display: inline-block;}.retry-btn:hover{transform: translateY(-2px);box-shadow: 0 8px 20px rgba(62,205,193,0.3);}.status{margin-top: 20px;padding: 12px;background: #f3f4f6;border-radius: 8px;font-size: 14px;}.status-dot{display: inline-block;width: 8px;height: 8px;border-radius: 50%;background: #ef4444;margin-right: 8px;}.status-dot.online{background: #10b981;}@media(max-width: 480px){.offline-container{padding: 2rem 1.5rem;}.offline-title{font-size: 20px;}}</style></head><body><div class="offline-container"><div class="offline-icon">üì±</div><h1 class="offline-title">–í—ã –æ—Ñ–ª–∞–π–Ω</h1><p class="offline-message">–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.</p><button class="retry-btn" onclick="window.location.reload()">üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button><div class="status"><span class="status-dot" id="status-dot"></span><span id="status-text">–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...</span></div></div><script>function updateStatus(){const dot=document.getElementById('status-dot');const text=document.getElementById('status-text');if(navigator.onLine){dot.classList.add('online');text.textContent='–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!–ù–∞–∂–º–∏—Ç–µ "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞".';}else{dot.classList.remove('online');text.textContent='–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';}}window.addEventListener('online',updateStatus);window.addEventListener('offline',updateStatus);updateStatus();window.addEventListener('online',()=>{setTimeout(()=>window.location.reload(),1000);});</script></body></html>`,{status: 200,headers:{'Content-Type': 'text/html;charset=utf-8'}});}if(CACHE_PATTERNS.api.test(url.pathname)){return new Response(JSON.stringify({error: 'Network unavailable',offline: true,message: 'This feature requires an internet connection'}),{status: 503,headers:{'Content-Type': 'application/json'}});}throw error;}self.addEventListener('message',event=>{console.log('üí¨ Message received:',event.data);if(event.data&&event.data.type==='SKIP_WAITING'){self.skipWaiting();}if(event.data&&event.data.type==='GET_VERSION'){event.ports[0].postMessage({type: 'VERSION',version: CACHE_NAME});}if(event.data&&event.data.type==='CLEAR_CACHE'){caches.delete(CACHE_NAME).then(()=>{event.ports[0].postMessage({type: 'CACHE_CLEARED'});});}});self.addEventListener('push',event=>{console.log('üì© Push notification received');let data={};if(event.data){try{data=event.data.json();}catch(error){data={title: 'Mentora',body: event.data.text()};}}const options={title: data.title||'Mentora',body: data.body||'–£ –≤–∞—Å –µ—Å—Ç—å –Ω–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è!',icon: '/static/images/favicon.png',badge: '/static/images/favicon.png',image: data.image,data: data.url ?{url: data.url}: undefined,actions: [{action: 'open',title: '–û—Ç–∫—Ä—ã—Ç—å',icon: '/static/images/favicon.png'},{action: 'close',title: '–ó–∞–∫—Ä—ã—Ç—å'}],requireInteraction: false,silent: false,vibrate: [100,50,100]};event.waitUntil(self.registration.showNotification(options.title,options));});self.addEventListener('notificationclick',event=>{console.log('üîî Notification clicked');event.notification.close();if(event.action==='close'){return;}const url=event.notification.data?.url||'/';event.waitUntil(self.clients.matchAll({type: 'window'}).then(clients=>{for(const client of clients){if(client.url===url&&'focus' in client){return client.focus();}}if(self.clients.openWindow){return self.clients.openWindow(url);}}));});self.addEventListener('sync',event=>{console.log('üîÑ Background sync triggered:',event.tag);if(event.tag==='lesson-progress-sync'){event.waitUntil(syncLessonProgress());}if(event.tag==='offline-actions-sync'){event.waitUntil(syncOfflineActions());}});async function syncLessonProgress(){try{const offlineProgress=JSON.parse(localStorage.getItem('offline-lesson-progress')||'[]');if(offlineProgress.length===0){return;}for(const progress of offlineProgress){try{await fetch('/api/lesson-progress',{method: 'POST',headers:{'Content-Type': 'application/json'},body: JSON.stringify(progress)});}catch(error){console.error('Failed to sync progress item:',error);}}localStorage.removeItem('offline-lesson-progress');console.log('‚úÖ Lesson progress synced successfully');}catch(error){console.error('‚ùå Failed to sync lesson progress:',error);}}async function syncOfflineActions(){try{const offlineActions=JSON.parse(localStorage.getItem('offline-actions')||'[]');if(offlineActions.length===0){return;}for(const action of offlineActions){try{await fetch(action.url,{method: action.method,headers: action.headers,body: action.body});}catch(error){console.error('Failed to sync action:',error);}}localStorage.removeItem('offline-actions');console.log('‚úÖ Offline actions synced successfully');}catch(error){console.error('‚ùå Failed to sync offline actions:',error);}}self.addEventListener('periodicsync',event=>{console.log('‚è∞ Periodic sync triggered:',event.tag);if(event.tag==='content-sync'){event.waitUntil(syncContent());}});async function syncContent(){try{const response=await fetch('/api/content-updates');const updates=await response.json();if(updates.hasUpdates){const cache=await caches.open(CACHE_NAME);for(const url of updates.newContent){try{const contentResponse=await fetch(url);if(contentResponse.ok){await cache.put(url,contentResponse);}}catch(error){console.error('Failed to cache content:',url,error);}}console.log('‚úÖ Content synced successfully');}}catch(error){console.error('‚ùå Failed to sync content:',error);}}async function cleanupCache(){const cache=await caches.open(CACHE_NAME);const requests=await cache.keys();const now=Date.now();const maxAge=7*24*60*60*1000;for(const request of requests){const response=await cache.match(request);const dateHeader=response.headers.get('date');if(dateHeader){const responseDate=new Date(dateHeader).getTime();if(now-responseDate>maxAge){await cache.delete(request);}}}}async function logCacheStats(){try{const cache=await caches.open(CACHE_NAME);const requests=await cache.keys();console.log(`üìä Cache stats: ${requests.length}items cached`);const stats={html: 0,css: 0,js: 0,images: 0,api: 0,other: 0};requests.forEach(request=>{const url=request.url;if(url.includes('.html')||url.endsWith('/'))stats.html++;else if(url.includes('.css'))stats.css++;else if(url.includes('.js'))stats.js++;else if(CACHE_PATTERNS.images.test(url))stats.images++;else if(CACHE_PATTERNS.api.test(url))stats.api++;else stats.other++;});console.log('üìà Cache breakdown:',stats);}catch(error){console.error('‚ùå Failed to get cache stats:',error);}}setInterval(()=>{cleanupCache();logCacheStats();},60*60*1000);console.log('üéØ Service Worker loaded successfully');console.log(`üì¶ Cache version: ${CACHE_NAME}`);console.log('üîÑ Ready for offline functionality');