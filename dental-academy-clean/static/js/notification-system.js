/**
 * Browser Notification System for Learning Planner
 * Handles browser notifications for study sessions and reminders
 */

class BrowserNotificationSystem {
    constructor() {
        this.permission = 'default';
        this.isSupported = 'Notification' in window;
        this.init();
    }
    
    async init() {
        if (!this.isSupported) {
            console.log('Browser notifications not supported');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        this.permission = Notification.permission;
        
        // –ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—Ä–æ—à–µ–Ω–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º
        if (this.permission === 'default') {
            await this.requestPermission();
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        this.setupNotifications();
    }
    
    async requestPermission() {
        try {
            this.permission = await Notification.requestPermission();
            console.log('Notification permission:', this.permission);
            
            if (this.permission === 'granted') {
                this.showWelcomeNotification();
            }
            
            return this.permission;
        } catch (error) {
            console.error('Error requesting notification permission:', error);
            return 'denied';
        }
    }
    
    setupNotifications() {
        if (this.permission !== 'granted') {
            return;
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        this.setupSessionReminders();
        this.setupProgressNotifications();
        this.setupExamReminders();
    }
    
    setupSessionReminders() {
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–Ω—è—Ç–∏—è—Ö
        const sessionElements = document.querySelectorAll('[data-session-time]');
        
        sessionElements.forEach(element => {
            const sessionTime = element.dataset.sessionTime;
            const sessionTitle = element.dataset.sessionTitle;
            
            if (sessionTime) {
                this.scheduleSessionReminder(sessionTime, sessionTitle);
            }
        });
    }
    
    setupProgressNotifications() {
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        const progressThresholds = [25, 50, 75, 90];
        
        progressThresholds.forEach(threshold => {
            this.checkProgressThreshold(threshold);
        });
    }
    
    setupExamReminders() {
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —ç–∫–∑–∞–º–µ–Ω–µ
        const examDateElement = document.getElementById('exam-date');
        if (examDateElement && examDateElement.value) {
            const examDate = new Date(examDateElement.value);
            this.scheduleExamReminders(examDate);
        }
    }
    
    scheduleSessionReminder(sessionTime, sessionTitle) {
        const sessionDateTime = new Date(sessionTime);
        const now = new Date();
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ —á–∞—Å –¥–æ –∑–∞–Ω—è—Ç–∏—è
        const oneHourBefore = new Date(sessionDateTime.getTime() - 60 * 60 * 1000);
        
        if (oneHourBefore > now) {
            setTimeout(() => {
                this.showSessionReminder(sessionTitle, '1 —á–∞—Å');
            }, oneHourBefore.getTime() - now.getTime());
        }
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ –∑–∞–Ω—è—Ç–∏—è
        const fifteenMinutesBefore = new Date(sessionDateTime.getTime() - 15 * 60 * 1000);
        
        if (fifteenMinutesBefore > now) {
            setTimeout(() => {
                this.showSessionReminder(sessionTitle, '15 –º–∏–Ω—É—Ç');
            }, fifteenMinutesBefore.getTime() - now.getTime());
        }
    }
    
    scheduleExamReminders(examDate) {
        const now = new Date();
        const daysToExam = Math.ceil((examDate - now) / (1000 * 60 * 60 * 24));
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 7, 3, 1 –¥–µ–Ω—å –¥–æ —ç–∫–∑–∞–º–µ–Ω–∞
        const reminderDays = [7, 3, 1];
        
        reminderDays.forEach(days => {
            if (daysToExam >= days) {
                const reminderTime = new Date(examDate.getTime() - days * 24 * 60 * 60 * 1000);
                
                setTimeout(() => {
                    this.showExamReminder(days);
                }, reminderTime.getTime() - now.getTime());
            }
        });
    }
    
    checkProgressThreshold(threshold) {
        const progressElement = document.querySelector('.overall-progress');
        if (!progressElement) return;
        
        const currentProgress = parseFloat(progressElement.textContent);
        
        if (currentProgress >= threshold) {
            this.showProgressNotification(threshold);
        }
    }
    
    showSessionReminder(sessionTitle, timeLeft) {
        const notification = new Notification('ü¶∑ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–Ω—è—Ç–∏–∏', {
            body: `–ß–µ—Ä–µ–∑ ${timeLeft} –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è: ${sessionTitle}`,
            icon: '/static/images/logo.png',
            badge: '/static/images/logo.png',
            tag: 'session-reminder',
            requireInteraction: false,
            actions: [
                {
                    action: 'start',
                    title: '–ù–∞—á–∞—Ç—å —Å–µ–π—á–∞—Å'
                },
                {
                    action: 'snooze',
                    title: '–ù–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑ 5 –º–∏–Ω'
                }
            ]
        });
        
        notification.onclick = () => {
            window.focus();
            notification.close();
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–Ω—è—Ç–∏—é
            this.navigateToSession();
        };
        
        notification.onaction = (event) => {
            if (event.action === 'start') {
                this.navigateToSession();
            } else if (event.action === 'snooze') {
                setTimeout(() => {
                    this.showSessionReminder(sessionTitle, '5 –º–∏–Ω—É—Ç');
                }, 5 * 60 * 1000);
            }
            notification.close();
        };
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            notification.close();
        }, 10000);
    }
    
    showProgressNotification(threshold) {
        const notification = new Notification('üéâ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!', {
            body: `–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ ${threshold}% –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –æ–±—É—á–µ–Ω–∏–∏!`,
            icon: '/static/images/medal.svg',
            badge: '/static/images/logo.png',
            tag: 'progress-achievement',
            requireInteraction: false
        });
        
        notification.onclick = () => {
            window.focus();
            notification.close();
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–∞—à–±–æ—Ä–¥—É
            window.location.href = '/dashboard';
        };
        
        setTimeout(() => {
            notification.close();
        }, 8000);
    }
    
    showExamReminder(daysLeft) {
        const notification = new Notification('‚ö†Ô∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —ç–∫–∑–∞–º–µ–Ω–µ', {
            body: `–î–æ BIG —ç–∫–∑–∞–º–µ–Ω–∞ –æ—Å—Ç–∞–ª–æ—Å—å ${daysLeft} ${this.pluralize(daysLeft, '–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π')}`,
            icon: '/static/images/logo.png',
            badge: '/static/images/logo.png',
            tag: 'exam-reminder',
            requireInteraction: true,
            actions: [
                {
                    action: 'study',
                    title: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É'
                },
                {
                    action: 'dismiss',
                    title: '–ó–∞–∫—Ä—ã—Ç—å'
                }
            ]
        });
        
        notification.onclick = () => {
            window.focus();
            notification.close();
        };
        
        notification.onaction = (event) => {
            if (event.action === 'study') {
                window.location.href = '/dashboard/create-learning-plan';
            }
            notification.close();
        };
    }
    
    showWelcomeNotification() {
        const notification = new Notification('ü¶∑ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Mentora Academy!', {
            body: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ.',
            icon: '/static/images/logo.png',
            badge: '/static/images/logo.png',
            tag: 'welcome',
            requireInteraction: false
        });
        
        setTimeout(() => {
            notification.close();
        }, 5000);
    }
    
    showCustomNotification(title, body, options = {}) {
        if (this.permission !== 'granted') {
            return;
        }
        
        const defaultOptions = {
            icon: '/static/images/logo.png',
            badge: '/static/images/logo.png',
            requireInteraction: false
        };
        
        const notification = new Notification(title, { ...defaultOptions, ...options });
        
        notification.onclick = () => {
            window.focus();
            notification.close();
        };
        
        if (!options.requireInteraction) {
            setTimeout(() => {
                notification.close();
            }, options.duration || 5000);
        }
        
        return notification;
    }
    
    navigateToSession() {
        // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–µ–π
        const activeSession = document.querySelector('.session-item.active');
        if (activeSession) {
            const sessionUrl = activeSession.dataset.sessionUrl;
            if (sessionUrl) {
                window.location.href = sessionUrl;
            }
        } else {
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É
            window.location.href = '/dashboard/create-learning-plan';
        }
    }
    
    pluralize(number, one, two, five) {
        const n = Math.abs(number);
        const n10 = n % 10;
        const n100 = n % 100;
        
        if (n100 >= 11 && n100 <= 19) {
            return five;
        }
        
        if (n10 === 1) {
            return one;
        }
        
        if (n10 >= 2 && n10 <= 4) {
            return two;
        }
        
        return five;
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º
    notifySessionCreated(sessionData) {
        this.showCustomNotification(
            'üìö –ù–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',
            `${sessionData.title} –Ω–∞ ${sessionData.date}`,
            {
                tag: 'session-created',
                actions: [
                    {
                        action: 'view',
                        title: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å'
                    }
                ]
            }
        );
    }
    
    notifyPlanUpdated(planData) {
        this.showCustomNotification(
            'üìä –ü–ª–∞–Ω –æ–±–Ω–æ–≤–ª–µ–Ω',
            `–í–∞—à –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è –±—ã–ª –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω. –ù–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ${planData.progress}%`,
            {
                tag: 'plan-updated'
            }
        );
    }
    
    notifyAchievementUnlocked(achievement) {
        this.showCustomNotification(
            'üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!',
            achievement.title,
            {
                icon: '/static/images/medal.svg',
                tag: 'achievement',
                requireInteraction: true
            }
        );
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    testNotification() {
        this.showCustomNotification(
            'üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
            '–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!',
            {
                tag: 'test',
                requireInteraction: true
            }
        );
    }
    
    testSessionReminder() {
        this.showSessionReminder('–¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –ø–æ —ç–Ω–¥–æ–¥–æ–Ω—Ç–∏–∏', '5 –º–∏–Ω—É—Ç');
    }
    
    testProgressNotification() {
        this.showProgressNotification(50);
    }
    
    testExamReminder() {
        this.showExamReminder(7);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
let notificationSystem;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    notificationSystem = new BrowserNotificationSystem();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
        addTestButtons();
    }
});

function addTestButtons() {
    const testContainer = document.createElement('div');
    testContainer.style.cssText = `
        position: fixed;
        bottom: 20px;
        right: 20px;
        background: rgba(0,0,0,0.8);
        padding: 10px;
        border-radius: 8px;
        z-index: 1000;
        display: flex;
        flex-direction: column;
        gap: 5px;
    `;
    
    testContainer.innerHTML = `
        <button onclick="notificationSystem.testNotification()" style="padding: 5px 10px; font-size: 12px;">–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</button>
        <button onclick="notificationSystem.testSessionReminder()" style="padding: 5px 10px; font-size: 12px;">–¢–µ—Å—Ç –∑–∞–Ω—è—Ç–∏—è</button>
        <button onclick="notificationSystem.testProgressNotification()" style="padding: 5px 10px; font-size: 12px;">–¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞</button>
        <button onclick="notificationSystem.testExamReminder()" style="padding: 5px 10px; font-size: 12px;">–¢–µ—Å—Ç —ç–∫–∑–∞–º–µ–Ω–∞</button>
    `;
    
    document.body.appendChild(testContainer);
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.NotificationSystem = BrowserNotificationSystem; 