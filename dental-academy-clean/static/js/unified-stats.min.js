class UnifiedStatsManager{constructor(){this.currentLang=document.documentElement.lang||'ru';this.updateInterval=null;this.isUpdating=false;this.init();}init(){this.setupEventListeners();this.setupAutoRefresh();}setupEventListeners(){document.addEventListener('lessonCompleted',(e)=>{this.updateStats();});document.addEventListener('progressSaved',(e)=>{this.updateStats();});document.addEventListener('click',(e)=>{if(e.target.matches('[data-action="complete-lesson"],.complete-lesson-btn,.mark-completed')){setTimeout(()=>this.updateStats(),1000);}});this.interceptAjaxRequests();}interceptAjaxRequests(){const originalFetch=window.fetch;window.fetch=async(...args)=>{const response=await originalFetch(...args);const url=args[0];if(typeof url==='string'&&(url.includes('/mark-completed')||url.includes('/save-progress')||url.includes('/complete'))){if(response.ok){setTimeout(()=>this.updateStats(),500);}}return response;};}setupAutoRefresh(){this.updateInterval=setInterval(()=>{if(!this.isUpdating){this.updateStats(true);}},30000);}async updateStats(silent=false){if(this.isUpdating){return;}this.isUpdating=true;try{if(!silent){}const response=await fetch(`/${this.currentLang}/api/update-stats`,{method: 'POST',headers:{'Content-Type': 'application/json','X-Requested-With': 'XMLHttpRequest'},credentials: 'same-origin'});if(!response.ok){throw new Error(`HTTP ${response.status}: ${response.statusText}`);}const data=await response.json();if(data.success){this.updateUIWithStats(data.stats);if(!silent){this.showSuccessMessage('Статистика обновлена');}}else{throw new Error(data.message||'Неизвестная ошибка');}}catch(error){console.error('❌ Ошибка обновления статистики:',error);if(!silent){this.showErrorMessage(`Ошибка обновления статистики: ${error.message}`);}}finally{this.isUpdating=false;}}updateUIWithStats(stats){this.updateProgressElements(stats.overall_progress);this.updateCompletedLessons(stats.completed_lessons);this.updateTimeSpent(stats.total_time_spent);this.updateActiveDays(stats.active_days);this.updateLevelAndExperience(stats.level,stats.experience_points,stats.next_level_progress);this.animateStatsUpdate();}updateProgressElements(progress){const progressElements=document.querySelectorAll('[data-stat="overall-progress"],.overall-progress,.progress-percentage');progressElements.forEach(element=>{const oldValue=element.textContent;const newValue=`${progress}%`;if(oldValue!==newValue){this.animateValueChange(element,oldValue,newValue);}});const progressBars=document.querySelectorAll('.progress-bar,.circular-progress');progressBars.forEach(bar=>{const progressCircle=bar.querySelector('.progress-circle');if(progressCircle){const circumference=2*Math.PI*45;const offset=circumference-(progress/100)*circumference;progressCircle.style.strokeDashoffset=offset;}});}updateCompletedLessons(completed){const elements=document.querySelectorAll('[data-stat="completed-lessons"],.completed-lessons');elements.forEach(element=>{const oldValue=element.textContent;const newValue=completed.toString();if(oldValue!==newValue){this.animateValueChange(element,oldValue,newValue);}});}updateTimeSpent(timeSpent){const elements=document.querySelectorAll('[data-stat="time-spent"],.time-spent');elements.forEach(element=>{const oldValue=element.textContent;const newValue=`${timeSpent}мин`;if(oldValue!==newValue){this.animateValueChange(element,oldValue,newValue);}});}updateActiveDays(days){const elements=document.querySelectorAll('[data-stat="active-days"],.active-days');elements.forEach(element=>{const oldValue=element.textContent;const newValue=days.toString();if(oldValue!==newValue){this.animateValueChange(element,oldValue,newValue);}});}updateLevelAndExperience(level,experience,nextLevelProgress){const levelElements=document.querySelectorAll('[data-stat="level"],.user-level');levelElements.forEach(element=>{element.textContent=level;});const expElements=document.querySelectorAll('[data-stat="experience"],.experience-points');expElements.forEach(element=>{element.textContent=experience;});const nextLevelElements=document.querySelectorAll('[data-stat="next-level-progress"],.next-level-progress');nextLevelElements.forEach(element=>{element.textContent=`${nextLevelProgress}%`;});}animateValueChange(element,oldValue,newValue){element.style.transition='all 0.3s ease';element.style.transform='scale(1.1)';element.style.color='#28a745';setTimeout(()=>{element.textContent=newValue;element.style.transform='scale(1)';element.style.color='';},150);}animateStatsUpdate(){const statsContainer=document.querySelector('.stats-container,.progress-stats');if(statsContainer){statsContainer.style.transition='all 0.3s ease';statsContainer.style.boxShadow='0 0 20px rgba(40,167,69,0.3)';setTimeout(()=>{statsContainer.style.boxShadow='';},300);}}showSuccessMessage(message){const notification=document.createElement('div');notification.className='stats-notification success';notification.innerHTML=`<i class="fas fa-check-circle"></i><span>${message}</span>`;document.body.appendChild(notification);setTimeout(()=>{notification.remove();},3000);}showErrorMessage(message){const notification=document.createElement('div');notification.className='stats-notification error';notification.innerHTML=`<i class="fas fa-exclamation-circle"></i><span>${message}</span>`;document.body.appendChild(notification);setTimeout(()=>{notification.remove();},5000);}refresh(){this.updateStats();}destroy(){if(this.updateInterval){clearInterval(this.updateInterval);}}}document.addEventListener('DOMContentLoaded',()=>{window.unifiedStatsManager=new UnifiedStatsManager();});window.UnifiedStatsManager=UnifiedStatsManager;