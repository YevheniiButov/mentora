class EnhancedFileLoader{constructor(editor){this.editor=editor;this.canvas=editor.Canvas;this.loadedResources=new Set();this.pendingStyles=[];this.cssLoader=new ExternalCSSLoader(editor);}async loadFileInEditor(path,fileContent){try{const parsed=await this.parseFullHTMLContent(fileContent);this.clearEditor();await this.loadBaseResourcesSafely();await this.cssLoader.loadCSSFromTemplate(fileContent);if(parsed.cssContent){await this.applyCSSToCanvas(parsed.cssContent);}if(parsed.externalScripts.length>0){await this.loadExternalScriptsSafely(parsed.externalScripts);}if(parsed.bodyHtml){await this.loadHTMLComponents(parsed.bodyHtml);}await this.forceCanvasRefreshWithDelay();this.showLoadingStats();}catch(error){console.error('❌ Error loading file v2.1:',error);await this.basicFallbackLoading(fileContent);throw error;}}parseFullHTMLContent(htmlContent){const result={bodyHtml: '',cssContent: '',jsContent: '',externalStyles: [],externalScripts: [],metaTags: [],title: '',rawHTML: htmlContent};try{const lightlyCleanedHTML=this.lightCleanJinja(htmlContent);const parser=new DOMParser();const doc=parser.parseFromString(lightlyCleanedHTML,'text/html');const titleTag=doc.querySelector('title');if(titleTag){result.title=titleTag.textContent;}const metaTags=doc.querySelectorAll('meta');metaTags.forEach(meta=>{result.metaTags.push({name: meta.getAttribute('name'),content: meta.getAttribute('content'),charset: meta.getAttribute('charset'),httpEquiv: meta.getAttribute('http-equiv')});});const linkTags=doc.querySelectorAll('link[rel="stylesheet"],link[href*=".css"]');linkTags.forEach(link=>{const href=link.getAttribute('href');if(href&&!href.includes('bootstrap')&&!href.includes('font-awesome')){result.externalStyles.push({href: href,media: link.getAttribute('media')||'all',integrity: link.getAttribute('integrity'),crossorigin: link.getAttribute('crossorigin'),originalElement: link.outerHTML});}});const scriptTags=doc.querySelectorAll('script[src]');scriptTags.forEach(script=>{const src=script.getAttribute('src');if(src&&!src.includes('bootstrap')){result.externalScripts.push({src: src,async: script.hasAttribute('async'),defer: script.hasAttribute('defer'),integrity: script.getAttribute('integrity'),crossorigin: script.getAttribute('crossorigin')});}});const styleTags=doc.querySelectorAll('style');styleTags.forEach(style=>{result.cssContent+=style.textContent+'\n';});const inlineScripts=doc.querySelectorAll('script:not([src])');inlineScripts.forEach(script=>{result.jsContent+=script.textContent+'\n';});if(doc.body){let fullBodyContent=doc.body.innerHTML;const cleanBodyContent=this.gentleCleanJinja(fullBodyContent);result.bodyHtml=cleanBodyContent;}else{console.warn('⚠️ No body element found in HTML');const bodyMatch=lightlyCleanedHTML.match(/<body[^>]*>([\s\S]*?)<\/body>/i);if(bodyMatch){result.bodyHtml=this.gentleCleanJinja(bodyMatch[1]);}else{result.bodyHtml=this.gentleCleanJinja(lightlyCleanedHTML);}}return result;}catch(error){console.error('❌ Error parsing HTML:',error);result.bodyHtml=this.gentleCleanJinja(htmlContent);return result;}}lightCleanJinja(html){return html .replace(/\{\{\s*url_for\(\s*['"]static['"],?\s*filename\s*=\s*['"]([^'"]+)['"]\s*\)\s*\}\}/g,'/static/$1').replace(/\{\{\s*url_for\(\s*['"]static['"],?\s*filename=['"]([^'"]+)['"]\s*\)\s*\}\}/g,'/static/$1').replace(/\{\{\s*url_for\(\s*['"]([^'"]+)['"],?\s*[^}]*\)\s*\}\}/g,'/$1').replace(/\{\%\s*(.*?)\s*\%\}/g,'<!--Jinja2: $1-->').replace(/\{\{\s*([^}]*)\s*\}\}/g,'<!--Jinja2 var: $1-->');}gentleCleanJinja(html){return html .replace(/\{\{\s*url_for\(\s*['"]static['"],?\s*filename\s*=\s*['"]([^'"]+)['"]\s*\)\s*\}\}/g,'/static/$1').replace(/\{\{\s*url_for\(\s*['"]static['"],?\s*filename=['"]([^'"]+)['"]\s*\)\s*\}\}/g,'/static/$1').replace(/\{\{\s*url_for\(\s*['"]([^'"]+)['"],?\s*[^}]*\)\s*\}\}/g,'/$1').replace(/\{\{\s*([^}|]+)\s*\|\s*([^}]+)\s*\}\}/g,'<!--$1|$2-->').replace(/\{\{\s*([^}]+)\s*\}\}/g,(match,varName)=>{const trimmed=varName.trim();if(trimmed.includes('title')||trimmed.includes('name')||trimmed.includes('text')){return `<span data-jinja="${trimmed}">Content</span>`;}return '<!--Jinja2 var-->';}).replace(/\{\%\s*if\s+([^%]+)\s*\%\}/g,'<!--IF: $1-->').replace(/\{\%\s*endif\s*\%\}/g,'<!--ENDIF-->').replace(/\{\%\s*for\s+([^%]+)\s*\%\}/g,'<!--FOR: $1-->').replace(/\{\%\s*endfor\s*\%\}/g,'<!--ENDFOR-->').replace(/\{\%\s*block\s+([^%]+)\s*\%\}/g,'<!--BLOCK: $1-->').replace(/\{\%\s*endblock\s*\%\}/g,'<!--ENDBLOCK-->').replace(/\{\%\s*extends\s+([^%]+)\s*\%\}/g,'<!--EXTENDS: $1-->').replace(/\{\%\s*include\s+([^%]+)\s*\%\}/g,'<!--INCLUDE: $1-->').replace(/\{\%\s*([^%]*)\s*\%\}/g,'<!--Jinja2: $1-->').replace(/^\s*$/gm,'').replace(/\s+/g,' ').trim();}cleanJinjaTemplate(html){return this.gentleCleanJinja(html);}clearEditor(){try{this.editor.setComponents('');this.editor.setStyle('');this.pendingStyles=[];if(this.cssLoader){this.cssLoader.clearLoadedCSS();}const canvas=this.editor.Canvas;const canvasDoc=canvas.getDocument();if(canvasDoc&&canvasDoc.body){canvasDoc.body.innerHTML='';const head=canvasDoc.head;if(head){const userStyles=head.querySelectorAll('style[data-loaded-by],link[data-loaded-by]');userStyles.forEach(style=>style.remove());}}}catch(error){console.warn('⚠️ Error during editor clearing:',error);}}async loadBaseResourcesSafely(){const baseStyles=[ 'https: 'https: ];const cssPromises=baseStyles.map(url=>{if(!this.loadedResources.has(url)){return this.addStyleToCanvasSafely(url);}return Promise.resolve({url,success: true,source: 'already-loaded'});});const cssResults=await Promise.allSettled(cssPromises);await this.loadBootstrapSafely();}async loadBootstrapSafely(){const bootstrapJS='https: if(this.loadedResources.has(bootstrapJS)){return;}try{await this.addScriptToCanvasSafely(bootstrapJS);this.loadedResources.add(bootstrapJS);}catch(error){console.warn('⚠️ Could not load Bootstrap JS:',error.message);}}async addStyleToCanvasSafely(href,media='all'){return new Promise((resolve)=>{const canvas=this.editor.Canvas;const canvasDoc=canvas.getDocument();if(!canvasDoc){console.warn('⚠️ Canvas document not ready for CSS');resolve({url: href,success: false,error: 'Canvas not ready'});return;}const canvasHead=canvasDoc.head||canvasDoc.getElementsByTagName('head')[0];if(!canvasHead){console.warn('⚠️ No head element in canvas');resolve({url: href,success: false,error: 'No head element'});return;}const existingLink=canvasDoc.querySelector(`link[href="${href}"]`);if(existingLink){resolve({url: href,success: true,source: 'existing'});return;}const link=canvasDoc.createElement('link');link.rel='stylesheet';link.type='text/css';link.href=href;link.media=media;link.setAttribute('data-loaded-by','EnhancedFileLoader');link.onload=()=>{this.loadedResources.add(href);resolve({url: href,success: true,source: 'network'});};link.onerror=()=>{console.warn('⚠️ CSS failed to load:',href);resolve({url: href,success: false,error: 'Failed to load'});};canvasHead.appendChild(link);});}async addScriptToCanvasSafely(src){return new Promise((resolve)=>{const canvas=this.editor.Canvas;const canvasDoc=canvas.getDocument();if(!canvasDoc){console.warn('⚠️ Canvas document not ready for script');resolve({url: src,success: false,error: 'Canvas not ready'});return;}const existingScript=canvasDoc.querySelector(`script[src="${src}"]`);if(existingScript){resolve({url: src,success: true,source: 'existing'});return;}const script=canvasDoc.createElement('script');script.src=src;script.type='text/javascript';script.setAttribute('data-loaded-by','EnhancedFileLoader');script.onload=()=>{resolve({url: src,success: true,source: 'network'});};script.onerror=()=>{console.warn('⚠️ Script failed to load:',src);resolve({url: src,success: false,error: 'Failed to load'});};const canvasHead=canvasDoc.head||canvasDoc.getElementsByTagName('head')[0];const canvasBody=canvasDoc.body||canvasDoc.getElementsByTagName('body')[0];if(canvasHead){canvasHead.appendChild(script);}else if(canvasBody){canvasBody.appendChild(script);}else{console.warn('⚠️ No head or body element for script');resolve({url: src,success: false,error: 'No container element'});}});}async loadExternalScriptsSafely(externalScripts){const scriptPromises=externalScripts.map(script=>{if(script.src&&!this.loadedResources.has(script.src)){return this.addScriptToCanvasSafely(script.src);}return Promise.resolve({url: script.src,success: true,source: 'already-loaded'});});const results=await Promise.allSettled(scriptPromises);const successful=results.filter(r=>r.status==='fulfilled'&&r.value.success).length;}async loadExternalResources(externalStyles=[],externalScripts=[]){for(const style of externalStyles){if(!this.loadedResources.has(style.href)){await this.addStyleToCanvas(style.href,style.media);this.loadedResources.add(style.href);}}for(const script of externalScripts){if(!this.loadedResources.has(script.src)){await this.addScriptToCanvas(script.src);this.loadedResources.add(script.src);}}}async addStyleToCanvas(href,media='all'){return new Promise((resolve,reject)=>{const canvas=this.editor.Canvas;const canvasDoc=canvas.getDocument();if(!canvasDoc){console.warn('⚠️ Canvas document not ready');resolve();return;}const canvasHead=canvasDoc.head||canvasDoc.getElementsByTagName('head')[0];if(!canvasHead){console.warn('⚠️ No head element in canvas');resolve();return;}const existingLink=canvasDoc.querySelector(`link[href="${href}"]`);if(existingLink){resolve();return;}const link=canvasDoc.createElement('link');link.rel='stylesheet';link.href=href;link.media=media;link.setAttribute('data-loaded-by','EnhancedFileLoader');link.onload=()=>{this.loadedResources.add(href);resolve();};link.onerror=()=>{console.warn('⚠️ CSS failed to load:',href);resolve();};canvasHead.appendChild(link);});}async addScriptToCanvas(src){return new Promise((resolve,reject)=>{const canvas=this.editor.Canvas;const canvasDoc=canvas.getDocument();const canvasHead=canvasDoc.head;const existingScript=canvasDoc.querySelector(`script[src="${src}"]`);if(existingScript){resolve();return;}const script=canvasDoc.createElement('script');script.src=src;script.onload=()=>{resolve();};script.onerror=()=>{console.warn('⚠️ Script failed to load:',src);resolve();};canvasHead.appendChild(script);});}async applyCSSToCanvas(cssContent){const canvas=this.editor.Canvas;const canvasDoc=canvas.getDocument();if(!canvasDoc){console.warn('⚠️ Canvas document not ready for CSS');return;}const canvasHead=canvasDoc.head||canvasDoc.getElementsByTagName('head')[0];if(canvasHead){const styleElement=canvasDoc.createElement('style');styleElement.setAttribute('data-loaded-by','EnhancedFileLoader');styleElement.setAttribute('data-type','internal');styleElement.textContent=cssContent;canvasHead.appendChild(styleElement);}try{this.editor.setStyle(cssContent);}catch(error){console.warn('⚠️ Could not set CSS in StyleManager:',error);}this.pendingStyles.push(cssContent);}async loadHTMLComponents(htmlContent){await new Promise(resolve=>setTimeout(resolve,1500));try{if(!htmlContent||htmlContent.trim()===''){console.error('❌ Empty HTML content provided');throw new Error('Empty HTML content');}this.editor.setComponents(htmlContent);const canvas=this.editor.Canvas;canvas.refresh();const components=this.editor.getComponents();await new Promise(resolve=>setTimeout(resolve,500));}catch(error){console.error('❌ Error loading HTML components:',error);try{this.editor.setComponents('');await new Promise(resolve=>setTimeout(resolve,200));const textOnlyContent=htmlContent.replace(/<script[^>]*>[\s\S]*?<\/script>/gi,'');this.editor.setComponents(textOnlyContent);}catch(fallbackError){console.error('❌ Fallback loading also failed:',fallbackError);throw fallbackError;}}}async forceCanvasRefreshWithDelay(){this.refreshCanvas();setTimeout(()=>{this.refreshCanvas();this.reapplyPendingStyles();},1000);setTimeout(()=>{this.refreshCanvas();},2000);}refreshCanvas(){const canvas=this.editor.Canvas;try{canvas.refresh();const components=this.editor.getComponents();if(components&&components.each){components.each(component=>{try{if(component.view&&component.view.render){component.view.render();}}catch(e){console.warn('Warning rendering component:',e);}});}this.editor.trigger('canvas:update');}catch(error){console.warn('⚠️ Error during canvas refresh:',error);}}reapplyPendingStyles(){if(this.pendingStyles.length===0)return;const canvas=this.editor.Canvas;const canvasDoc=canvas.getDocument();if(canvasDoc){this.pendingStyles.forEach((css,index)=>{const styleId=`pending-style-${index}`;const existing=canvasDoc.getElementById(styleId);if(existing)existing.remove();const style=canvasDoc.createElement('style');style.id=styleId;style.textContent=css;style.setAttribute('data-loaded-by','EnhancedFileLoader-pending');const head=canvasDoc.head||canvasDoc.getElementsByTagName('head')[0];if(head){head.appendChild(style);}});}}showLoadingStats(){if(this.cssLoader){const stats=this.cssLoader.getLoadingStats();}}async basicFallbackLoading(fileContent){try{const parser=new DOMParser();const cleanedHTML=this.cleanJinjaTemplate(fileContent);const doc=parser.parseFromString(cleanedHTML,'text/html');let cssContent='';const styleTags=doc.querySelectorAll('style');styleTags.forEach(style=>{cssContent+=style.textContent+'\n';});let bodyHtml='';if(doc.body){bodyHtml=doc.body.innerHTML;}if(bodyHtml){this.editor.setComponents(bodyHtml);}if(cssContent){this.editor.setStyle(cssContent);}setTimeout(()=>{this.refreshCanvas();},1000);}catch(error){console.error('❌ Even fallback loading failed:',error);}}async loadFile(path){try{const response=await fetch(`/api/content-editor/template-content/${encodeURIComponent(path)}`);const data=await response.json();if(!data.success){throw new Error(data.error||'Failed to load file');}await this.loadFileInEditor(path,data.content);return{success: true,message: 'File loaded successfully with fixed CSS support',stats: this.cssLoader ? this.cssLoader.getLoadingStats(): null};}catch(error){console.error('❌ Error loading file v2.1:',error);return{success: false,error: error.message};}}getLoadedResources(){return{baseResources: Array.from(this.loadedResources),internalStyles: this.pendingStyles.length,externalCSS: this.cssLoader ? this.cssLoader.getLoadingStats(): null};}debugContentExtraction(originalHTML,extractedContent){const originalHasMainTitle=originalHTML.includes('succesvolle');const extractedHasMainTitle=extractedContent.includes('succesvolle');const originalHasMobile=originalHTML.includes('Become');const extractedHasMobile=extractedContent.includes('Become');if(originalHasMainTitle&&!extractedHasMainTitle){console.error('❌ CRITICAL: Main content lost during extraction!');const bodyMatch=originalHTML.match(/<body[^>]*>([\s\S]*?)<\/body>/i);if(bodyMatch){}}return{originalHasMainTitle,extractedHasMainTitle,originalHasMobile,extractedHasMobile,contentLost: originalHasMainTitle&&!extractedHasMainTitle};}}if(typeof window!=='undefined'){window.EnhancedFileLoader=EnhancedFileLoader;const initFileLoader=()=>{if(window.editor&&window.editor.Canvas){try{window.fileLoader=new EnhancedFileLoader(window.editor);return true;}catch(error){console.error('❌ Error creating EnhancedFileLoader:',error);return false;}}return false;};if(!initFileLoader()){const waitForEditor=setInterval(()=>{if(initFileLoader()){clearInterval(waitForEditor);}},100);setTimeout(()=>{clearInterval(waitForEditor);console.warn('⚠️ EnhancedFileLoader initialization timeout');},10000);}}