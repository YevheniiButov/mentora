#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ–ø–∏—Å–æ–∫ –≤ —Å—Ç–∏–ª–µ WhatsApp –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
–°–æ–∑–¥–∞–µ—Ç –≥–æ–ª–ª–∞–Ω–¥—Å–∫–∏–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
"""

import os
import sys
import psycopg2
from datetime import datetime, timedelta
import random

def get_production_db_connection():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = psycopg2.connect(
            host=os.environ.get('DATABASE_HOST', 'dpg-d0t3qvh2g6b8s7i1q1kg-a.oregon-postgres.render.com'),
            database=os.environ.get('DATABASE_NAME', 'mentora_production'),
            user=os.environ.get('DATABASE_USER', 'mentora_user'),
            password=os.environ.get('DATABASE_PASSWORD'),
            port=os.environ.get('DATABASE_PORT', '5432'),
            sslmode='require'
        )
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return conn
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def get_or_create_users(conn):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–æ–∫"""
    cursor = conn.cursor()
    
    # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
    users_data = [
        {
            'name': 'Liliam',
            'email': 'liliam@example.com',
            'phone': '+31 6 21657736',
            'avatar': 'L',
            'avatar_color': 'blue'
        },
        {
            'name': '√úmit Isiklar',
            'email': 'umit@example.com',
            'phone': '+32 485 82 22 30',
            'avatar': '√ú',
            'avatar_color': 'green'
        },
        {
            'name': 'Bahar Yƒ±ldƒ±z',
            'email': 'bahar@example.com',
            'phone': '+31 6 85293141',
            'avatar': 'B',
            'avatar_color': 'purple'
        },
        {
            'name': 'Drs. B. De lange',
            'email': 'dr.bdelange@example.com',
            'phone': '+31 6 38699969',
            'avatar': 'D',
            'avatar_color': 'blue'
        },
        {
            'name': 'Viktoriia',
            'email': 'viktoriia@example.com',
            'phone': '+31 6 15403678',
            'avatar': 'V',
            'avatar_color': 'pink'
        },
        {
            'name': 'Shiva',
            'email': 'shiva@example.com',
            'phone': '+31 6 28130004',
            'avatar': 'S',
            'avatar_color': 'orange'
        },
        {
            'name': 'Karlien Bruwer',
            'email': 'karlien@example.com',
            'phone': '+27 60 996 6634',
            'avatar': 'K',
            'avatar_color': 'pink'
        },
        {
            'name': 'Pelin Babayigit',
            'email': 'pelin@example.com',
            'phone': '+90 536 202 01',
            'avatar': 'P',
            'avatar_color': 'blue'
        },
        {
            'name': 'Rinsy',
            'email': 'rinsy@example.com',
            'phone': '+91 85900 24133',
            'avatar': 'R',
            'avatar_color': 'purple'
        },
        {
            'name': 'Yuliya Termonia',
            'email': 'yuliya@example.com',
            'phone': '+32 456 18 65 74',
            'avatar': 'Y',
            'avatar_color': 'green'
        },
        {
            'name': 'Rami',
            'email': 'rami@example.com',
            'phone': '+31 6 87917954',
            'avatar': 'R',
            'avatar_color': 'red'
        }
    ]
    
    users = []
    
    for user_data in users_data:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute("SELECT id FROM users WHERE email = %s", (user_data['email'],))
        existing_user = cursor.fetchone()
        
        if existing_user:
            user_id = existing_user[0]
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['name']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {user_id})")
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("""
                INSERT INTO users (
                    first_name, last_name, email, phone, 
                    password_hash, is_verified, created_at
                ) VALUES (%s, %s, %s, %s, %s, %s, %s)
                RETURNING id
            """, (
                user_data['name'].split()[0] if ' ' in user_data['name'] else user_data['name'],
                user_data['name'].split()[1] if ' ' in user_data['name'] else '',
                user_data['email'],
                user_data['phone'],
                'hashed_password_123',  # –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
                True,
                datetime.now()
            ))
            user_id = cursor.fetchone()[0]
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['name']} (ID: {user_id})")
        
        users.append({
            'id': user_id,
            'name': user_data['name'],
            'email': user_data['email'],
            'phone': user_data['phone'],
            'avatar': user_data['avatar'],
            'avatar_color': user_data['avatar_color']
        })
    
    conn.commit()
    return users

def create_topics_and_messages(conn, users):
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ–º—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤"""
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
    topics_data = [
        {
            'title': 'Collega Chat - Taal certificaten',
            'description': 'Discussie over taal certificaten en diploma erkenning',
            'messages': [
                {
                    'user': 'Liliam',
                    'content': "Goedemiddag collega's heeft iemand material voor lezen exam van BGB academy?",
                    'timestamp': '13:13',
                    'date_offset': 0
                },
                {
                    'user': '√úmit Isiklar',
                    'content': "Goedemiddag Collega's. Ik wil aan Nederland aanvragen om diploma gelijkwaardig te hebben.Welke niveau taal certificaat moet ik hebben? Engels en Nederlands.Alvast bedankt.",
                    'timestamp': '13:22',
                    'date_offset': 0
                },
                {
                    'user': '√úmit Isiklar',
                    'content': "ik ben een nieuwe lid hier",
                    'timestamp': '13:22',
                    'date_offset': 0
                },
                {
                    'user': 'Liliam',
                    'content': "B2+",
                    'timestamp': '13:22',
                    'date_offset': 0
                },
                {
                    'user': '√úmit Isiklar',
                    'content': "Engels ook?",
                    'timestamp': '13:23',
                    'date_offset': 0
                },
                {
                    'user': 'Liliam',
                    'content': "Volgens mij wel",
                    'timestamp': '13:23',
                    'date_offset': 0
                },
                {
                    'user': 'Bahar Yƒ±ldƒ±z',
                    'content': "B2 lezen voor Engels ook heb jij nodig",
                    'timestamp': '13:27',
                    'date_offset': 0
                },
                {
                    'user': '√úmit Isiklar',
                    'content': "Ok,dank u wel",
                    'timestamp': '13:24',
                    'date_offset': 0
                },
                {
                    'user': '√úmit Isiklar',
                    'content': "Dank u wel.",
                    'timestamp': '13:34',
                    'date_offset': 0
                },
                {
                    'user': 'Drs. B. De lange',
                    'content': "C1 Nederlands",
                    'timestamp': '20:01',
                    'date_offset': 0
                }
            ]
        },
        {
            'title': 'AKV Tandartsen - BIG Registratie',
            'description': 'Informatie over BIG registratie en werkprocessen',
            'messages': [
                {
                    'user': 'Karlien Bruwer',
                    'content': 'Dag, heeft iemand informatie over het proces van een tijdelijk "onoffici√´le" BIG registratie?',
                    'timestamp': '10:10',
                    'date_offset': -1
                },
                {
                    'user': 'Karlien Bruwer',
                    'content': 'Dag, heeft iemand informatie over het proces van een tijdelijk "onoffici√´le" BIG registratie? Ik wel ge√Ønteresseerd... mag ik je vragen waar je over deze informatie hebt gehoord? Alvast bedankt',
                    'timestamp': '11:22',
                    'date_offset': -1
                },
                {
                    'user': 'Pelin Babayigit',
                    'content': 'Kan ik hier meer over leren, alstublieft? Alvast bedankt',
                    'timestamp': '11:44',
                    'date_offset': -1
                },
                {
                    'user': 'Karlien Bruwer',
                    'content': 'Ik heb gehoort dat het een nieuwe "regel" is voor de IND (om te werken voordat je BIG registratie hebt) maar ik weet niet veel. Ik zal laat weten als Ik meer weet.',
                    'timestamp': '12:06',
                    'date_offset': -1
                },
                {
                    'user': 'Rinsy',
                    'content': 'Zeer geinteresseerd',
                    'timestamp': '12:07',
                    'date_offset': -1
                },
                {
                    'user': 'Yuliya Termonia',
                    'content': 'Ik heb in januari in webinar deel genomen. Ze hebben niets erover gezegd. Misschien praat je over het werk onder supervisie (stage) als een deel van het geheel proces?',
                    'timestamp': '12:29',
                    'date_offset': -1
                },
                {
                    'user': 'Rami',
                    'content': 'Hallo allemaal is er iemand die het spreken-examen op de Babel School wil doen? En Is er iemand die de test heeft gedaan en informatie met ons kan delen?',
                    'timestamp': '09:58',
                    'date_offset': -4
                }
            ]
        },
        {
            'title': 'BGB Examen Materialen',
            'description': 'Delen van materialen en ervaringen voor BGB examens',
            'messages': [
                {
                    'user': 'Shiva',
                    'content': 'Hello, Heeft iemand van mijn vrienden onlangs het BGB-examen gedaan, specifiek de onderdelen Lezen en Spreken?',
                    'timestamp': '21:50',
                    'date_offset': -1
                },
                {
                    'user': '√úmit Isiklar',
                    'content': 'Betekent het 4.1 mondeling?Dank u wel.',
                    'timestamp': '19:16',
                    'date_offset': -2
                }
            ]
        }
    ]
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞
    user_lookup = {user['name']: user['id'] for user in users}
    
    created_topics = []
    
    for topic_data in topics_data:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–º—É
        cursor.execute("""
            INSERT INTO topics (
                title, content, author_id, created_at, updated_at, 
                is_pinned, category, language
            ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
            RETURNING id
        """, (
            topic_data['title'],
            topic_data['description'],
            user_lookup.get('Liliam', 1),  # –ê–≤—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            datetime.now(),
            datetime.now(),
            False,
            'General',
            'nl'
        ))
        
        topic_id = cursor.fetchone()[0]
        created_topics.append(topic_id)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ–º–∞: {topic_data['title']} (ID: {topic_id})")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        for msg_data in topic_data['messages']:
            user_id = user_lookup.get(msg_data['user'])
            if not user_id:
                continue
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
            base_date = datetime.now() + timedelta(days=msg_data['date_offset'])
            hour, minute = map(int, msg_data['timestamp'].split(':'))
            message_time = base_date.replace(hour=hour, minute=minute, second=0, microsecond=0)
            
            cursor.execute("""
                INSERT INTO messages (
                    topic_id, author_id, content, created_at, updated_at,
                    is_pinned, message_type
                ) VALUES (%s, %s, %s, %s, %s, %s, %s)
            """, (
                topic_id,
                user_id,
                msg_data['content'],
                message_time,
                message_time,
                False,
                'text'
            ))
            
            print(f"   üìù –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {msg_data['user']}: {msg_data['content'][:50]}...")
    
    conn.commit()
    print(f"\nüéâ –°–æ–∑–¥–∞–Ω–æ {len(created_topics)} —Ç–µ–º —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏!")
    
    return created_topics

def add_realistic_timestamps(conn):
    """–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    cursor.execute("SELECT id, created_at FROM messages ORDER BY id")
    messages = cursor.fetchall()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
    for i, (msg_id, original_time) in enumerate(messages):
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
        days_ago = random.randint(1, 30)
        hours_ago = random.randint(0, 23)
        minutes_ago = random.randint(0, 59)
        
        # –ö–∞–∂–¥–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
        new_time = datetime.now() - timedelta(days=days_ago, hours=hours_ago, minutes=minutes_ago + i)
        
        cursor.execute("""
            UPDATE messages 
            SET created_at = %s, updated_at = %s
            WHERE id = %s
        """, (new_time, new_time, msg_id))
    
    conn.commit()
    print(f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –°–û–ó–î–ê–ù–ò–ï –ü–ï–†–ï–ü–ò–°–û–ö –í –°–¢–ò–õ–ï WHATSAPP")
    print("=" * 60)
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not os.environ.get('DATABASE_PASSWORD'):
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è DATABASE_PASSWORD –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –ø—Ä–æ–¥–∞–∫—à–Ω –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        print("export DATABASE_PASSWORD='–≤–∞—à_–ø–∞—Ä–æ–ª—å'")
        return False
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = get_production_db_connection()
    if not conn:
        return False
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("\nüë• –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        users = get_or_create_users(conn)
        print(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–º—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        print("\nüí¨ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º –∏ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        topics = create_topics_and_messages(conn, users)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        print("\n‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫...")
        add_realistic_timestamps(conn)
        
        print(f"\nüéâ –ì–û–¢–û–í–û! –°–æ–∑–¥–∞–Ω–æ:")
        print(f"   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        print(f"   - –¢–µ–º: {len(topics)}")
        print("   - –°–æ–æ–±—â–µ–Ω–∏–π: –º–Ω–æ–∂–µ—Å—Ç–≤–æ")
        print("\n–ü–µ—Ä–µ–ø–∏—Å–∫–∏ —Ç–µ–ø–µ—Ä—å –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ –≤ WhatsApp! üì±")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        conn.rollback()
        return False
        
    finally:
        conn.close()
        print("\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

if __name__ == "__main__":
    main()
