#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å email –æ—Ç–ø—Ä–∞–≤–∫–æ–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∫–ª—é—á–∞—è –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
"""

import os
import sys
from datetime import datetime

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ['MAIL_SERVER'] = 'smtp-relay.brevo.com'
os.environ['MAIL_PORT'] = '587'
os.environ['MAIL_USE_TLS'] = 'True'
os.environ['MAIL_USERNAME'] = '96d92f002@smtp-brevo.com'
os.environ['MAIL_PASSWORD'] = 'AdHL3pP0rkRt1S8N'
os.environ['MAIL_DEFAULT_SENDER'] = 'Mentora <noreply@mentora.com.in>'
os.environ['FLASK_ENV'] = 'development'
os.environ['MAIL_SUPPRESS_SEND'] = 'False'  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞

try:
    from app import app
    from extensions import db, mail
    from models import User
    from utils.email_service import send_email_confirmation
    
    def test_registration_flow():
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        print("=" * 60)
        
        with app.app_context():
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            test_email = 'test.registration@example.com'
            existing_user = User.query.filter_by(email=test_email).first()
            if existing_user:
                print(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {test_email}")
                db.session.delete(existing_user)
                db.session.commit()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            print(f"üë§ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {test_email}")
            user = User(
                email=test_email,
                first_name='Test',
                last_name='User',
                nationality='NL',
                profession='dentist',
                dutch_level='B2',
                legal_status='non_eu',
                university_name='Test University',
                degree_type='bachelor',
                study_start_year=2020,
                study_end_year=2024,
                study_country='NL',
                required_consents=True,
                digital_signature='Test User',
                registration_completed=True,
                is_active=True
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
            user.set_password('TestPassword123')
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email
            print("üîë –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email...")
            confirmation_token = user.generate_email_confirmation_token()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db.session.add(user)
            db.session.commit()
            
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID: {user.id}")
            print(f"üìß Email: {user.email}")
            print(f"üîë –¢–æ–∫–µ–Ω: {confirmation_token[:20]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º email –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            print("\nüìß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è email:")
            print("=" * 40)
            print(f"MAIL_SERVER: {app.config.get('MAIL_SERVER')}")
            print(f"MAIL_PORT: {app.config.get('MAIL_PORT')}")
            print(f"MAIL_USE_TLS: {app.config.get('MAIL_USE_TLS')}")
            print(f"MAIL_USERNAME: {app.config.get('MAIL_USERNAME')}")
            print(f"MAIL_DEFAULT_SENDER: {app.config.get('MAIL_DEFAULT_SENDER')}")
            print(f"MAIL_SUPPRESS_SEND: {app.config.get('MAIL_SUPPRESS_SEND')}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É email
            print("\nüì¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
            email_sent = send_email_confirmation(user, confirmation_token)
            
            if email_sent:
                print("‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                print(f"üì® –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫: {user.email}")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                base_url = app.config.get('BASE_URL', 'http://localhost:5000')
                confirmation_url = f"{base_url}/auth/confirm-email/{confirmation_token}"
                print(f"üîó –°—Å—ã–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {confirmation_url}")
                
                return True
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email!")
                return False
    
    def test_email_template():
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω email"""
        print("\nüé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ email")
        print("=" * 40)
        
        try:
            from flask import render_template
            
            test_user = {
                'first_name': 'Test',
                'last_name': 'User',
                'email': 'test@example.com'
            }
            
            confirmation_url = 'http://localhost:5000/auth/confirm-email/test-token'
            
            # –ü—Ä–æ–±—É–µ–º —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å HTML —à–∞–±–ª–æ–Ω
            try:
                html_content = render_template('emails/confirm_email.html', 
                                             user=test_user, 
                                             confirmation_url=confirmation_url)
                print("‚úÖ HTML —à–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                print(f"üìÑ –†–∞–∑–º–µ—Ä HTML: {len(html_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTML —à–∞–±–ª–æ–Ω–∞: {e}")
                print("‚ÑπÔ∏è –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback HTML")
            
            # –ü—Ä–æ–±—É–µ–º —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω
            try:
                text_content = render_template('emails/confirm_email.txt', 
                                             user=test_user, 
                                             confirmation_url=confirmation_url)
                print("‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                print(f"üìÑ –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞: {len(text_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞: {e}")
                print("‚ÑπÔ∏è –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback —Ç–µ–∫—Å—Ç")
                
        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤: {e}")
    
    def run_full_test():
        """–ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç"""
        print("ü¶∑ Mentora Registration Email Test")
        print("=" * 60)
        print(f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now()}")
        print("=" * 60)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã
        test_email_template()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
        registration_success = test_registration_flow()
        
        print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("=" * 40)
        print(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {'–£–°–ü–ï–®–ù–û' if registration_success else '–û–®–ò–ë–ö–ê'}")
        
        if registration_success:
            print("\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print("üìß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email: test.registration@example.com")
            print("üîó –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—à–µ")
        else:
            print("\n‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")
            print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ email –∏ –ª–æ–≥–∏")
    
    if __name__ == '__main__':
        run_full_test()

except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("üîç –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
except Exception as e:
    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    import traceback
    print(f"üìã –¢—Ä–µ–π—Å–±–µ–∫: {traceback.format_exc()}")
