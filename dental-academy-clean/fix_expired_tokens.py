#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
"""

import os
import sys
from datetime import datetime, timezone, timedelta
from app import app
from models import User, db
from utils.email_service import send_email_confirmation

def fix_expired_tokens():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ —Ç–æ–∫–µ–Ω—ã email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    
    with app.app_context():
        print("üîß FIXING EXPIRED EMAIL CONFIRMATION TOKENS")
        print("=" * 60)
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º–∏ email
        unconfirmed_users = User.query.filter_by(email_confirmed=False).all()
        print(f"üìß Found {len(unconfirmed_users)} users with unconfirmed email")
        
        expired_count = 0
        fixed_count = 0
        
        for user in unconfirmed_users:
            print(f"\nüë§ Processing user: {user.email}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
            if user.email_confirmation_sent_at:
                sent_at = user.email_confirmation_sent_at
                if sent_at.tzinfo is None:
                    sent_at = sent_at.replace(tzinfo=timezone.utc)
                
                expiry_seconds = app.config.get('EMAIL_CONFIRMATION_EXPIRES', 86400)
                expiry_time = sent_at + timedelta(seconds=expiry_seconds)
                current_time = datetime.now(timezone.utc)
                
                if current_time > expiry_time:
                    print(f"   ‚ùå Token expired (sent: {sent_at}, expired: {expiry_time})")
                    expired_count += 1
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
                    try:
                        new_token = user.generate_email_confirmation_token()
                        db.session.commit()
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π email
                        email_sent = send_email_confirmation(user, new_token)
                        
                        if email_sent:
                            print(f"   ‚úÖ New confirmation email sent")
                            fixed_count += 1
                        else:
                            print(f"   ‚ùå Failed to send new confirmation email")
                            
                    except Exception as e:
                        print(f"   ‚ùå Error fixing token: {e}")
                        db.session.rollback()
                else:
                    print(f"   ‚úÖ Token still valid (expires: {expiry_time})")
            else:
                print(f"   ‚ö†Ô∏è  No confirmation token found")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
                try:
                    new_token = user.generate_email_confirmation_token()
                    db.session.commit()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π email
                    email_sent = send_email_confirmation(user, new_token)
                    
                    if email_sent:
                        print(f"   ‚úÖ New confirmation email sent")
                        fixed_count += 1
                    else:
                        print(f"   ‚ùå Failed to send new confirmation email")
                        
                except Exception as e:
                    print(f"   ‚ùå Error generating token: {e}")
                    db.session.rollback()
        
        print(f"\nüìä SUMMARY:")
        print(f"   Total users with unconfirmed email: {len(unconfirmed_users)}")
        print(f"   Expired tokens found: {expired_count}")
        print(f"   Tokens fixed: {fixed_count}")
        
        if fixed_count > 0:
            print(f"\n‚úÖ SUCCESS: {fixed_count} users received new confirmation emails")
        else:
            print(f"\n‚ö†Ô∏è  No tokens needed fixing")
        
        print("=" * 60)

if __name__ == "__main__":
    fix_expired_tokens()
