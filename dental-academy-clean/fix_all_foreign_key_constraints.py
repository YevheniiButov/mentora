#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import app, db
from sqlalchemy import text

def fix_all_foreign_key_constraints():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è"""
    
    with app.app_context():
        try:
            print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π, —Å—Å—ã–ª–∞—é—â–∏—Ö—Å—è –Ω–∞ —Ç–∞–±–ª–∏—Ü—É user
            result = db.session.execute(text("""
                SELECT 
                    tc.table_name, 
                    kcu.column_name, 
                    ccu.table_name AS foreign_table_name,
                    ccu.column_name AS foreign_column_name,
                    tc.constraint_name,
                    rc.delete_rule
                FROM 
                    information_schema.table_constraints AS tc 
                    JOIN information_schema.key_column_usage AS kcu
                      ON tc.constraint_name = kcu.constraint_name
                      AND tc.table_schema = kcu.table_schema
                    JOIN information_schema.constraint_column_usage AS ccu
                      ON ccu.constraint_name = tc.constraint_name
                      AND ccu.table_schema = tc.table_schema
                    JOIN information_schema.referential_constraints AS rc
                      ON tc.constraint_name = rc.constraint_name
                      AND tc.table_schema = rc.constraint_schema
                WHERE tc.constraint_type = 'FOREIGN KEY' 
                AND ccu.table_name = 'user'
                AND ccu.column_name = 'id'
            """))
            
            foreign_keys = result.fetchall()
            
            if not foreign_keys:
                print("‚ÑπÔ∏è –í–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π, —Å—Å—ã–ª–∞—é—â–∏—Ö—Å—è –Ω–∞ user.id, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return True
            
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(foreign_keys)} –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π, —Å—Å—ã–ª–∞—é—â–∏—Ö—Å—è –Ω–∞ user.id:")
            
            for fk in foreign_keys:
                table_name, column_name, foreign_table, foreign_column, constraint_name, delete_rule = fk
                print(f"   üìä {table_name}.{column_name} -> {foreign_table}.{foreign_column}")
                print(f"       –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {constraint_name}")
                print(f"       –¢–µ–∫—É—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ —É–¥–∞–ª–µ–Ω–∏—è: {delete_rule}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –±—ã—Ç—å NULL
                column_info = db.session.execute(text(f"""
                    SELECT is_nullable, column_default
                    FROM information_schema.columns
                    WHERE table_name = '{table_name}'
                    AND column_name = '{column_name}'
                """)).fetchone()
                
                if column_info:
                    is_nullable, column_default = column_info
                    print(f"       –ö–æ–ª–æ–Ω–∫–∞ nullable: {is_nullable}")
                    
                    if is_nullable == 'NO':
                        print(f"       ‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ –ù–ï –º–æ–∂–µ—Ç –±—ã—Ç—å NULL - –∏—Å–ø–æ–ª—å–∑—É–µ–º CASCADE")
                        action = "CASCADE"
                    else:
                        print(f"       ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å NULL - –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SET NULL –∏–ª–∏ CASCADE")
                        action = "CASCADE"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º CASCADE –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                else:
                    print(f"       ‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–µ")
                    action = "CASCADE"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
                try:
                    print(f"   üîß –û–±–Ω–æ–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è {table_name}...")
                    
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
                    db.session.execute(text(f"""
                        ALTER TABLE {table_name} 
                        DROP CONSTRAINT IF EXISTS {constraint_name}
                    """))
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º
                    db.session.execute(text(f"""
                        ALTER TABLE {table_name} 
                        ADD CONSTRAINT {constraint_name} 
                        FOREIGN KEY ({column_name}) REFERENCES {foreign_table}({foreign_column}) 
                        ON DELETE {action}
                    """))
                    
                    print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è {table_name} (ON DELETE {action})")
                    
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è {table_name}: {e}")
                    db.session.rollback()
                    continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            db.session.commit()
            print("üíæ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
            print("‚úÖ –í—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: {e}")
            db.session.rollback()
            return False

def show_foreign_key_constraints():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π"""
    
    with app.app_context():
        try:
            print("üìã –í—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π:")
            
            result = db.session.execute(text("""
                SELECT 
                    tc.table_name, 
                    kcu.column_name, 
                    ccu.table_name AS foreign_table_name,
                    ccu.column_name AS foreign_column_name,
                    tc.constraint_name,
                    rc.delete_rule
                FROM 
                    information_schema.table_constraints AS tc 
                    JOIN information_schema.key_column_usage AS kcu
                      ON tc.constraint_name = kcu.constraint_name
                      AND tc.table_schema = kcu.table_schema
                    JOIN information_schema.constraint_column_usage AS ccu
                      ON ccu.constraint_name = tc.constraint_name
                      AND ccu.table_schema = tc.table_schema
                    JOIN information_schema.referential_constraints AS rc
                      ON tc.constraint_name = rc.constraint_name
                      AND tc.table_schema = rc.constraint_schema
                WHERE tc.constraint_type = 'FOREIGN KEY' 
                AND ccu.table_name = 'user'
                AND ccu.column_name = 'id'
                ORDER BY tc.table_name, kcu.column_name
            """))
            
            foreign_keys = result.fetchall()
            
            if not foreign_keys:
                print("‚ÑπÔ∏è –í–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π, —Å—Å—ã–ª–∞—é—â–∏—Ö—Å—è –Ω–∞ user.id, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            for fk in foreign_keys:
                table_name, column_name, foreign_table, foreign_column, constraint_name, delete_rule = fk
                print(f"üìä {table_name}.{column_name} -> {foreign_table}.{foreign_column}")
                print(f"   –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {constraint_name}")
                print(f"   –ü—Ä–∞–≤–∏–ª–æ —É–¥–∞–ª–µ–Ω–∏—è: {delete_rule}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: {e}")

def test_user_deletion(user_id=None):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    with app.app_context():
        try:
            if user_id is None:
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                from models import User, ForumPost, RegistrationVisitor
                from datetime import datetime
                
                test_user = User(
                    email="test_cascade_delete@example.com",
                    password_hash="test_hash",
                    first_name="Test",
                    last_name="Delete"
                )
                db.session.add(test_user)
                db.session.flush()
                user_id = test_user.id
                print(f"üë§ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}")
                
                # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                visitor = RegistrationVisitor(
                    ip_address="127.0.0.1",
                    page_type="test",
                    entry_time=datetime.utcnow(),
                    user_id=user_id,
                    email_entered="test_cascade_delete@example.com"
                )
                db.session.add(visitor)
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç —Ñ–æ—Ä—É–º–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–º–∞)
                from models import ForumTopic
                topic = ForumTopic.query.first()
                if topic:
                    post = ForumPost(
                        content="Test post for cascade deletion",
                        topic_id=topic.id,
                        author_id=user_id
                    )
                    db.session.add(post)
                    print(f"üìù –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —Ñ–æ—Ä—É–º–∞")
                
                db.session.commit()
                print(f"üìä –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å visitor")
            
            print(f"üóëÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}")
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User.query.get(user_id)
            if not user:
                print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            db.session.delete(user)
            db.session.commit()
            
            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print("üéâ –ö–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            db.session.rollback()
            return False

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python3 fix_all_foreign_key_constraints.py show     - –ø–æ–∫–∞–∑–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
        print("  python3 fix_all_foreign_key_constraints.py fix      - –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
        print("  python3 fix_all_foreign_key_constraints.py test     - –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ")
        print("  python3 fix_all_foreign_key_constraints.py delete <user_id> - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        sys.exit(1)
    
    command = sys.argv[1]
    
    if command == "show":
        show_foreign_key_constraints()
    elif command == "fix":
        success = fix_all_foreign_key_constraints()
        if success:
            print("\nüß™ –•–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å? –ó–∞–ø—É—Å—Ç–∏—Ç–µ:")
            print("   python3 fix_all_foreign_key_constraints.py test")
        else:
            print("üí• –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
            sys.exit(1)
    elif command == "test":
        success = test_user_deletion()
        if not success:
            sys.exit(1)
    elif command == "delete":
        if len(sys.argv) < 3:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            sys.exit(1)
        try:
            user_id = int(sys.argv[2])
            success = test_user_deletion(user_id)
            if not success:
                sys.exit(1)
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.")
            sys.exit(1)
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        sys.exit(1)
