#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –ø—Ä–æ–¥–∞–∫—à–Ω –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import subprocess
import shutil
from datetime import datetime
import json

def create_backup_directory():
    """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤"""
    backup_dir = "backups"
    if not os.path.exists(backup_dir):
        os.makedirs(backup_dir)
        print(f"‚úÖ Created backup directory: {backup_dir}")
    return backup_dir

def backup_sqlite_database():
    """–°–æ–∑–¥–∞–µ—Ç –±—ç–∫–∞–ø SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    backup_dir = create_backup_directory()
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # –ü—É—Ç—å –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –ë–î
    prod_db_path = "instance/app.db"
    if not os.path.exists(prod_db_path):
        print(f"‚ùå Production database not found: {prod_db_path}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
    backup_filename = f"production_backup_{timestamp}.db"
    backup_path = os.path.join(backup_dir, backup_filename)
    
    try:
        shutil.copy2(prod_db_path, backup_path)
        print(f"‚úÖ SQLite backup created: {backup_path}")
        
        # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –±—ç–∫–∞–ø–∞
        metadata = {
            "backup_type": "sqlite",
            "timestamp": timestamp,
            "source_path": prod_db_path,
            "backup_path": backup_path,
            "file_size": os.path.getsize(backup_path),
            "created_by": "backup_production.py"
        }
        
        metadata_path = os.path.join(backup_dir, f"backup_metadata_{timestamp}.json")
        with open(metadata_path, 'w') as f:
            json.dump(metadata, f, indent=2)
        
        print(f"‚úÖ Backup metadata created: {metadata_path}")
        return backup_path
        
    except Exception as e:
        print(f"‚ùå Error creating SQLite backup: {e}")
        return False

def backup_postgresql_database():
    """–°–æ–∑–¥–∞–µ—Ç –±—ç–∫–∞–ø PostgreSQL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    backup_dir = create_backup_directory()
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # –ü–æ–ª—É—á–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    database_url = os.environ.get('DATABASE_URL')
    if not database_url:
        print("‚ùå DATABASE_URL not found in environment")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
    backup_filename = f"production_backup_{timestamp}.sql"
    backup_path = os.path.join(backup_dir, backup_filename)
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º pg_dump –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞
        cmd = f"pg_dump {database_url} > {backup_path}"
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"‚úÖ PostgreSQL backup created: {backup_path}")
            
            # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –±—ç–∫–∞–ø–∞
            metadata = {
                "backup_type": "postgresql",
                "timestamp": timestamp,
                "database_url": database_url,
                "backup_path": backup_path,
                "file_size": os.path.getsize(backup_path),
                "created_by": "backup_production.py"
            }
            
            metadata_path = os.path.join(backup_dir, f"backup_metadata_{timestamp}.json")
            with open(metadata_path, 'w') as f:
                json.dump(metadata, f, indent=2)
            
            print(f"‚úÖ Backup metadata created: {metadata_path}")
            return backup_path
        else:
            print(f"‚ùå Error creating PostgreSQL backup: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Exception creating PostgreSQL backup: {e}")
        return False

def create_staging_copy(backup_path):
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–ø–∏—é –¥–ª—è staging –∏–∑ –±—ç–∫–∞–ø–∞"""
    if not backup_path:
        print("‚ùå No backup path provided")
        return False
    
    staging_dir = "staging"
    if not os.path.exists(staging_dir):
        os.makedirs(staging_dir)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±—ç–∫–∞–ø–∞
    if backup_path.endswith('.db'):
        # SQLite –±—ç–∫–∞–ø
        staging_db_path = os.path.join(staging_dir, 'staging.db')
        try:
            shutil.copy2(backup_path, staging_db_path)
            print(f"‚úÖ Staging SQLite copy created: {staging_db_path}")
            return staging_db_path
        except Exception as e:
            print(f"‚ùå Error creating staging copy: {e}")
            return False
    
    elif backup_path.endswith('.sql'):
        # PostgreSQL –±—ç–∫–∞–ø
        staging_db_path = os.path.join(staging_dir, 'staging.sql')
        try:
            shutil.copy2(backup_path, staging_db_path)
            print(f"‚úÖ Staging PostgreSQL copy created: {staging_db_path}")
            return staging_db_path
        except Exception as e:
            print(f"‚ùå Error creating staging copy: {e}")
            return False
    
    else:
        print(f"‚ùå Unknown backup format: {backup_path}")
        return False

def verify_backup(backup_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –±—ç–∫–∞–ø–∞"""
    if not os.path.exists(backup_path):
        print(f"‚ùå Backup file not found: {backup_path}")
        return False
    
    file_size = os.path.getsize(backup_path)
    if file_size == 0:
        print(f"‚ùå Backup file is empty: {backup_path}")
        return False
    
    print(f"‚úÖ Backup verification passed: {file_size} bytes")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞"""
    
    print("üíæ Creating production database backup...")
    print("=" * 50)
    
    backup_path = None
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    database_url = os.environ.get('DATABASE_URL', '')
    
    if database_url.startswith('postgresql://') or database_url.startswith('postgres://'):
        print("üêò Detected PostgreSQL database")
        backup_path = backup_postgresql_database()
    elif os.path.exists('instance/app.db'):
        print("üóÉÔ∏è Detected SQLite database")
        backup_path = backup_sqlite_database()
    else:
        print("‚ùå No database found to backup")
        sys.exit(1)
    
    if not backup_path:
        print("‚ùå Backup failed")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—ç–∫–∞–ø
    if not verify_backup(backup_path):
        print("‚ùå Backup verification failed")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è staging
    staging_path = create_staging_copy(backup_path)
    if not staging_path:
        print("‚ùå Staging copy creation failed")
        sys.exit(1)
    
    print("=" * 50)
    print("üéâ Backup completed successfully!")
    print(f"üìÅ Production backup: {backup_path}")
    print(f"üìÅ Staging copy: {staging_path}")
    print()
    print("‚ö†Ô∏è  Keep backup safe before proceeding with migration!")

if __name__ == "__main__":
    main()


