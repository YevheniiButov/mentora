#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –¥–ª—è SQLite
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import app, db
from sqlalchemy import text, inspect

def get_sqlite_foreign_keys():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–∞—Ö –≤ SQLite"""
    
    with app.app_context():
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            inspector = inspect(db.engine)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
            tables = inspector.get_table_names()
            
            foreign_keys_info = []
            
            for table_name in tables:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–∞—Ö –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
                    foreign_keys = inspector.get_foreign_keys(table_name)
                    
                    for fk in foreign_keys:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Å—ã–ª–∞–µ—Ç—Å—è –ª–∏ –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á –Ω–∞ —Ç–∞–±–ª–∏—Ü—É user
                        if fk['referred_table'] == 'user' and 'id' in fk.get('referred_columns', []):
                            for local_column in fk.get('constrained_columns', []):
                                foreign_keys_info.append({
                                    'table_name': table_name,
                                    'column_name': local_column,
                                    'foreign_table': fk['referred_table'],
                                    'foreign_column': fk['referred_columns'][0] if fk['referred_columns'] else 'id',
                                    'constraint_name': fk.get('name', f'fk_{table_name}_{local_column}'),
                                    'ondelete': fk.get('options', {}).get('ondelete', 'NO ACTION')
                                })
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
                    continue
            
            return foreign_keys_info
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–∞—Ö: {e}")
            return []

def show_foreign_key_constraints():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π"""
    
    foreign_keys = get_sqlite_foreign_keys()
    
    if not foreign_keys:
        print("‚ÑπÔ∏è –í–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π, —Å—Å—ã–ª–∞—é—â–∏—Ö—Å—è –Ω–∞ user.id, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(foreign_keys)} –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π, —Å—Å—ã–ª–∞—é—â–∏—Ö—Å—è –Ω–∞ user.id:")
    
    for fk in foreign_keys:
        print(f"üìä {fk['table_name']}.{fk['column_name']} -> {fk['foreign_table']}.{fk['foreign_column']}")
        print(f"   –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {fk['constraint_name']}")
        print(f"   –ü—Ä–∞–≤–∏–ª–æ —É–¥–∞–ª–µ–Ω–∏—è: {fk['ondelete']}")

def fix_foreign_key_constraints():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è"""
    
    with app.app_context():
        try:
            print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –¥–ª—è SQLite...")
            
            # –í SQLite –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –Ω–∞–ø—Ä—è–º—É—é
            # –ù—É–∂–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã —Å –Ω–æ–≤—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
            print("‚ö†Ô∏è SQLite –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π")
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä—É—á–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
            
            foreign_keys = get_sqlite_foreign_keys()
            
            if not foreign_keys:
                print("‚ÑπÔ∏è –í–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return True
            
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(foreign_keys)} –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π:")
            
            for fk in foreign_keys:
                table_name = fk['table_name']
                column_name = fk['column_name']
                constraint_name = fk['constraint_name']
                
                print(f"üìä {table_name}.{column_name}")
                print(f"   –¢–µ–∫—É—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ: {fk['ondelete']}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –±—ã—Ç—å NULL
                try:
                    result = db.session.execute(text(f"PRAGMA table_info({table_name})"))
                    columns = result.fetchall()
                    
                    column_nullable = True
                    for col in columns:
                        if col[1] == column_name:  # col[1] - –∏–º—è –∫–æ–ª–æ–Ω–∫–∏
                            column_nullable = col[3] == 0  # col[3] - notnull (0 = nullable, 1 = not null)
                            break
                    
                    print(f"   –ö–æ–ª–æ–Ω–∫–∞ nullable: {column_nullable}")
                    
                except Exception as e:
                    print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–µ: {e}")
                    column_nullable = True
            
            print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–∏–ø—Ç delete_user_safely.py –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")
            print("2. –ò–ª–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏")
            print("3. –ò–ª–∏ –º–∏–≥—Ä–∏—Ä—É–π—Ç–µ –Ω–∞ PostgreSQL –¥–ª—è –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ CASCADE")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: {e}")
            return False

def test_user_deletion(user_id=None):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    with app.app_context():
        try:
            if user_id is None:
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                from models import User, RegistrationVisitor, ForumPost
                from datetime import datetime
                
                test_user = User(
                    email="test_sqlite_delete@example.com",
                    password_hash="test_hash",
                    first_name="Test",
                    last_name="SQLite"
                )
                db.session.add(test_user)
                db.session.flush()
                user_id = test_user.id
                print(f"üë§ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}")
                
                # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                visitor = RegistrationVisitor(
                    ip_address="127.0.0.1",
                    page_type="test",
                    entry_time=datetime.utcnow(),
                    user_id=user_id,
                    email_entered="test_sqlite_delete@example.com"
                )
                db.session.add(visitor)
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç —Ñ–æ—Ä—É–º–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–º–∞)
                from models import ForumTopic
                topic = ForumTopic.query.first()
                if topic:
                    post = ForumPost(
                        content="Test post for SQLite cascade deletion",
                        topic_id=topic.id,
                        author_id=user_id
                    )
                    db.session.add(post)
                    print(f"üìù –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —Ñ–æ—Ä—É–º–∞")
                
                db.session.commit()
                print(f"üìä –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å visitor")
            
            print(f"üóëÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è
            from delete_user_safely import delete_user_safely
            success = delete_user_safely(user_id)
            
            if success:
                print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                print("üéâ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            db.session.rollback()
            return False

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python3 fix_sqlite_foreign_key_constraints.py show     - –ø–æ–∫–∞–∑–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
        print("  python3 fix_sqlite_foreign_key_constraints.py fix      - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        print("  python3 fix_sqlite_foreign_key_constraints.py test     - –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ")
        print("  python3 fix_sqlite_foreign_key_constraints.py delete <user_id> - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        sys.exit(1)
    
    command = sys.argv[1]
    
    if command == "show":
        show_foreign_key_constraints()
    elif command == "fix":
        success = fix_foreign_key_constraints()
        if not success:
            sys.exit(1)
    elif command == "test":
        success = test_user_deletion()
        if not success:
            sys.exit(1)
    elif command == "delete":
        if len(sys.argv) < 3:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            sys.exit(1)
        try:
            user_id = int(sys.argv[2])
            success = test_user_deletion(user_id)
            if not success:
                sys.exit(1)
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.")
            sys.exit(1)
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
        sys.exit(1)
