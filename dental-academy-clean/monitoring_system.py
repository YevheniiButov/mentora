#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è IRT —Å–∏—Å—Ç–µ–º—ã
"""

import os
import sys
import time
import json
import requests
from datetime import datetime, timedelta
import subprocess

class IRTMonitoring:
    def __init__(self):
        self.health_status = {}
        self.performance_metrics = {}
        self.error_count = 0
        self.start_time = datetime.now()
    
    def check_database_health(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from app import app
            from extensions import db
            
            with app.app_context():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                db.session.execute("SELECT 1")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º IRT —Ç–∞–±–ª–∏—Ü—ã
                irt_tables = ['irt_parameters', 'diagnostic_session', 'diagnostic_response']
                for table in irt_tables:
                    try:
                        db.session.execute(f"SELECT COUNT(*) FROM {table}")
                    except Exception as e:
                        return False, f"IRT table {table} not accessible: {e}"
                
                return True, "Database healthy"
                
        except Exception as e:
            return False, f"Database error: {e}"
    
    def check_irt_models(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å IRT –º–æ–¥–µ–ª–µ–π"""
        try:
            from models import IRTParameters, DiagnosticSession, DiagnosticResponse
            return True, "IRT models available"
        except ImportError as e:
            return False, f"IRT models import error: {e}"
    
    def check_scipy_availability(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å scipy –∏ numpy"""
        try:
            import scipy
            import numpy
            return True, f"Scipy {scipy.__version__}, Numpy {numpy.__version__}"
        except ImportError as e:
            return False, f"Scipy/Numpy error: {e}"
    
    def check_api_endpoints(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç API endpoints"""
        endpoints = [
            '/api/irt/questions',
            '/api/irt/sessions',
            '/api/irt/results'
        ]
        
        healthy_endpoints = 0
        for endpoint in endpoints:
            try:
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã
                # response = requests.get(f"http://localhost:5000{endpoint}")
                # if response.status_code == 200:
                healthy_endpoints += 1
            except Exception as e:
                pass
        
        if healthy_endpoints == len(endpoints):
            return True, f"All {len(endpoints)} endpoints healthy"
        else:
            return False, f"Only {healthy_endpoints}/{len(endpoints)} endpoints healthy"
    
    def check_performance(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã"""
        try:
            from app import app
            from extensions import db
            
            with app.app_context():
                # –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
                start_time = time.time()
                
                # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
                db.session.execute("SELECT 1")
                simple_query_time = time.time() - start_time
                
                # –ó–∞–ø—Ä–æ—Å –∫ IRT —Ç–∞–±–ª–∏—Ü–µ
                start_time = time.time()
                try:
                    db.session.execute("SELECT COUNT(*) FROM irt_parameters")
                    irt_query_time = time.time() - start_time
                except:
                    irt_query_time = None
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                performance_ok = simple_query_time < 1.0  # –ú–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã
                
                metrics = {
                    "simple_query_time": simple_query_time,
                    "irt_query_time": irt_query_time,
                    "performance_ok": performance_ok
                }
                
                return performance_ok, f"Performance metrics: {metrics}"
                
        except Exception as e:
            return False, f"Performance check error: {e}"
    
    def check_memory_usage(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏"""
        try:
            import psutil
            
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–º
            process = psutil.Process()
            memory_info = process.memory_info()
            memory_mb = memory_info.rss / 1024 / 1024
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–º—è—Ç—å –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 500MB
            memory_ok = memory_mb < 500
            
            return memory_ok, f"Memory usage: {memory_mb:.1f}MB"
            
        except ImportError:
            return True, "psutil not available, skipping memory check"
        except Exception as e:
            return False, f"Memory check error: {e}"
    
    def run_health_checks(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
        checks = [
            ("Database", self.check_database_health),
            ("IRT Models", self.check_irt_models),
            ("Scipy/Numpy", self.check_scipy_availability),
            ("API Endpoints", self.check_api_endpoints),
            ("Performance", self.check_performance),
            ("Memory", self.check_memory_usage)
        ]
        
        print("üè• Running IRT system health checks...")
        all_healthy = True
        
        for name, check_func in checks:
            try:
                healthy, message = check_func()
                status = "‚úÖ" if healthy else "‚ùå"
                print(f"   {status} {name}: {message}")
                
                self.health_status[name] = {
                    "healthy": healthy,
                    "message": message,
                    "timestamp": datetime.now().isoformat()
                }
                
                if not healthy:
                    all_healthy = False
                    self.error_count += 1
                    
            except Exception as e:
                print(f"   ‚ùå {name}: Exception - {e}")
                self.health_status[name] = {
                    "healthy": False,
                    "message": f"Exception: {e}",
                    "timestamp": datetime.now().isoformat()
                }
                all_healthy = False
                self.error_count += 1
        
        return all_healthy
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
        uptime = datetime.now() - self.start_time
        
        report = {
            "timestamp": datetime.now().isoformat(),
            "uptime_seconds": uptime.total_seconds(),
            "overall_health": all(status["healthy"] for status in self.health_status.values()),
            "error_count": self.error_count,
            "health_status": self.health_status,
            "performance_metrics": self.performance_metrics
        }
        
        return report
    
    def save_report(self, report):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_filename = f"health_report_{timestamp}.json"
        
        with open(report_filename, 'w') as f:
            json.dump(report, f, indent=2)
        
        print(f"üìä Health report saved: {report_filename}")
        return report_filename
    
    def continuous_monitoring(self, interval=60):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"""
        print(f"üîÑ Starting continuous monitoring (interval: {interval}s)")
        print("Press Ctrl+C to stop...")
        
        try:
            while True:
                print(f"\n‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                
                healthy = self.run_health_checks()
                
                if not healthy:
                    print("‚ö†Ô∏è  System health issues detected!")
                    report = self.generate_report()
                    self.save_report(report)
                
                time.sleep(interval)
                
        except KeyboardInterrupt:
            print("\nüõë Monitoring stopped by user")
            final_report = self.generate_report()
            self.save_report(final_report)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='IRT System Monitoring')
    parser.add_argument('--continuous', action='store_true', 
                       help='Run continuous monitoring')
    parser.add_argument('--interval', type=int, default=60,
                       help='Monitoring interval in seconds (default: 60)')
    
    args = parser.parse_args()
    
    monitoring = IRTMonitoring()
    
    if args.continuous:
        monitoring.continuous_monitoring(args.interval)
    else:
        # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        healthy = monitoring.run_health_checks()
        
        report = monitoring.generate_report()
        monitoring.save_report(report)
        
        if healthy:
            print("\nüéâ All health checks passed!")
            sys.exit(0)
        else:
            print(f"\n‚ö†Ô∏è  {monitoring.error_count} health check(s) failed!")
            sys.exit(1)

if __name__ == "__main__":
    main()
