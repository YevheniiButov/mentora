#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–≤—è–∑–∏ –ø–æ—Å—Ç–æ–≤ –∏ —Ç–µ–º
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫ –∫–∞–∫–∏–º —Ç–µ–º–∞–º –ø—Ä–∏–≤—è–∑–∞–Ω—ã –ø–æ—Å—Ç—ã
"""

import os
import psycopg2
from urllib.parse import urlparse

def get_production_db_connection():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ DATABASE_URL"""
    try:
        database_url = os.environ.get('DATABASE_URL')
        
        if not database_url:
            print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            return None
        
        print(f"üîó –ò—Å–ø–æ–ª—å–∑—É–µ–º DATABASE_URL: {database_url[:50]}...")
        
        conn = psycopg2.connect(database_url, sslmode='require')
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return conn
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def debug_posts_topics(conn):
    """–û—Ç–ª–∞–¥–∫–∞ —Å–≤—è–∑–∏ –ø–æ—Å—Ç–æ–≤ –∏ —Ç–µ–º"""
    cursor = conn.cursor()
    
    print("\nüîç –û–¢–õ–ê–î–ö–ê –°–í–Ø–ó–ò –ü–û–°–¢–û–í –ò –¢–ï–ú")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–µ–º—ã
    print("\nüìã –í–°–ï –¢–ï–ú–´:")
    cursor.execute("""
        SELECT ft.id, ft.title, ft.category_id, ft.created_at
        FROM forum_topics ft
        ORDER BY ft.id
    """)
    
    topics = cursor.fetchall()
    
    for topic in topics:
        topic_id, title, category_id, created_at = topic
        print(f"   üìã –¢–µ–º–∞ ID {topic_id}: {title[:50]}... (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_id}, –°–æ–∑–¥–∞–Ω–∞: {created_at})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã —Å –∏—Ö —Ç–µ–º–∞–º–∏
    print("\nüìù –í–°–ï –ü–û–°–¢–´ –° –¢–ï–ú–ê–ú–ò:")
    cursor.execute("""
        SELECT fp.id, fp.topic_id, fp.content, fp.created_at,
               u.first_name, u.last_name
        FROM forum_posts fp
        LEFT JOIN "user" u ON fp.author_id = u.id
        ORDER BY fp.topic_id, fp.created_at
    """)
    
    posts = cursor.fetchall()
    
    if posts:
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}")
        
        current_topic = None
        for post in posts:
            post_id, topic_id, content, created_at, first_name, last_name = post
            author_name = f"{first_name} {last_name}".strip() if first_name and last_name else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            if current_topic != topic_id:
                print(f"\n   üìã –¢–µ–º–∞ ID {topic_id}:")
                current_topic = topic_id
            
            print(f"      üìù –ü–æ—Å—Ç ID {post_id}: {content[:50]}...")
            print(f"         –ê–≤—Ç–æ—Ä: {author_name}, –í—Ä–µ–º—è: {created_at}")
    else:
        print("   ‚ùå –ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã –æ—Ç–¥–µ–ª—å–Ω–æ
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –ü–û–°–¢–û–í –ü–û –¢–ï–ú–ê–ú:")
    print("-" * 40)
    
    for topic in topics:
        topic_id, title, category_id, created_at = topic
        
        cursor.execute("""
            SELECT COUNT(*) 
            FROM forum_posts 
            WHERE topic_id = %s AND is_deleted = false
        """, (topic_id,))
        
        post_count = cursor.fetchone()[0]
        print(f"   üìã –¢–µ–º–∞ ID {topic_id}: {post_count} –ø–æ—Å—Ç–æ–≤")
        
        if post_count > 0:
            cursor.execute("""
                SELECT fp.id, fp.content, fp.created_at,
                       u.first_name, u.last_name
                FROM forum_posts fp
                LEFT JOIN "user" u ON fp.author_id = u.id
                WHERE fp.topic_id = %s AND fp.is_deleted = false
                ORDER BY fp.created_at
                LIMIT 3
            """, (topic_id,))
            
            sample_posts = cursor.fetchall()
            
            for post in sample_posts:
                post_id, content, post_created_at, first_name, last_name = post
                author_name = f"{first_name} {last_name}".strip() if first_name and last_name else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                print(f"      üìù –ü–æ—Å—Ç ID {post_id}: {content[:30]}... (–ê–≤—Ç–æ—Ä: {author_name})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ—Å—Ç—ã —Å is_deleted = true
    print("\nüóëÔ∏è –ü–†–û–í–ï–†–ö–ê –£–î–ê–õ–ï–ù–ù–´–• –ü–û–°–¢–û–í:")
    cursor.execute("""
        SELECT COUNT(*) 
        FROM forum_posts 
        WHERE is_deleted = true
    """)
    
    deleted_count = cursor.fetchone()[0]
    print(f"   –£–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {deleted_count}")
    
    if deleted_count > 0:
        cursor.execute("""
            SELECT fp.id, fp.topic_id, fp.content, fp.created_at
            FROM forum_posts fp
            WHERE fp.is_deleted = true
            ORDER BY fp.topic_id, fp.created_at
            LIMIT 5
        """)
        
        deleted_posts = cursor.fetchall()
        print("   –ü—Ä–∏–º–µ—Ä—ã —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤:")
        
        for post in deleted_posts:
            post_id, topic_id, content, created_at = post
            print(f"      üìù –ü–æ—Å—Ç ID {post_id} (–¢–µ–º–∞ {topic_id}): {content[:30]}...")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –û–¢–õ–ê–î–ö–ê –°–í–Ø–ó–ò –ü–û–°–¢–û–í –ò –¢–ï–ú")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not os.environ.get('DATABASE_URL'):
        print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return False
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = get_production_db_connection()
    if not conn:
        return False
    
    try:
        debug_posts_topics(conn)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
        
    finally:
        conn.close()
        print("\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

if __name__ == "__main__":
    main()
