#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤ –¥–æ–º–µ–Ω–æ–≤ –¥–æ 100%
"""

from app import app
from models import BIGDomain
from extensions import db
from sqlalchemy import text
import json

def fix_domain_weights():
    with app.app_context():
        print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –í–ï–°–û–í –î–û–ú–ï–ù–û–í")
        print("=" * 50)
        
        # 1. –ê—É–¥–∏—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        domains = BIGDomain.query.filter_by(is_active=True).all()
        total_weight = sum(d.weight_percentage for d in domains)
        print(f"üìä –¢–µ–∫—É—â–∏–π –æ–±—â–∏–π –≤–µ—Å: {total_weight:.1f}%")
        
        # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–µ—Å–∞
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–æ–º–µ–Ω—ã (85% –æ—Ç –æ–±—â–µ–≥–æ –≤–µ—Å–∞)
        critical_weights = {
            'THER': 12.0,              # –¢–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è
            'PRACTICAL_SKILLS': 12.0,  # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏
            'TREATMENT_PLANNING': 10.0, # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–µ—á–µ–Ω–∏—è
            'SURG': 8.0,               # –•–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è
            'EMERGENCY': 8.0,          # –ù–µ–æ—Ç–ª–æ–∂–Ω–∞—è –ø–æ–º–æ—â—å
            'DIAGNOSIS': 8.0,          # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            'PHARMA': 6.0,             # –§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è
            'COMMUNICATION': 6.0,      # –ö–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
            'SYSTEMIC': 5.0,           # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
            'STATISTICS': 5.0,         # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            'RESEARCH_METHOD': 5.0     # –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è
        }
        
        # –ù–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–æ–º–µ–Ω—ã (15% –æ—Ç –æ–±—â–µ–≥–æ –≤–µ—Å–∞)
        non_critical_domains = [
            'PROTH', 'PEDI', 'PARO', 'ORTHO', 'PREV', 'ANATOMIE', 'FYSIOLOGIE',
            'PATHOLOGIE', 'MICROBIOLOGIE', 'MATERIAALKUNDE', 'RADIOLOGIE',
            'ALGEMENE_GENEESKUNDE', 'INFECTION', 'SPECIAL', 'DUTCH', 'PROFESSIONAL', 'ETHIEK'
        ]
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º 15% –º–µ–∂–¥—É –Ω–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–æ–º–µ–Ω–∞–º–∏
        non_critical_weight = 15.0 / len(non_critical_domains)
        
        print(f"üìã –ü–ª–∞–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        print(f"   ‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–æ–º–µ–Ω–æ–≤: {len(critical_weights)} (85%)")
        print(f"   ‚Ä¢ –ù–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–æ–º–µ–Ω–æ–≤: {len(non_critical_domains)} (15%)")
        print(f"   ‚Ä¢ –í–µ—Å –Ω–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–º–µ–Ω–∞: {non_critical_weight:.2f}%")
        
        # 3. –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å–∞
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–æ–º–µ–Ω—ã
            for code, weight in critical_weights.items():
                db.session.execute(text(
                    "UPDATE big_domain SET weight_percentage = :weight WHERE code = :code"
                ), {'weight': weight, 'code': code})
                print(f"‚úÖ {code}: {weight:.1f}%")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–æ–º–µ–Ω—ã
            for code in non_critical_domains:
                db.session.execute(text(
                    "UPDATE big_domain SET weight_percentage = :weight WHERE code = :code"
                ), {'weight': non_critical_weight, 'code': code})
                print(f"‚úÖ {code}: {non_critical_weight:.2f}%")
            
            db.session.commit()
            print("\n‚úÖ –í–µ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
            db.session.rollback()
            return
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
        print("=" * 50)
        
        domains = BIGDomain.query.filter_by(is_active=True).all()
        total_weight = sum(d.weight_percentage for d in domains)
        print(f"–û–±—â–∏–π –≤–µ—Å: {total_weight:.1f}%")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for domain in domains:
            cat = domain.category or 'UNCATEGORIZED'
            if cat not in categories:
                categories[cat] = []
            categories[cat].append(domain)
        
        for category, domain_list in categories.items():
            cat_weight = sum(d.weight_percentage for d in domain_list)
            print(f"\nüìã {category} ({len(domain_list)} –¥–æ–º–µ–Ω–æ–≤, {cat_weight:.1f}%):")
            for domain in sorted(domain_list, key=lambda x: x.weight_percentage, reverse=True):
                critical = "‚≠ê" if domain.is_critical else "  "
                print(f"   {critical} {domain.code:15} | {domain.name:35} | {domain.weight_percentage:5.1f}%")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–æ–º–µ–Ω—ã
        critical = [d for d in domains if d.is_critical]
        critical_weight = sum(d.weight_percentage for d in critical)
        print(f"\n‚≠ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –î–û–ú–ï–ù–´ ({len(critical)} –¥–æ–º–µ–Ω–æ–≤, {critical_weight:.1f}%):")
        for domain in sorted(critical, key=lambda x: x.weight_percentage, reverse=True):
            print(f"   {domain.code:15} | {domain.name:35} | {domain.weight_percentage:5.1f}%")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if abs(total_weight - 100.0) < 0.1:
            print(f"\n‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–†–û–ô–î–ï–ù–ê: –û–±—â–∏–π –≤–µ—Å = {total_weight:.1f}%")
        else:
            print(f"\n‚ùå –í–ê–õ–ò–î–ê–¶–ò–Ø –ù–ï –ü–†–û–ô–î–ï–ù–ê: –û–±—â–∏–π –≤–µ—Å = {total_weight:.1f}% (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 100%)")

if __name__ == "__main__":
    fix_domain_weights() 