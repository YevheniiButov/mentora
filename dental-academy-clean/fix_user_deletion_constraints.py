#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import app, db
from sqlalchemy import text

def fix_foreign_key_constraints():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π"""
    
    with app.app_context():
        try:
            print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π...")
            
            # 1. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
            print("1Ô∏è‚É£ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ foreign key...")
            db.session.execute(text("""
                ALTER TABLE registration_visitors 
                DROP CONSTRAINT IF EXISTS registration_visitors_user_id_fkey
            """))
            
            # 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å CASCADE
            print("2Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å CASCADE...")
            db.session.execute(text("""
                ALTER TABLE registration_visitors 
                ADD CONSTRAINT registration_visitors_user_id_fkey 
                FOREIGN KEY (user_id) REFERENCES "user"(id) 
                ON DELETE CASCADE
            """))
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥—Ä—É–≥–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∫–ª—é—á–∞–º–∏ –Ω–∞ user.id
            print("3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –≤–Ω–µ—à–Ω–∏–º–∏ –∫–ª—é—á–∞–º–∏...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π, —Å—Å—ã–ª–∞—é—â–∏—Ö—Å—è –Ω–∞ —Ç–∞–±–ª–∏—Ü—É user
            result = db.session.execute(text("""
                SELECT 
                    tc.table_name, 
                    kcu.column_name, 
                    ccu.table_name AS foreign_table_name,
                    ccu.column_name AS foreign_column_name,
                    tc.constraint_name
                FROM 
                    information_schema.table_constraints AS tc 
                    JOIN information_schema.key_column_usage AS kcu
                      ON tc.constraint_name = kcu.constraint_name
                      AND tc.table_schema = kcu.table_schema
                    JOIN information_schema.constraint_column_usage AS ccu
                      ON ccu.constraint_name = tc.constraint_name
                      AND ccu.table_schema = tc.table_schema
                WHERE tc.constraint_type = 'FOREIGN KEY' 
                AND ccu.table_name = 'user'
                AND ccu.column_name = 'id'
            """))
            
            foreign_keys = result.fetchall()
            
            if foreign_keys:
                print("üìã –ù–∞–π–¥–µ–Ω—ã –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏, —Å—Å—ã–ª–∞—é—â–∏–µ—Å—è –Ω–∞ user.id:")
                for fk in foreign_keys:
                    table_name, column_name, foreign_table, foreign_column, constraint_name = fk
                    print(f"   üìä {table_name}.{column_name} -> {foreign_table}.{foreign_column} ({constraint_name})")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                    if table_name != 'registration_visitors':  # –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –≤—ã—à–µ
                        try:
                            print(f"   üîß –û–±–Ω–æ–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è {table_name}...")
                            db.session.execute(text(f"""
                                ALTER TABLE {table_name} 
                                DROP CONSTRAINT IF EXISTS {constraint_name}
                            """))
                            db.session.execute(text(f"""
                                ALTER TABLE {table_name} 
                                ADD CONSTRAINT {constraint_name} 
                                FOREIGN KEY ({column_name}) REFERENCES {foreign_table}({foreign_column}) 
                                ON DELETE CASCADE
                            """))
                            print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è {table_name}")
                        except Exception as e:
                            print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è {table_name}: {e}")
            else:
                print("‚ÑπÔ∏è –î—Ä—É–≥–∏—Ö –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            db.session.commit()
            print("üíæ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
            print("‚úÖ –ö–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            print("‚ÑπÔ∏è –¢–µ–ø–µ—Ä—å –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            db.session.rollback()
            return False

def test_cascade_deletion():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ (—Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)"""
    
    with app.app_context():
        try:
            print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è...")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from models import User, RegistrationVisitor
            from datetime import datetime
            
            test_user = User(
                email="test_cascade@example.com",
                password_hash="test_hash",
                first_name="Test",
                last_name="User"
            )
            db.session.add(test_user)
            db.session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –±–µ–∑ –∫–æ–º–º–∏—Ç–∞
            
            user_id = test_user.id
            print(f"üë§ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}")
            
            # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –≤ registration_visitors
            visitor = RegistrationVisitor(
                ip_address="127.0.0.1",
                page_type="test",
                entry_time=datetime.utcnow(),
                user_id=user_id,
                email_entered="test_cascade@example.com"
            )
            db.session.add(visitor)
            db.session.commit()
            
            visitor_id = visitor.id
            print(f"üìä –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å visitor ID: {visitor_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å–∏ —Å–æ–∑–¥–∞–Ω—ã
            user_check = User.query.get(user_id)
            visitor_check = RegistrationVisitor.query.get(visitor_id)
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {user_check is not None}")
            print(f"‚úÖ –ó–∞–ø–∏—Å—å visitor —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {visitor_check is not None}")
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            print("üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            db.session.delete(user_check)
            db.session.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã
            user_check = User.query.get(user_id)
            visitor_check = RegistrationVisitor.query.get(visitor_id)
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω: {user_check is None}")
            print(f"‚úÖ –ó–∞–ø–∏—Å—å visitor —É–¥–∞–ª–µ–Ω–∞: {visitor_check is None}")
            
            if user_check is None and visitor_check is None:
                print("üéâ –ö–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                return True
            else:
                print("‚ùå –ö–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            db.session.rollback()
            return False

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "test":
        test_cascade_deletion()
    else:
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è...")
        success = fix_foreign_key_constraints()
        if success:
            print("\nüß™ –•–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å? –ó–∞–ø—É—Å—Ç–∏—Ç–µ:")
            print("   python fix_user_deletion_constraints.py test")
        else:
            print("üí• –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ")
            sys.exit(1)
