#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ü–µ–ª–µ–≤—ã–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º
"""

from app import app
from models import BIGDomain
from extensions import db
from sqlalchemy import text

def final_weight_adjustment():
    with app.app_context():
        print("üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –í–ï–°–û–í")
        print("=" * 50)
        
        # –¶–µ–ª–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
        # THEORETICAL: 70% (22 –¥–æ–º–µ–Ω–∞)
        # METHODOLOGY: 10% (2 –¥–æ–º–µ–Ω–∞) 
        # PRACTICAL: 15% (1 –¥–æ–º–µ–Ω)
        # CLINICAL: 5% (3 –¥–æ–º–µ–Ω–∞)
        
        # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:
        # THEORETICAL: 77.1% (24 –¥–æ–º–µ–Ω–∞) - –Ω—É–∂–Ω–æ —É–º–µ–Ω—å—à–∏—Ç—å –Ω–∞ 7.1%
        # METHODOLOGY: 10.0% (2 –¥–æ–º–µ–Ω–∞) - OK
        # PRACTICAL: 12.0% (1 –¥–æ–º–µ–Ω) - –Ω—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞ 3%
        # CLINICAL: 0.9% (1 –¥–æ–º–µ–Ω) - –Ω—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞ 4.1%
        
        print("üìã –ü–ª–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏:")
        print("   ‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç—å THEORETICAL –Ω–∞ 7.1%")
        print("   ‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å PRACTICAL –Ω–∞ 3%")
        print("   ‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å CLINICAL –Ω–∞ 4.1%")
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤–µ—Å–∞
        try:
            # –£–º–µ–Ω—å—à–∞–µ–º –≤–µ—Å–∞ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–æ–º–µ–Ω–æ–≤ (–∫—Ä–æ–º–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö)
            theoretical_non_critical = [
                'PROTH', 'PEDI', 'PARO', 'ORTHO', 'PREV', 'ANATOMIE', 'FYSIOLOGIE',
                'PATHOLOGIE', 'MICROBIOLOGIE', 'MATERIAALKUNDE', 'RADIOLOGIE',
                'ALGEMENE_GENEESKUNDE', 'INFECTION', 'SPECIAL', 'DUTCH', 'PROFESSIONAL'
            ]
            
            # –£–º–µ–Ω—å—à–∞–µ–º –≤–µ—Å –Ω–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–æ–º–µ–Ω–æ–≤
            new_theoretical_weight = 0.3  # –ë—ã–ª–æ 0.88, —É–º–µ–Ω—å—à–∞–µ–º –¥–æ 0.3
            for code in theoretical_non_critical:
                db.session.execute(text(
                    "UPDATE big_domain SET weight_percentage = :weight WHERE code = :code"
                ), {'weight': new_theoretical_weight, 'code': code})
                print(f"‚úÖ {code}: {new_theoretical_weight:.1f}%")
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Å PRACTICAL_SKILLS
            db.session.execute(text(
                "UPDATE big_domain SET weight_percentage = 15.0 WHERE code = 'PRACTICAL_SKILLS'"
            ))
            print("‚úÖ PRACTICAL_SKILLS: 15.0%")
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Å ETHIEK
            db.session.execute(text(
                "UPDATE big_domain SET weight_percentage = 5.0 WHERE code = 'ETHIEK'"
            ))
            print("‚úÖ ETHIEK: 5.0%")
            
            db.session.commit()
            print("\n‚úÖ –í–µ—Å–∞ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–µ: {e}")
            db.session.rollback()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("\nüìä –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print("=" * 50)
        
        domains = BIGDomain.query.filter_by(is_active=True).all()
        total_weight = sum(d.weight_percentage for d in domains)
        print(f"–û–±—â–∏–π –≤–µ—Å: {total_weight:.1f}%")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for domain in domains:
            cat = domain.category or 'UNCATEGORIZED'
            if cat not in categories:
                categories[cat] = []
            categories[cat].append(domain)
        
        for category, domain_list in categories.items():
            cat_weight = sum(d.weight_percentage for d in domain_list)
            print(f"\nüìã {category} ({len(domain_list)} –¥–æ–º–µ–Ω–æ–≤, {cat_weight:.1f}%):")
            for domain in sorted(domain_list, key=lambda x: x.weight_percentage, reverse=True):
                critical = "‚≠ê" if domain.is_critical else "  "
                print(f"   {critical} {domain.code:15} | {domain.name:35} | {domain.weight_percentage:5.1f}%")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–ª–µ–≤—ã–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º
        print(f"\nüéØ –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –¶–ï–õ–ï–í–´–ú –ü–û–ö–ê–ó–ê–¢–ï–õ–Ø–ú:")
        theoretical_weight = sum(d.weight_percentage for d in domains if d.category == 'THEORETICAL')
        methodology_weight = sum(d.weight_percentage for d in domains if d.category == 'METHODOLOGY')
        practical_weight = sum(d.weight_percentage for d in domains if d.category == 'PRACTICAL')
        clinical_weight = sum(d.weight_percentage for d in domains if d.category == 'CLINICAL')
        
        print(f"   ‚Ä¢ THEORETICAL: {theoretical_weight:.1f}% (—Ü–µ–ª—å: 70%) {'‚úÖ' if abs(theoretical_weight - 70) < 1 else '‚ùå'}")
        print(f"   ‚Ä¢ METHODOLOGY: {methodology_weight:.1f}% (—Ü–µ–ª—å: 10%) {'‚úÖ' if abs(methodology_weight - 10) < 1 else '‚ùå'}")
        print(f"   ‚Ä¢ PRACTICAL: {practical_weight:.1f}% (—Ü–µ–ª—å: 15%) {'‚úÖ' if abs(practical_weight - 15) < 1 else '‚ùå'}")
        print(f"   ‚Ä¢ CLINICAL: {clinical_weight:.1f}% (—Ü–µ–ª—å: 5%) {'‚úÖ' if abs(clinical_weight - 5) < 1 else '‚ùå'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–µ–Ω–æ–≤
        theoretical_count = len([d for d in domains if d.category == 'THEORETICAL'])
        methodology_count = len([d for d in domains if d.category == 'METHODOLOGY'])
        practical_count = len([d for d in domains if d.category == 'PRACTICAL'])
        clinical_count = len([d for d in domains if d.category == 'CLINICAL'])
        
        print(f"\nüìä –ö–û–õ–ò–ß–ï–°–¢–í–û –î–û–ú–ï–ù–û–í:")
        print(f"   ‚Ä¢ THEORETICAL: {theoretical_count} (—Ü–µ–ª—å: 22) {'‚úÖ' if theoretical_count == 22 else '‚ùå'}")
        print(f"   ‚Ä¢ METHODOLOGY: {methodology_count} (—Ü–µ–ª—å: 2) {'‚úÖ' if methodology_count == 2 else '‚ùå'}")
        print(f"   ‚Ä¢ PRACTICAL: {practical_count} (—Ü–µ–ª—å: 1) {'‚úÖ' if practical_count == 1 else '‚ùå'}")
        print(f"   ‚Ä¢ CLINICAL: {clinical_count} (—Ü–µ–ª—å: 3) {'‚úÖ' if clinical_count == 3 else '‚ùå'}")
        print(f"   ‚Ä¢ –í–°–ï–ì–û: {len(domains)} –¥–æ–º–µ–Ω–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–æ–º–µ–Ω—ã
        critical = [d for d in domains if d.is_critical]
        critical_weight = sum(d.weight_percentage for d in critical)
        print(f"\n‚≠ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –î–û–ú–ï–ù–´ ({len(critical)} –¥–æ–º–µ–Ω–æ–≤, {critical_weight:.1f}%):")
        for domain in sorted(critical, key=lambda x: x.weight_percentage, reverse=True):
            print(f"   {domain.code:15} | {domain.name:35} | {domain.weight_percentage:5.1f}%")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if abs(total_weight - 100.0) < 0.1:
            print(f"\n‚úÖ –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–†–û–ô–î–ï–ù–ê: –û–±—â–∏–π –≤–µ—Å = {total_weight:.1f}%")
        else:
            print(f"\n‚ùå –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –ù–ï –ü–†–û–ô–î–ï–ù–ê: –û–±—â–∏–π –≤–µ—Å = {total_weight:.1f}% (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 100%)")

if __name__ == "__main__":
    final_weight_adjustment() 