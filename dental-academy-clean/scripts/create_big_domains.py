#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤ BIG –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
–ß–∏—Ç–∞–µ—Ç –¥–æ–º–µ–Ω—ã –∏–∑ domains_config.json (30 –¥–æ–º–µ–Ω–æ–≤)
"""
import os
import sys
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app import app
from models import db, BIGDomain

def create_big_domains():
    """–°–æ–∑–¥–∞–µ—Ç –¥–æ–º–µ–Ω—ã BIG –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    
    with app.app_context():
        try:
            print("üèóÔ∏è –°–æ–∑–¥–∞–µ–º –¥–æ–º–µ–Ω—ã BIG...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–æ–º–µ–Ω—ã
            existing_domains = BIGDomain.query.count()
            if existing_domains > 0:
                print(f"‚úÖ –î–æ–º–µ–Ω—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç ({existing_domains}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ")
                return
            
            # –ß–∏—Ç–∞–µ–º –¥–æ–º–µ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            config_file = Path(__file__).parent / 'unified_system' / 'domains_config.json'
            
            if not config_file.exists():
                print(f"‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_file}")
                print("üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä –¥–æ–º–µ–Ω–æ–≤...")
                domains_data = get_basic_domains()
            else:
                print(f"üìñ –ß–∏—Ç–∞–µ–º –¥–æ–º–µ–Ω—ã –∏–∑: {config_file}")
                with open(config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    domains_data = config.get('domains', [])
                    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(domains_data)} –¥–æ–º–µ–Ω–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            
            created_count = 0
            for domain_data in domains_data:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º weight –≤–º–µ—Å—Ç–æ weight_percentage –µ—Å–ª–∏ –µ—Å—Ç—å
                weight = domain_data.get('weight', domain_data.get('weight_percentage', 5.0))
                
                domain = BIGDomain(
                    code=domain_data['code'],
                    name=domain_data.get('name_nl') or domain_data.get('name'),
                    description=domain_data.get('description', ''),
                    weight_percentage=weight,
                    category=domain_data.get('category', 'THEORETICAL'),
                    exam_type=domain_data.get('exam_type', 'multiple_choice'),
                    is_critical=domain_data.get('is_critical', False)
                )
                db.session.add(domain)
                created_count += 1
                print(f"   ‚úÖ {domain_data['code']}: {domain.name}")
            
            db.session.commit()
            print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω–æ {created_count} –¥–æ–º–µ–Ω–æ–≤ BIG!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤: {str(e)}")
            import traceback
            traceback.print_exc()
            db.session.rollback()
            sys.exit(1)

def get_basic_domains():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä –∏–∑ 15 –¥–æ–º–µ–Ω–æ–≤ –µ—Å–ª–∏ JSON –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
    return [
        {'code': 'THER', 'name': 'Therapeutische stomatologie', 'weight': 15.0, 'is_critical': True},
        {'code': 'SURG', 'name': 'Chirurgische stomatologie', 'weight': 12.0, 'is_critical': True},
        {'code': 'PROTH', 'name': 'Prothetische stomatologie', 'weight': 12.0, 'is_critical': True},
        {'code': 'PEDI', 'name': 'Pediatrische stomatologie', 'weight': 10.0, 'is_critical': True},
        {'code': 'PARO', 'name': 'Parodontologie', 'weight': 10.0, 'is_critical': True},
        {'code': 'ORTHO', 'name': 'Orthodontie', 'weight': 8.0, 'is_critical': True},
        {'code': 'PREV', 'name': 'Preventie', 'weight': 8.0, 'is_critical': True},
        {'code': 'ETHIEK', 'name': 'Ethiek en recht', 'weight': 5.0, 'is_critical': False},
        {'code': 'ANATOMIE', 'name': 'Anatomie', 'weight': 5.0, 'is_critical': False},
        {'code': 'FYSIOLOGIE', 'name': 'Fysiologie', 'weight': 5.0, 'is_critical': False},
        {'code': 'PATHOLOGIE', 'name': 'Pathologie', 'weight': 5.0, 'is_critical': False},
        {'code': 'MICROBIOLOGIE', 'name': 'Microbiologie', 'weight': 5.0, 'is_critical': False},
        {'code': 'MATERIAALKUNDE', 'name': 'Materiaalkunde', 'weight': 3.0, 'is_critical': False},
        {'code': 'RADIOLOGIE', 'name': 'Radiologie', 'weight': 4.0, 'is_critical': False},
        {'code': 'ALGEMENE_GENEESKUNDE', 'name': 'Algemene geneeskunde', 'weight': 3.0, 'is_critical': False}
    ]

if __name__ == "__main__":
    create_big_domains()
