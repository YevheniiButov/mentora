#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —É—Å–ª–æ–≤–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import app, db
from models import BIGDomain, Question, DiagnosticSession, User, DiagnosticResponse
from utils.irt_engine import IRTEngine
from datetime import datetime, timezone
import json

def debug_termination_conditions():
    """–û—Ç–ª–∞–¥–∫–∞ —É—Å–ª–æ–≤–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    
    print("üîç –û–¢–õ–ê–î–ö–ê –£–°–õ–û–í–ò–ô –ó–ê–í–ï–†–®–ï–ù–ò–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
    print("=" * 60)
    
    with app.app_context():
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é
        test_user = User.query.first()
        if not test_user:
            print("   ‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é —Å–µ—Å—Å–∏—é —Ç–∏–ø–∞ 'readiness'
        session = DiagnosticSession(
            user_id=test_user.id,
            session_type='diagnostic',
            test_length=130,
            time_limit=60,
            current_ability=0.0,
            ability_se=1.0,
            questions_answered=0,
            correct_answers=0,
            status='active',
            started_at=datetime.now(timezone.utc)
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ç–∏–ø–∞ 'readiness'
        session_data = {
            'diagnostic_type': 'readiness',
            'max_questions': 130
        }
        session.session_data = json.dumps(session_data)
        
        db.session.add(session)
        db.session.commit()
        
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è ID: {session.id}")
        print(f"   üìä –¢–∏–ø –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: readiness (130 –≤–æ–ø—Ä–æ—Å–æ–≤)")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º IRT Engine
        irt_engine = IRTEngine(session, diagnostic_type='readiness')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        print(f"\nüîç –ù–ê–ß–ê–õ–¨–ù–´–ï –£–°–õ–û–í–ò–Ø:")
        termination_info = irt_engine._check_termination_conditions(session)
        print(f"   should_terminate: {termination_info['should_terminate']}")
        print(f"   reason: {termination_info['reason']}")
        print(f"   message: {termination_info['message']}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
        for i in range(1, 6):  # 5 –≤–æ–ø—Ä–æ—Å–æ–≤
            print(f"\nüîç –û–¢–í–ï–¢ {i}:")
            
            # –í—ã–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å
            if i == 1:
                question = irt_engine.select_initial_question()
            else:
                question = irt_engine.select_next_question()
            
            if not question:
                print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –≤–æ–ø—Ä–æ—Å {i}")
                break
            
            print(f"   –í–æ–ø—Ä–æ—Å: ID {question.id} - {question.category}")
            print(f"   –î–æ–º–µ–Ω: {question.big_domain.code if question.big_domain else '–ù–µ—Ç –¥–æ–º–µ–Ω–∞'}")
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = DiagnosticResponse(
                session_id=session.id,
                question_id=question.id,
                selected_answer="A",
                is_correct=True,
                response_time=30.0,
                responded_at=datetime.now(timezone.utc)
            )
            db.session.add(response)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
            session.questions_answered = i
            session.correct_answers = i
            session.current_ability = 0.5
            session.ability_se = 1.0 - (i * 0.1)  # –£–º–µ–Ω—å—à–∞–µ–º SE —Å –∫–∞–∂–¥—ã–º –æ—Ç–≤–µ—Ç–æ–º
            db.session.commit()
            
            print(f"   –û—Ç–≤–µ—Ç–æ–≤: {session.questions_answered}")
            print(f"   Ability: {session.current_ability:.3f}")
            print(f"   SE: {session.ability_se:.3f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            termination_info = irt_engine._check_termination_conditions(session)
            print(f"   should_terminate: {termination_info['should_terminate']}")
            print(f"   reason: {termination_info['reason']}")
            print(f"   message: {termination_info['message']}")
            
            if termination_info['should_terminate']:
                print(f"   ‚ö†Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –ø–æ—Å–ª–µ {i} –≤–æ–ø—Ä–æ—Å–æ–≤!")
                break
        
        # –û—á–∏—Å—Ç–∫–∞
        db.session.delete(session)
        db.session.commit()
        
        print(f"\n‚úÖ –û—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

def check_domain_coverage():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –¥–æ–º–µ–Ω–æ–≤"""
    
    print(f"\nüìä –ü–†–û–í–ï–†–ö–ê –ü–û–ö–†–´–¢–ò–Ø –î–û–ú–ï–ù–û–í")
    print("=" * 60)
    
    with app.app_context():
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã
        domains = BIGDomain.query.filter_by(is_active=True).all()
        
        domains_with_questions = []
        total_questions = 0
        
        for domain in domains:
            questions_count = Question.query.filter_by(big_domain_id=domain.id).count()
            total_questions += questions_count
            
            if questions_count > 0:
                domains_with_questions.append(domain.code)
                print(f"   ‚Ä¢ {domain.code}: {questions_count} –≤–æ–ø—Ä–æ—Å–æ–≤")
            else:
                print(f"   ‚Ä¢ {domain.code}: 0 –≤–æ–ø—Ä–æ—Å–æ–≤ (–ø—É—Å—Ç–æ–π –¥–æ–º–µ–Ω)")
        
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –í—Å–µ–≥–æ –¥–æ–º–µ–Ω–æ–≤: {len(domains)}")
        print(f"   –î–æ–º–µ–Ω–æ–≤ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏: {len(domains_with_questions)}")
        print(f"   –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}")
        print(f"   –ú–∏–Ω–∏–º—É–º –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è: {len(domains_with_questions)} (–ø–æ 1 –Ω–∞ –¥–æ–º–µ–Ω)")

if __name__ == "__main__":
    debug_termination_conditions()
    check_domain_coverage() 