#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ - –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏—Ö –∫ –¥–æ–º–µ–Ω–∞–º BIG
"""
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app import app
from models import db, Question, BIGDomain

def get_big_domain_id_by_code(domain_code):
    """–ü–æ–ª—É—á–∏—Ç—å ID –¥–æ–º–µ–Ω–∞ BIG –ø–æ –∫–æ–¥—É - –∏—â–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –≤ –ë–î"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Ç–æ—á–Ω–æ–º—É –∫–æ–¥—É
    domain = BIGDomain.query.filter_by(code=domain_code).first()
    if domain:
        return domain.id
    
    # Fallback: —Å—Ç–∞—Ä—ã–µ –∫–æ–¥—ã –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è, –ø—Ä–æ–±—É–µ–º –º–∞–ø–ø–∏–Ω–≥
    legacy_mapping = {
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –¥–æ–º–µ–Ω—ã
        'THER': 'THERAPEUTIC_DENTISTRY',
        'SURG': 'SURGICAL_DENTISTRY',
        'PROTH': 'PROSTHODONTICS',
        'PEDI': 'PEDIATRIC_DENTISTRY',
        'PARO': 'PERIODONTOLOGY',
        'ORTHO': 'ORTHODONTICS',
        'PREV': 'PREVENTIVE_DENTISTRY',
        
        # –ë–∞–∑–æ–≤—ã–µ –Ω–∞—É–∫–∏
        'ANATOMIE': 'ANATOMY',
        'FYSIOLOGIE': 'PHYSIOLOGY',
        'PATHOLOGIE': 'PATHOLOGY',
        'MICROBIOLOGIE': 'MICROBIOLOGY',
        'MATERIAALKUNDE': 'MATERIALS_SCIENCE',
        'RADIOLOGIE': 'RADIOLOGY',
        
        # –§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è –∏ –º–µ–¥–∏—Ü–∏–Ω–∞
        'FARMACOLOGIE': 'PHARMACOLOGY',
        'PHARMA': 'PHARMACOLOGY',
        'ALGEMENE_GENEESKUNDE': 'GENERAL_MEDICINE',
        'EMERGENCY': 'EMERGENCY_MEDICINE',
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –∏ –∏–Ω—Ñ–µ–∫—Ü–∏–∏
        'SYSTEMIC': 'SYSTEMIC_DISEASES',
        'INFECTION': 'INFECTIOUS_DISEASES',
        'INFECTIOUS': 'INFECTIOUS_DISEASES',
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        'SPECIAL': 'SPECIAL_CASES',
        'DIAGNOSIS': 'DIAGNOSTICS',
        'DIAGNOSIS_SPECIAL': 'SPECIAL_DIAGNOSTICS',
        
        # –ì–æ–ª–ª–∞–Ω–¥—Å–∫–æ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∏ —ç—Ç–∏–∫–∞
        'DUTCH': 'DUTCH_DENTISTRY',
        'ETHIEK': 'ETHICS_NL',
        'PROFESSIONAL': 'PROFESSIONAL_ETHICS',
        'PROFESSIONAL_ETHIEK': 'PROFESSIONAL_ETHICS'
    }
    
    new_code = legacy_mapping.get(domain_code)
    if new_code:
        domain = BIGDomain.query.filter_by(code=new_code).first()
        return domain.id if domain else None
    
    return None

def update_questions_domains():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã - –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∏—Ö –∫ –¥–æ–º–µ–Ω–∞–º BIG"""
    
    with app.app_context():
        try:
            print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ –¥–æ–º–µ–Ω–∞–º BIG...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–º–µ–Ω–æ–≤
            domains_count = BIGDomain.query.count()
            if domains_count == 0:
                print("‚ùå –î–æ–º–µ–Ω—ã BIG –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: flask create-domains")
                sys.exit(1)
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {domains_count} –¥–æ–º–µ–Ω–æ–≤ BIG")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –¥–æ–º–µ–Ω–∞–º
            questions = Question.query.filter_by(big_domain_id=None).all()
            total_questions = len(questions)
            
            if total_questions == 0:
                print("‚úÖ –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –¥–æ–º–µ–Ω–∞–º!")
                return
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ {total_questions} –≤–æ–ø—Ä–æ—Å–æ–≤ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –¥–æ–º–µ–Ω–∞–º")
            
            updated_count = 0
            skipped_count = 0
            
            for question in questions:
                if question.domain:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–¥ –¥–æ–º–µ–Ω–∞
                    big_domain_id = get_big_domain_id_by_code(question.domain)
                    if big_domain_id:
                        question.big_domain_id = big_domain_id
                        updated_count += 1
                        
                        if updated_count % 50 == 0:
                            print(f"   üìù –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count}/{total_questions} –≤–æ–ø—Ä–æ—Å–æ–≤...")
                    else:
                        print(f"   ‚ö†Ô∏è –î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–æ–¥–∞: {question.domain}")
                        skipped_count += 1
                else:
                    print(f"   ‚ö†Ô∏è –í–æ–ø—Ä–æ—Å {question.id} –Ω–µ –∏–º–µ–µ—Ç –∫–æ–¥–∞ –¥–æ–º–µ–Ω–∞")
                    skipped_count += 1
            
            db.session.commit()
            print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} –≤–æ–ø—Ä–æ—Å–æ–≤!")
            if skipped_count > 0:
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ {skipped_count} –≤–æ–ø—Ä–æ—Å–æ–≤ (–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ–º–µ–Ω)")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–æ–º–µ–Ω–∞–º
            print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –î–û–ú–ï–ù–ê–ú:")
            for domain in BIGDomain.query.all():
                questions_count = Question.query.filter_by(big_domain_id=domain.id).count()
                print(f"   {domain.code} ({domain.name}): {questions_count} –≤–æ–ø—Ä–æ—Å–æ–≤")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –±–µ–∑ –¥–æ–º–µ–Ω–∞
            no_domain_count = Question.query.filter_by(big_domain_id=None).count()
            if no_domain_count > 0:
                print(f"\n‚ö†Ô∏è –í–æ–ø—Ä–æ—Å–æ–≤ –±–µ–∑ –¥–æ–º–µ–Ω–∞: {no_domain_count}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
            db.session.rollback()
            sys.exit(1)

if __name__ == "__main__":
    update_questions_domains()

