#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞ –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤
–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–∂–¥–æ–º—É –¥–æ–º–µ–Ω—É –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ 160_2.json
"""

import json
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import app
from models import BIGDomain, Question
from extensions import db

def load_160_2_data():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ 160_2.json"""
    
    file_path = os.path.join(os.path.dirname(__file__), '160_2.json')
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–æ–º–µ–Ω–∞–º
        questions_by_domain = {}
        
        for question in data:
            domain = question.get('domain')
            if domain:
                if domain not in questions_by_domain:
                    questions_by_domain[domain] = []
                questions_by_domain[domain].append(question)
        
        return questions_by_domain
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ 160_2.json: {e}")
        return {}

def fix_all_domain_mappings():
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤"""
    
    print('üîß –ü–û–õ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ê–ü–ü–ò–ù–ì–ê –í–°–ï–• –î–û–ú–ï–ù–û–í')
    print('=' * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
    questions_by_domain = load_160_2_data()
    
    if not questions_by_domain:
        print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞')
        return False
    
    print(f'üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(questions_by_domain)} –¥–æ–º–µ–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞')
    
    with app.app_context():
        total_fixed = 0
        
        for domain_code, questions in questions_by_domain.items():
            print(f'\nüìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞: {domain_code} ({len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤)')
            
            # –ù–∞–π–¥–µ–º –¥–æ–º–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            domain = BIGDomain.query.filter_by(code=domain_code).first()
            
            if not domain:
                print(f'   ‚ùå –î–æ–º–µ–Ω {domain_code} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î')
                continue
            
            print(f'   üìä –ù–∞–π–¥–µ–Ω –¥–æ–º–µ–Ω {domain_code} (ID: {domain.id})')
            
            # –ù–∞–π–¥–µ–º –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —ç—Ç–æ–º –¥–æ–º–µ–Ω–µ
            question_ids = [q['id'] for q in questions]
            
            # –ò—Å–ø—Ä–∞–≤–∏–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è —ç—Ç–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            fixed_in_domain = 0
            
            for question_id in question_ids:
                question = Question.query.get(question_id)
                
                if question:
                    old_domain_id = question.big_domain_id
                    old_domain_code = question.domain
                    
                    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥
                    question.big_domain_id = domain.id
                    question.domain = domain_code
                    
                    if old_domain_id != domain.id:
                        print(f'   ‚úÖ –í–æ–ø—Ä–æ—Å {question_id}: {old_domain_code} -> {domain_code}')
                        fixed_in_domain += 1
                        total_fixed += 1
                else:
                    print(f'   ‚ö†Ô∏è  –í–æ–ø—Ä–æ—Å {question_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î')
            
            print(f'   üìä –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –¥–æ–º–µ–Ω–µ {domain_code}: {fixed_in_domain} –≤–æ–ø—Ä–æ—Å–æ–≤')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        try:
            db.session.commit()
            print('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:')
            print(f'   –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_fixed}')
            return True
            
        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}')
            db.session.rollback()
            return False

def verify_fixes():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    
    print('\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í')
    print('=' * 40)
    
    with app.app_context():
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        questions_by_domain = load_160_2_data()
        
        print('üìä –°–†–ê–í–ù–ï–ù–ò–ï –° –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ú –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï–ú:')
        print(f'   {"–î–æ–º–µ–Ω":<20} {"–û—Ä–∏–≥–∏–Ω–∞–ª":<10} {"–í –ë–î":<10} {"–°—Ç–∞—Ç—É—Å":<10}')
        print('   ' + '-' * 50)
        
        total_original = 0
        total_in_db = 0
        
        for domain_code, questions in questions_by_domain.items():
            original_count = len(questions)
            total_original += original_count
            
            # –ù–∞–π–¥–µ–º –¥–æ–º–µ–Ω –≤ –ë–î
            domain = BIGDomain.query.filter_by(code=domain_code).first()
            
            if domain:
                db_count = Question.query.filter_by(big_domain_id=domain.id).count()
                total_in_db += db_count
                
                if db_count == original_count:
                    status = "‚úÖ"
                elif db_count > original_count:
                    status = "‚ö†Ô∏è+"
                else:
                    status = "‚ùå-"
                
                print(f'   {status} {domain_code:<17} {original_count:<10} {db_count:<10} {status:<10}')
            else:
                print(f'   ‚ùå {domain_code:<17} {original_count:<10} {"N/A":<10} {"N/A":<10}')
        
        print('   ' + '-' * 50)
        print(f'   {"–ò–¢–û–ì–û":<17} {total_original:<10} {total_in_db:<10}')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–º–µ–Ω—ã —Ç–æ–ª—å–∫–æ –≤ –ë–î
        print(f'\nüìã –î–û–ú–ï–ù–´ –¢–û–õ–¨–ö–û –í –ë–ê–ó–ï –î–ê–ù–ù–´–•:')
        db_domains = BIGDomain.query.filter_by(is_active=True).all()
        
        for domain in db_domains:
            if domain.code not in questions_by_domain:
                questions_count = Question.query.filter_by(big_domain_id=domain.id).count()
                print(f'   ‚Ä¢ {domain.code}: {questions_count} –≤–æ–ø—Ä–æ—Å–æ–≤')

if __name__ == '__main__':
    print('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞ –¥–æ–º–µ–Ω–æ–≤...')
    
    success = fix_all_domain_mappings()
    
    if success:
        verify_fixes()
        print('\n‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
    else:
        print('\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏!')


