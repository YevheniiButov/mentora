#!/usr/bin/env python3
"""
–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –¥–æ–º–µ–Ω—ã –∏ —Å–æ–∑–¥–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import app
from models import db, BIGDomain, Question, DiagnosticResponse, PersonalLearningPlan
import json
from datetime import datetime, timezone

def execute_domain_migration():
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–æ–º–µ–Ω–æ–≤"""
    
    with app.app_context():
        print("üöÄ –í–´–ü–û–õ–ù–ï–ù–ò–ï –ú–ò–ì–†–ê–¶–ò–ò –î–û–ú–ï–ù–û–í")
        print("=" * 50)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
        try:
            with open('analysis/domain_migration_strategy.json', 'r', encoding='utf-8') as f:
                strategy = json.load(f)
            migration_map = strategy['migration_map']
        except FileNotFoundError:
            print("‚ùå –§–∞–π–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ domain_migration_strategy.py")
            return
        
        print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–∞—Ä—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {len(migration_map)} –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π")
        
        # –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –¥–æ–º–µ–Ω–∞ PHARMACOLOGY
        print("\n1Ô∏è‚É£ –®–ê–ì 1: –°–û–ó–î–ê–ù–ò–ï –î–û–ú–ï–ù–ê PHARMACOLOGY")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ PHARMACOLOGY
        pharmacology_domain = BIGDomain.query.filter_by(code='PHARMACOLOGY').first()
        
        if not pharmacology_domain:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ–º–µ–Ω —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "–§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è"
            existing_pharma = BIGDomain.query.filter_by(name='–§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è').first()
            if existing_pharma:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ–º–µ–Ω
                existing_pharma.code = 'PHARMACOLOGY'
                existing_pharma.description = '–§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è –∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã –≤ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏'
                existing_pharma.weight_percentage = 8.0
                existing_pharma.category = 'THEORETICAL'
                existing_pharma.exam_type = 'multiple_choice'
                existing_pharma.is_critical = True
                pharmacology_domain = existing_pharma
                print("   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–æ–º–µ–Ω –§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è ‚Üí PHARMACOLOGY")
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω PHARMACOLOGY
                pharmacology_domain = BIGDomain(
                    name='–§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è (PHARMACOLOGY)',
                    code='PHARMACOLOGY',
                    description='–§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è –∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã –≤ —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏',
                    weight_percentage=8.0,
                    category='THEORETICAL',
                    exam_type='multiple_choice',
                    is_critical=True,
                    order=18
                )
                db.session.add(pharmacology_domain)
                print("   ‚úÖ –°–æ–∑–¥–∞–Ω –¥–æ–º–µ–Ω PHARMACOLOGY")
            db.session.commit()
        else:
            print("   ‚ÑπÔ∏è  –î–æ–º–µ–Ω PHARMACOLOGY —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –®–∞–≥ 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å PHARMA –Ω–∞ PHARMACOLOGY
        print("\n2Ô∏è‚É£ –®–ê–ì 2: –û–ë–ù–û–í–õ–ï–ù–ò–ï –í–û–ü–†–û–°–û–í")
        
        pharma_questions = Question.query.filter_by(domain='PHARMA').all()
        print(f"   –ù–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å domain='PHARMA': {len(pharma_questions)}")
        
        for question in pharma_questions:
            question.domain = 'PHARMACOLOGY'
            if question.big_domain_id:
                question.big_domain_id = pharmacology_domain.id
        
        db.session.commit()
        print("   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –≤–æ–ø—Ä–æ—Å—ã —Å PHARMA –Ω–∞ PHARMACOLOGY")
        
        # –®–∞–≥ 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ DiagnosticResponse
        print("\n3Ô∏è‚É£ –®–ê–ì 3: –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–• –û–¢–í–ï–¢–û–í")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ PHARMA
        pharma_responses = db.session.query(DiagnosticResponse).join(Question).filter(Question.domain == 'PHARMA').all()
        print(f"   –ù–∞–π–¥–µ–Ω–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ PHARMA: {len(pharma_responses)}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ö (–≤–æ–ø—Ä–æ—Å—ã —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤—ã—à–µ)
        print("   ‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        
        # –®–∞–≥ 4: –ú–∏–≥—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–æ–≤ –æ–±—É—á–µ–Ω–∏—è
        print("\n4Ô∏è‚É£ –®–ê–ì 4: –ú–ò–ì–†–ê–¶–ò–Ø –ü–õ–ê–ù–û–í –û–ë–£–ß–ï–ù–ò–Ø")
        
        plans = PersonalLearningPlan.query.all()
        print(f"   –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(plans)} –ø–ª–∞–Ω–æ–≤ –æ–±—É—á–µ–Ω–∏—è")
        
        updated_plans = 0
        for plan in plans:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–Ω–∞–ª–∏–∑ –¥–æ–º–µ–Ω–æ–≤
                if plan.domain_analysis:
                    analysis = plan.get_domain_analysis()
                    if analysis:
                        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
                        new_analysis = {}
                        for old_domain, ability in analysis.items():
                            new_domain = migration_map.get(old_domain, old_domain)
                            new_analysis[new_domain] = ability
                        
                        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ 30 –¥–æ–º–µ–Ω–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
                        all_domains = set(BIGDomain.DOMAIN_CODES.keys())
                        for domain_code in all_domains:
                            if domain_code not in new_analysis:
                                new_analysis[domain_code] = 0.0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        
                        plan.set_domain_analysis(new_analysis)
                        updated_plans += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–∞–±—ã–µ –¥–æ–º–µ–Ω—ã
                if plan.weak_domains:
                    weak_domains = plan.get_weak_domains()
                    if weak_domains:
                        new_weak_domains = []
                        for domain in weak_domains:
                            new_domain = migration_map.get(domain, domain)
                            if new_domain not in new_weak_domains:
                                new_weak_domains.append(new_domain)
                        plan.set_weak_domains(new_weak_domains)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω—ã
                if plan.strong_domains:
                    strong_domains = plan.get_strong_domains()
                    if strong_domains:
                        new_strong_domains = []
                        for domain in strong_domains:
                            new_domain = migration_map.get(domain, domain)
                            if new_domain not in new_strong_domains:
                                new_strong_domains.append(new_domain)
                        plan.set_strong_domains(new_strong_domains)
                
            except Exception as e:
                print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ {plan.id}: {e}")
                continue
        
        db.session.commit()
        print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–ª–∞–Ω–æ–≤ –æ–±—É—á–µ–Ω–∏—è: {updated_plans}")
        
        # –®–∞–≥ 5: –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –¥–æ–º–µ–Ω–æ–≤
        print("\n5Ô∏è‚É£ –®–ê–ì 5: –£–î–ê–õ–ï–ù–ò–ï –î–£–ë–õ–ò–†–£–Æ–©–ò–•–°–Ø –î–û–ú–ï–ù–û–í")
        
        # –£–¥–∞–ª—è–µ–º PHARMA (–µ—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã)
        pharma_domain = BIGDomain.query.filter_by(code='PHARMA').first()
        if pharma_domain:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —ç—Ç–∏–º –¥–æ–º–µ–Ω–æ–º
            remaining_questions = Question.query.filter_by(domain='PHARMA').count()
            if remaining_questions == 0:
                db.session.delete(pharma_domain)
                print("   ‚úÖ –£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –¥–æ–º–µ–Ω PHARMA")
            else:
                print(f"   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–µ–Ω–æ {remaining_questions} –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –¥–æ–º–µ–Ω–æ–º PHARMA")
        
        # –£–¥–∞–ª—è–µ–º FARMACOLOGIE
        farmacologie_domain = BIGDomain.query.filter_by(code='FARMACOLOGIE').first()
        if farmacologie_domain:
            db.session.delete(farmacologie_domain)
            print("   ‚úÖ –£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –¥–æ–º–µ–Ω FARMACOLOGIE")
        
        # –£–¥–∞–ª—è–µ–º DIAGNOSIS_SPECIAL
        diagnosis_special_domain = BIGDomain.query.filter_by(code='DIAGNOSIS_SPECIAL').first()
        if diagnosis_special_domain:
            db.session.delete(diagnosis_special_domain)
            print("   ‚úÖ –£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –¥–æ–º–µ–Ω DIAGNOSIS_SPECIAL")
        
        db.session.commit()
        
        # –®–∞–≥ 6: –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
        print("\n6Ô∏è‚É£ –®–ê–ì 6: –í–ê–õ–ò–î–ê–¶–ò–Ø –ú–ò–ì–†–ê–¶–ò–ò")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–µ–Ω–æ–≤
        total_domains = BIGDomain.query.count()
        print(f"   –í—Å–µ–≥–æ –¥–æ–º–µ–Ω–æ–≤ –≤ –±–∞–∑–µ: {total_domains}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω—ã –æ–±—É—á–µ–Ω–∏—è
        plans_with_all_domains = 0
        total_plans = PersonalLearningPlan.query.count()
        
        for plan in PersonalLearningPlan.query.all():
            try:
                if plan.domain_analysis:
                    analysis = plan.get_domain_analysis()
                    if analysis and len(analysis) >= 28:  # –ú–∏–Ω–∏–º—É–º 28 –¥–æ–º–µ–Ω–æ–≤
                        plans_with_all_domains += 1
            except:
                pass
        
        print(f"   –ü–ª–∞–Ω–æ–≤ —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –¥–æ–º–µ–Ω–æ–≤: {plans_with_all_domains}/{total_plans}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
        questions_with_pharmacology = Question.query.filter_by(domain='PHARMACOLOGY').count()
        print(f"   –í–æ–ø—Ä–æ—Å–æ–≤ —Å –¥–æ–º–µ–Ω–æ–º PHARMACOLOGY: {questions_with_pharmacology}")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ –º–∏–≥—Ä–∞—Ü–∏–∏
        migration_report = {
            'migration_date': datetime.now(timezone.utc).isoformat(),
            'total_domains_after': total_domains,
            'plans_updated': updated_plans,
            'plans_with_all_domains': plans_with_all_domains,
            'total_plans': total_plans,
            'questions_with_pharmacology': questions_with_pharmacology,
            'migration_successful': plans_with_all_domains > 0
        }
        
        with open('analysis/domain_migration_report.json', 'w', encoding='utf-8') as f:
            json.dump(migration_report, f, indent=2, ensure_ascii=False)
        
        print(f"\nüìä –û—Ç—á–µ—Ç –æ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: analysis/domain_migration_report.json")
        
        if plans_with_all_domains > 0:
            print("\n‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!")
            print(f"   - –î–æ–º–µ–Ω–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {total_domains}")
            print(f"   - –ü–ª–∞–Ω–æ–≤ —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –¥–æ–º–µ–Ω–æ–≤: {plans_with_all_domains}")
            print(f"   - –í–æ–ø—Ä–æ—Å–æ–≤ —Å PHARMACOLOGY: {questions_with_pharmacology}")
        else:
            print("\n‚ùå –ú–ò–ì–†–ê–¶–ò–Ø –ù–ï –ó–ê–í–ï–†–®–ï–ù–ê –ü–û–õ–ù–û–°–¢–¨–Æ")
            print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é")
        
        return migration_report

if __name__ == '__main__':
    execute_domain_migration() 