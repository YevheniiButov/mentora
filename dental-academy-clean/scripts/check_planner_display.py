#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≥–æ, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –æ–±—É—á–µ–Ω–∏—è
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import app
from extensions import db
from models import User, PersonalLearningPlan, DiagnosticSession
from datetime import datetime, timezone
import json

def check_planner_display():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –æ–±—É—á–µ–Ω–∏—è"""
    
    with app.app_context():
        print("üîç –ü–†–û–í–ï–†–ö–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –í –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ï")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Demo Gebruiker (ID: 6)
        user = User.query.get(6)
        if not user:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Demo Gebruiker –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get_display_name()} (ID: {user.id})")
        print("-" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω
        active_plan = PersonalLearningPlan.query.filter_by(
            user_id=user.id,
            status='active'
        ).first()
        
        if not active_plan:
            print("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"üìã –ê–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω: ID {active_plan.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        latest_diagnostic = DiagnosticSession.query.filter_by(
            user_id=user.id,
            status='completed'
        ).order_by(DiagnosticSession.completed_at.desc()).first()
        
        if not latest_diagnostic:
            print("‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        print(f"üî¨ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: ID {latest_diagnostic.id}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        print(f"\nüîÑ –°–ò–ú–£–õ–Ø–¶–ò–Ø –õ–û–ì–ò–ö–ò –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê:")
        print("-" * 40)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        diagnostic_data = latest_diagnostic.generate_results()
        print(f"üìÑ Diagnostic data: {diagnostic_data}")
        
        # –í–°–ï 25 –¥–æ–º–µ–Ω–æ–≤ BIG —ç–∫–∑–∞–º–µ–Ω–∞ (–∫–∞–∫ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ)
        ALL_BIG_DOMAINS = {
            'domain_1': 'Endodontics',
            'domain_2': 'Periodontics', 
            'domain_3': 'Orthodontics',
            'domain_4': 'Oral Surgery',
            'domain_5': 'Prosthodontics',
            'domain_6': 'Preventive Care',
            'domain_7': 'Dental Materials',
            'domain_8': 'Oral Pathology',
            'domain_9': 'Oral Medicine',
            'domain_10': 'Dental Radiology',
            'domain_11': 'Dental Anatomy',
            'domain_12': 'Dental Physiology',
            'domain_13': 'Dental Pharmacology',
            'domain_14': 'Dental Anesthesia',
            'domain_15': 'Dental Emergency',
            'domain_16': 'Dental Ethics',
            'domain_17': 'Dental Law',
            'domain_18': 'Practice Management',
            'domain_19': 'Patient Communication',
            'domain_20': 'Infection Control',
            'domain_21': 'Dental Implants',
            'domain_22': 'Cosmetic Dentistry',
            'domain_23': 'Pediatric Dentistry',
            'domain_24': 'Geriatric Dentistry',
            'domain_25': 'Special Needs Dentistry'
        }
        
        # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –Ω–∞ –Ω–æ–≤—ã–µ
        OLD_TO_NEW_DOMAIN_MAPPING = {
            'THER': 'domain_1',      # –¢–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è -> Endodontics
            'SURG': 'domain_4',      # –•–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è -> Oral Surgery
            'PROTH': 'domain_5',     # –û—Ä—Ç–æ–ø–µ–¥–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è -> Prosthodontics
            'PEDI': 'domain_23',     # –î–µ—Ç—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è -> Pediatric Dentistry
            'PARO': 'domain_2',      # –ü–∞—Ä–æ–¥–æ–Ω—Ç–æ–ª–æ–≥–∏—è -> Periodontics
            'ORTHO': 'domain_3',     # –û—Ä—Ç–æ–¥–æ–Ω—Ç–∏—è -> Orthodontics
            'PREV': 'domain_6',      # –ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ -> Preventive Care
            'ETHIEK': 'domain_16',   # –≠—Ç–∏–∫–∞ –∏ –ø—Ä–∞–≤–æ -> Dental Ethics
            'ANATOMIE': 'domain_11', # –ê–Ω–∞—Ç–æ–º–∏—è -> Dental Anatomy
            'FYSIOLOGIE': 'domain_12', # –§–∏–∑–∏–æ–ª–æ–≥–∏—è -> Dental Physiology
            'PATHOLOGIE': 'domain_8', # –ü–∞—Ç–æ–ª–æ–≥–∏—è -> Oral Pathology
            'MICROBIOLOGIE': 'domain_20', # –ú–∏–∫—Ä–æ–±–∏–æ–ª–æ–≥–∏—è -> Infection Control
            'MATERIAALKUNDE': 'domain_7', # –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤–µ–¥–µ–Ω–∏–µ -> Dental Materials
            'RADIOLOGIE': 'domain_10', # –†–µ–Ω—Ç–≥–µ–Ω–æ–ª–æ–≥–∏—è -> Dental Radiology
            'ALGEMENE_GENEESKUNDE': 'domain_9', # –û–±—â–∞—è –º–µ–¥–∏—Ü–∏–Ω–∞ -> Oral Medicine
            'EMERGENCY': 'domain_15', # –ù–µ–æ—Ç–ª–æ–∂–Ω–∞—è –ø–æ–º–æ—â—å -> Dental Emergency
            'SYSTEMIC': 'domain_9',  # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è -> Oral Medicine
            'PHARMA': 'domain_13',   # –§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è -> Dental Pharmacology
            'INFECTION': 'domain_20', # –ò–Ω—Ñ–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å -> Infection Control
            'SPECIAL': 'domain_25',  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ -> Special Needs Dentistry
            'DIAGNOSIS': 'domain_8', # –°–ª–æ–∂–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ -> Oral Pathology
            'DUTCH': 'domain_18',    # –ì–æ–ª–ª–∞–Ω–¥—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è -> Practice Management
            'PROFESSIONAL': 'domain_17', # –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ -> Dental Law
            'FARMACOLOGIE': 'domain_13', # –§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ) -> Dental Pharmacology
            'DIAGNOSIS_SPECIAL': 'domain_8' # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ -> Oral Pathology
        }
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        diagnostic_results = {
            'overall_score': latest_diagnostic.current_ability if latest_diagnostic else 0,
            'domains': []
        }
        
        print(f"\nüìä –î–û–ú–ï–ù–´ –í –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ï:")
        print("-" * 30)
        
        for domain_code, domain_name in ALL_BIG_DOMAINS.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–æ–º—É –¥–æ–º–µ–Ω—É (–ø—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
            if (diagnostic_data.get('domain_statistics') and 
                domain_code in diagnostic_data['domain_statistics'] and
                diagnostic_data['domain_statistics'][domain_code].get('has_data', False)):
                
                # –ï—Å—Ç—å –ø—Ä—è–º—ã–µ –¥–∞–Ω–Ω—ã–µ
                domain_data = diagnostic_data['domain_statistics'][domain_code]
                score = domain_data.get('accuracy_percentage', 0)
                questions_answered = domain_data.get('questions_answered', 0)
                correct_answers = domain_data.get('correct_answers', 0)
                print(f"‚úÖ {domain_name}: {score}% ({correct_answers}/{questions_answered})")
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö –¥–æ–º–µ–Ω–æ–≤
                score = 0
                questions_answered = 0
                correct_answers = 0
                
                # –ò—â–µ–º —Å—Ç–∞—Ä—ã–π –¥–æ–º–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –º–∞–ø–ø–∏—Ç—Å—è –Ω–∞ —ç—Ç–æ—Ç –Ω–æ–≤—ã–π
                for old_domain, new_domain in OLD_TO_NEW_DOMAIN_MAPPING.items():
                    if new_domain == domain_code:
                        if (diagnostic_data.get('domain_statistics') and 
                            old_domain in diagnostic_data['domain_statistics'] and
                            diagnostic_data['domain_statistics'][old_domain].get('has_data', False)):
                            
                            # –ù–∞—à–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–∞—Ä–æ–º –¥–æ–º–µ–Ω–µ
                            old_domain_data = diagnostic_data['domain_statistics'][old_domain]
                            score = old_domain_data.get('accuracy_percentage', 0)
                            questions_answered = old_domain_data.get('questions_answered', 0)
                            correct_answers = old_domain_data.get('correct_answers', 0)
                            print(f"üîÑ {domain_name}: {score}% ({correct_answers}/{questions_answered}) [–∏–∑ {old_domain}]")
                            break
                
                if score == 0:
                    print(f"‚ùå {domain_name}: 0% (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)")
            
            # –†–∞—Å—á–µ—Ç —á–∞—Å–æ–≤
            hours = max(24 - score * 0.3, 8)
            
            domain_result = {
                'code': domain_code,
                'name': domain_name,
                'score': score,
                'target': 85,
                'hours': hours,
                'questions_answered': questions_answered,
                'correct_answers': correct_answers
            }
            
            diagnostic_results['domains'].append(domain_result)
        
        print(f"\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("-" * 30)
        print(f"üìä –í—Å–µ–≥–æ –¥–æ–º–µ–Ω–æ–≤: {len(diagnostic_results['domains'])}")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_hours = sum(d['hours'] for d in diagnostic_results['domains'])
        weak_domains = [d for d in diagnostic_results['domains'] if d['score'] < 70]
        strong_domains = [d for d in diagnostic_results['domains'] if d['score'] >= 70]
        
        print(f"‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {total_hours:.1f} —á–∞—Å–æ–≤")
        print(f"‚ö†Ô∏è –°–ª–∞–±—ã—Ö –¥–æ–º–µ–Ω–æ–≤: {len(weak_domains)}")
        print(f"‚úÖ –°–∏–ª—å–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤: {len(strong_domains)}")
        
        if weak_domains:
            print(f"\n‚ö†Ô∏è –°–õ–ê–ë–´–ï –î–û–ú–ï–ù–´ (–ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ):")
            for domain in weak_domains[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   ‚Ä¢ {domain['name']}: {domain['score']}% ({domain['hours']:.1f} —á)")
            if len(weak_domains) > 5:
                print(f"   ... –∏ –µ—â–µ {len(weak_domains) - 5} –¥–æ–º–µ–Ω–æ–≤")
        
        print(f"\nüîç –í–´–í–û–î:")
        print("-" * 20)
        print("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏, –∞ –Ω–µ –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞!")
        print("–ù—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞, —á—Ç–æ–±—ã –æ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –¥–∞–Ω–Ω—ã–µ –∏–∑ PersonalLearningPlan")

if __name__ == "__main__":
    check_planner_display() 