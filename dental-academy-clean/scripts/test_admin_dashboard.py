import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import app
from extensions import db
from models import User, DiagnosticSession, PersonalLearningPlan, UserProgress, Question, IRTParameters, Lesson
from datetime import datetime, timedelta, date
from sqlalchemy import func

def test_dashboard_metrics():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–∞—à–±–æ—Ä–¥–∞"""
    with app.app_context():
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–î–ú–ò–ù –î–ê–®–ë–û–†–î–ê")
        print("=" * 50)
        
        today = date.today()
        week_ago = today - timedelta(days=7)
        
        # 1. –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ú–ï–¢–†–ò–ö–ò
        print("\n1Ô∏è‚É£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ú–ï–¢–†–ò–ö–ò:")
        total_users = User.query.count()
        new_week = User.query.filter(User.created_at >= week_ago).count()
        active_week = User.query.join(UserProgress).filter(
            UserProgress.last_accessed >= week_ago
        ).distinct().count()
        with_diagnostic = User.query.join(DiagnosticSession).filter(
            DiagnosticSession.status == 'completed'
        ).distinct().count()
        
        print(f"   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
        print(f"   –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {new_week}")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {active_week}")
        print(f"   –° –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π: {with_diagnostic}")
        
        # 2. –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–†–ò–ö–ò
        print("\n2Ô∏è‚É£ –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–†–ò–ö–ò:")
        total_sessions = DiagnosticSession.query.count()
        completed_sessions = DiagnosticSession.query.filter_by(status='completed').count()
        avg_ability = db.session.query(
            func.avg(DiagnosticSession.current_ability)
        ).filter(DiagnosticSession.status == 'completed').scalar() or 0
        completion_rate = (completed_sessions / total_sessions * 100) if total_sessions > 0 else 0
        
        print(f"   –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {total_sessions}")
        print(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_sessions}")
        print(f"   Completion rate: {completion_rate:.1f}%")
        print(f"   –°—Ä–µ–¥–Ω—è—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {avg_ability:.2f}")
        
        # 3. –ü–õ–ê–ù–´ –û–ë–£–ß–ï–ù–ò–Ø
        print("\n3Ô∏è‚É£ –ü–õ–ê–ù–´ –û–ë–£–ß–ï–ù–ò–Ø:")
        active_plans = PersonalLearningPlan.query.filter_by(status='active').count()
        overdue_reassessments = PersonalLearningPlan.query.filter(
            PersonalLearningPlan.status == 'active',
            PersonalLearningPlan.next_diagnostic_date < today
        ).count()
        avg_progress = db.session.query(
            func.avg(PersonalLearningPlan.overall_progress)
        ).filter(PersonalLearningPlan.status == 'active').scalar() or 0
        
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤: {active_plans}")
        print(f"   –¢—Ä–µ–±—É—é—Ç –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏: {overdue_reassessments}")
        print(f"   –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {avg_progress:.1f}%")
        
        # 4. –ö–û–ù–¢–ï–ù–¢
        print("\n4Ô∏è‚É£ –ö–û–ù–¢–ï–ù–¢:")
        total_questions = Question.query.count()
        questions_with_irt = Question.query.join(IRTParameters).count()
        total_lessons = Lesson.query.count()
        irt_coverage = (questions_with_irt / total_questions * 100) if total_questions > 0 else 0
        
        print(f"   –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}")
        print(f"   –° IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {questions_with_irt}")
        print(f"   IRT –ø–æ–∫—Ä—ã—Ç–∏–µ: {irt_coverage:.1f}%")
        print(f"   –í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤: {total_lessons}")
        
        # 5. –°–õ–ê–ë–´–ï –î–û–ú–ï–ù–´
        print("\n5Ô∏è‚É£ –°–õ–ê–ë–´–ï –î–û–ú–ï–ù–´:")
        plans_with_weak = PersonalLearningPlan.query.filter(
            PersonalLearningPlan.weak_domains != None,
            PersonalLearningPlan.status == 'active'
        ).all()
        
        domain_counts = {}
        for plan in plans_with_weak:
            weak_domains = plan.get_weak_domains()
            for domain in weak_domains:
                domain_counts[domain] = domain_counts.get(domain, 0) + 1
        
        weak_domains_stats = sorted(
            [{'domain': k, 'count': v} for k, v in domain_counts.items()],
            key=lambda x: x['count'],
            reverse=True
        )[:5]
        
        print(f"   –ü–ª–∞–Ω–æ–≤ —Å–æ —Å–ª–∞–±—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏: {len(plans_with_weak)}")
        print("   –¢–æ–ø 5 —Å–ª–∞–±—ã—Ö –¥–æ–º–µ–Ω–æ–≤:")
        for stat in weak_domains_stats:
            print(f"     {stat['domain']}: {stat['count']}")
        
        # 6. –ê–ö–¢–ò–í–ù–û–°–¢–¨
        print("\n6Ô∏è‚É£ –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ó–ê –ù–ï–î–ï–õ–Æ:")
        daily_activity = []
        for i in range(6, -1, -1):
            day = today - timedelta(days=i)
            registrations = User.query.filter(
                func.date(User.created_at) == day
            ).count()
            diagnostics = DiagnosticSession.query.filter(
                func.date(DiagnosticSession.started_at) == day
            ).count()
            lessons = UserProgress.query.filter(
                func.date(UserProgress.last_accessed) == day
            ).count()
            
            daily_activity.append({
                'date': day.strftime('%d.%m'),
                'registrations': registrations,
                'diagnostics': diagnostics,
                'lessons': lessons
            })
            print(f"   {day.strftime('%d.%m')}: {registrations} —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π, {diagnostics} –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫, {lessons} —É—Ä–æ–∫–æ–≤")
        
        print("\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print("–î–∞—à–±–æ—Ä–¥ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")

if __name__ == '__main__':
    test_dashboard_metrics() 