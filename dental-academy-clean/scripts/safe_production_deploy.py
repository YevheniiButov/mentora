#!/usr/bin/env python3
"""
–ë–ï–ó–û–ü–ê–°–ù–´–ô –î–ï–ü–õ–û–ô SCRIPT
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import os
import sys
import logging
from datetime import datetime

# Add project root to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from app import create_app
from extensions import db
from models import User

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def check_existing_data():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        user_count = User.query.count()
        admin_count = User.query.filter_by(role='admin').count()
        
        logger.info(f"üìä Current database stats:")
        logger.info(f"   Total users: {user_count}")
        logger.info(f"   Admin users: {admin_count}")
        
        return {
            'users_exist': user_count > 0,
            'admin_exists': admin_count > 0,
            'user_count': user_count,
            'admin_count': admin_count
        }
    except Exception as e:
        logger.error(f"‚ùå Error checking database: {e}")
        return {
            'users_exist': False,
            'admin_exists': False,
            'user_count': 0,
            'admin_count': 0
        }

def ensure_admin_user():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
    try:
        # Check if admin exists
        admin = User.query.filter_by(role='admin').first()
        
        if admin:
            logger.info(f"‚úÖ Admin user already exists: {admin.email}")
            return admin
        
        # Create admin if none exists
        admin_email = os.environ.get('ADMIN_EMAIL', 'admin@mentora.com')
        admin_password = os.environ.get('ADMIN_PASSWORD', 'admin123')
        
        admin = User(
            email=admin_email,
            username='admin',
            first_name='System',
            last_name='Administrator',
            role='admin',
            is_active=True,
            email_confirmed=True
        )
        admin.set_password(admin_password)
        
        db.session.add(admin)
        db.session.commit()
        
        logger.info(f"‚úÖ Created new admin user: {admin_email}")
        return admin
        
    except Exception as e:
        logger.error(f"‚ùå Error creating admin user: {e}")
        db.session.rollback()
        return None

def safe_deploy():
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–µ–ø–ª–æ–π –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üöÄ Starting SAFE production deploy...")
    
    app = create_app()
    
    with app.app_context():
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            logger.info("üìä Checking existing data...")
            data_stats = check_existing_data()
            
            # 2. –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø timestamp
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            logger.info(f"üìÖ Deploy timestamp: {timestamp}")
            
            # 3. –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–¥–º–∏–Ω–∞
            logger.info("üë§ Ensuring admin user exists...")
            admin = ensure_admin_user()
            
            if not admin:
                logger.error("‚ùå Failed to create/find admin user")
                return False
            
            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            final_stats = check_existing_data()
            
            logger.info("‚úÖ SAFE DEPLOY COMPLETED!")
            logger.info(f"   Final user count: {final_stats['user_count']}")
            logger.info(f"   Final admin count: {final_stats['admin_count']}")
            logger.info(f"   Data preserved: {'YES' if data_stats['users_exist'] else 'NO'}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Deploy failed: {e}")
            return False

if __name__ == '__main__':
    success = safe_deploy()
    sys.exit(0 if success else 1)
