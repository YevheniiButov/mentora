#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –¥–æ–º–µ–Ω—ã –∏ —É–¥–∞–ª—è–µ—Ç –ø—É—Å—Ç—ã–µ
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import app
from models import BIGDomain, Question
from extensions import db

def find_duplicate_domains():
    """–ù–∞–π—Ç–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –¥–æ–º–µ–Ω—ã"""
    
    print('üîç –ü–û–ò–°–ö –î–£–ë–õ–ò–†–£–Æ–©–ò–•–°–Ø –î–û–ú–ï–ù–û–í')
    print('=' * 50)
    
    with app.app_context():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã
        domains = BIGDomain.query.filter_by(is_active=True).all()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –∫–æ–¥—É (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
        domain_groups = {}
        
        for domain in domains:
            normalized_code = domain.code.lower()
            if normalized_code not in domain_groups:
                domain_groups[normalized_code] = []
            domain_groups[normalized_code].append(domain)
        
        # –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        duplicates = {}
        for normalized_code, domain_list in domain_groups.items():
            if len(domain_list) > 1:
                duplicates[normalized_code] = domain_list
        
        if duplicates:
            print(f'üìä –ù–∞–π–¥–µ–Ω–æ {len(duplicates)} –≥—Ä—É–ø–ø –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –¥–æ–º–µ–Ω–æ–≤:')
            
            for normalized_code, domain_list in duplicates.items():
                print(f'\nüîç –ì—Ä—É–ø–ø–∞: {normalized_code}')
                print(f'   {"–ö–æ–¥":<20} {"–ù–∞–∑–≤–∞–Ω–∏–µ":<30} {"–í–æ–ø—Ä–æ—Å–æ–≤":<10} {"ID":<6} {"–í–µ—Å":<8}')
                print('   ' + '-' * 80)
                
                for domain in domain_list:
                    questions_count = Question.query.filter_by(big_domain_id=domain.id).count()
                    print(f'   {domain.code:<20} {domain.name:<30} {questions_count:<10} {domain.id:<6} {domain.weight_percentage:<8}')
            
            return duplicates
        else:
            print('‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –¥–æ–º–µ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
            return {}

def fix_duplicate_domains(duplicates):
    """–ò—Å–ø—Ä–∞–≤–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –¥–æ–º–µ–Ω—ã"""
    
    if not duplicates:
        print('‚ùå –ù–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
        return
    
    print(f'\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–£–ë–õ–ò–†–£–Æ–©–ò–•–°–Ø –î–û–ú–ï–ù–û–í')
    print('=' * 50)
    
    with app.app_context():
        total_fixed = 0
        
        for normalized_code, domain_list in duplicates.items():
            print(f'\nüìù –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã: {normalized_code}')
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–º–µ–Ω—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–æ–ø—Ä–æ—Å–æ–≤ (–±–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤ = –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            domain_list.sort(key=lambda d: Question.query.filter_by(big_domain_id=d.id).count(), reverse=True)
            
            # –ü–µ—Ä–≤—ã–π –¥–æ–º–µ–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–º
            main_domain = domain_list[0]
            main_questions = Question.query.filter_by(big_domain_id=main_domain.id).count()
            
            print(f'   üéØ –û—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω: {main_domain.code} (ID: {main_domain.id}, {main_questions} –≤–æ–ø—Ä–æ—Å–æ–≤)')
            
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω—ã —É–¥–∞–ª—è–µ–º, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—è –≤–æ–ø—Ä–æ—Å—ã
            for duplicate_domain in domain_list[1:]:
                duplicate_questions = Question.query.filter_by(big_domain_id=duplicate_domain.id).count()
                
                print(f'   üìã –î—É–±–ª–∏–∫–∞—Ç: {duplicate_domain.code} (ID: {duplicate_domain.id}, {duplicate_questions} –≤–æ–ø—Ä–æ—Å–æ–≤)')
                
                if duplicate_questions > 0:
                    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤–æ–ø—Ä–æ—Å—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω
                    questions_to_move = Question.query.filter_by(big_domain_id=duplicate_domain.id).all()
                    
                    for question in questions_to_move:
                        old_domain_id = question.big_domain_id
                        question.big_domain_id = main_domain.id
                        question.domain = main_domain.code
                        print(f'      ‚úÖ –í–æ–ø—Ä–æ—Å {question.id}: {duplicate_domain.code} -> {main_domain.code}')
                    
                    total_fixed += duplicate_questions
                
                # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –¥–æ–º–µ–Ω
                try:
                    db.session.delete(duplicate_domain)
                    print(f'      üóëÔ∏è  –î–æ–º–µ–Ω {duplicate_domain.code} —É–¥–∞–ª–µ–Ω')
                except Exception as e:
                    print(f'      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–º–µ–Ω–∞ {duplicate_domain.code}: {e}')
                    db.session.rollback()
                    continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        try:
            db.session.commit()
            print(f'\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:')
            print(f'   –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_fixed}')
            print(f'   –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –¥–æ–º–µ–Ω–æ–≤: {sum(len(domains) - 1 for domains in duplicates.values())}')
            return True
            
        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}')
            db.session.rollback()
            return False

def verify_fixes():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    
    print('\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í')
    print('=' * 40)
    
    with app.app_context():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã
        domains = BIGDomain.query.filter_by(is_active=True).all()
        
        domain_codes = {}
        for domain in domains:
            normalized_code = domain.code.lower()
            if normalized_code not in domain_codes:
                domain_codes[normalized_code] = []
            domain_codes[normalized_code].append(domain)
        
        remaining_duplicates = {code: domains for code, domains in domain_codes.items() if len(domains) > 1}
        
        if remaining_duplicates:
            print(f'‚ö†Ô∏è  –û—Å—Ç–∞–ª–∏—Å—å –¥—É–±–ª–∏–∫–∞—Ç—ã: {len(remaining_duplicates)}')
            for code, domains in remaining_duplicates.items():
                print(f'   {code}: {[d.code for d in domains]}')
        else:
            print('‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã!')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_domains = len(domains)
        domains_with_questions = 0
        total_questions = 0
        
        for domain in domains:
            questions_count = Question.query.filter_by(big_domain_id=domain.id).count()
            total_questions += questions_count
            if questions_count > 0:
                domains_with_questions += 1
        
        print(f'\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:')
        print(f'   –í—Å–µ–≥–æ –¥–æ–º–µ–Ω–æ–≤: {total_domains}')
        print(f'   –î–æ–º–µ–Ω–æ–≤ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏: {domains_with_questions}')
        print(f'   –ü—É—Å—Ç—ã—Ö –¥–æ–º–µ–Ω–æ–≤: {total_domains - domains_with_questions}')
        print(f'   –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}')

if __name__ == '__main__':
    print('üöÄ –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –¥–æ–º–µ–Ω–æ–≤...')
    
    duplicates = find_duplicate_domains()
    
    if duplicates:
        success = fix_duplicate_domains(duplicates)
        
        if success:
            verify_fixes()
            print('\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!')
        else:
            print('\n‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!')
    else:
        print('\n‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è!')


