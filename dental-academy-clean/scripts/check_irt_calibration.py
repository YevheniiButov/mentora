import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import app
from extensions import db
from models import IRTParameters, Question

def check_calibration():
    with app.app_context():
        total_questions = Question.query.count()
        total_irt = IRTParameters.query.count()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        default_params = IRTParameters.query.filter(
            IRTParameters.difficulty == 0.0,
            IRTParameters.discrimination == 1.0,
            IRTParameters.guessing == 0.25
        ).count()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–µ
        calibrated = IRTParameters.query.filter(
            IRTParameters.calibration_sample_size > 0
        ).count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ difficulty
        difficulty_stats = db.session.query(
            db.func.min(IRTParameters.difficulty).label('min'),
            db.func.max(IRTParameters.difficulty).label('max'),
            db.func.avg(IRTParameters.difficulty).label('avg')
        ).first()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ discrimination
        discrimination_stats = db.session.query(
            db.func.min(IRTParameters.discrimination).label('min'),
            db.func.max(IRTParameters.discrimination).label('max'),
            db.func.avg(IRTParameters.discrimination).label('avg')
        ).first()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ guessing
        guessing_stats = db.session.query(
            db.func.min(IRTParameters.guessing).label('min'),
            db.func.max(IRTParameters.guessing).label('max'),
            db.func.avg(IRTParameters.guessing).label('avg')
        ).first()
        
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–ê–õ–ò–ë–†–û–í–ö–ò IRT:")
        print("=" * 50)
        print(f"   –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}")
        print(f"   –° IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {total_irt} ({total_irt/total_questions*100:.1f}%)")
        print(f"   –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {default_params}")
        print(f"   –û—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–µ: {calibrated}")
        
        print(f"\nüìà –î–∏–∞–ø–∞–∑–æ–Ω —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (difficulty):")
        print(f"   –ú–∏–Ω: {difficulty_stats.min:.2f}")
        print(f"   –ú–∞–∫—Å: {difficulty_stats.max:.2f}")
        print(f"   –°—Ä–µ–¥–Ω—è—è: {difficulty_stats.avg:.2f}")
        
        print(f"\nüìà –î–∏–∞–ø–∞–∑–æ–Ω –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏–∏ (discrimination):")
        print(f"   –ú–∏–Ω: {discrimination_stats.min:.2f}")
        print(f"   –ú–∞–∫—Å: {discrimination_stats.max:.2f}")
        print(f"   –°—Ä–µ–¥–Ω—è—è: {discrimination_stats.avg:.2f}")
        
        print(f"\nüìà –î–∏–∞–ø–∞–∑–æ–Ω —É–≥–∞–¥—ã–≤–∞–Ω–∏—è (guessing):")
        print(f"   –ú–∏–Ω: {guessing_stats.min:.2f}")
        print(f"   –ú–∞–∫—Å: {guessing_stats.max:.2f}")
        print(f"   –°—Ä–µ–¥–Ω—è—è: {guessing_stats.avg:.2f}")
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        ranges = [
            ('–û—á–µ–Ω—å –ª–µ–≥–∫–∏–µ', -3.0, -1.5),
            ('–õ–µ–≥–∫–∏–µ', -1.5, -0.5),
            ('–°—Ä–µ–¥–Ω–∏–µ', -0.5, 0.5),
            ('–°–ª–æ–∂–Ω—ã–µ', 0.5, 1.5),
            ('–û—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã–µ', 1.5, 3.0)
        ]
        
        print(f"\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:")
        for name, min_val, max_val in ranges:
            count = IRTParameters.query.filter(
                IRTParameters.difficulty >= min_val,
                IRTParameters.difficulty < max_val
            ).count()
            percentage = (count / total_irt * 100) if total_irt > 0 else 0
            print(f"   {name}: {count} ({percentage:.1f}%)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        print(f"\nüîç –ö–ê–ß–ï–°–¢–í–û –ö–ê–õ–ò–ë–†–û–í–ö–ò:")
        
        # –í–æ–ø—Ä–æ—Å—ã —Å –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–æ–π –≤—ã–±–æ—Ä–∫–æ–π
        small_sample = IRTParameters.query.filter(
            IRTParameters.calibration_sample_size < 5
        ).count()
        print(f"   –í–æ–ø—Ä–æ—Å—ã —Å –≤—ã–±–æ—Ä–∫–æ–π < 5: {small_sample}")
        
        # –í–æ–ø—Ä–æ—Å—ã —Å —Ö–æ—Ä–æ—à–µ–π –≤—ã–±–æ—Ä–∫–æ–π
        good_sample = IRTParameters.query.filter(
            IRTParameters.calibration_sample_size >= 10
        ).count()
        print(f"   –í–æ–ø—Ä–æ—Å—ã —Å –≤—ã–±–æ—Ä–∫–æ–π >= 10: {good_sample}")
        
        # –í–æ–ø—Ä–æ—Å—ã —Å –æ—Ç–ª–∏—á–Ω–æ–π –≤—ã–±–æ—Ä–∫–æ–π
        excellent_sample = IRTParameters.query.filter(
            IRTParameters.calibration_sample_size >= 20
        ).count()
        print(f"   –í–æ–ø—Ä–æ—Å—ã —Å –≤—ã–±–æ—Ä–∫–æ–π >= 20: {excellent_sample}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        high_reliability = IRTParameters.query.filter(
            IRTParameters.reliability >= 0.8
        ).count()
        print(f"   –í–æ–ø—Ä–æ—Å—ã —Å –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å—é >= 0.8: {high_reliability}")
        
        if default_params == 0:
            print(f"\n‚úÖ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω—ã!")
        else:
            print(f"\n‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å {default_params} –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        coverage = (total_irt / total_questions * 100) if total_questions > 0 else 0
        calibration_quality = (calibrated / total_irt * 100) if total_irt > 0 else 0
        
        print(f"\nüéØ –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê:")
        print(f"   –ü–æ–∫—Ä—ã—Ç–∏–µ IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {coverage:.1f}%")
        print(f"   –ö–∞—á–µ—Å—Ç–≤–æ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {calibration_quality:.1f}%")
        
        if coverage >= 95 and calibration_quality >= 80:
            print(f"   üéâ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏!")
        elif coverage >= 80 and calibration_quality >= 60:
            print(f"   ‚úÖ –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏")
        else:
            print(f"   ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏")

if __name__ == '__main__':
    check_calibration() 