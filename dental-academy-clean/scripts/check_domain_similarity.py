#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤
–¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑, –±–µ–∑ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
"""

import sys
import os
from difflib import SequenceMatcher
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import app
from models import BIGDomain, Question
from extensions import db

def similarity(a, b):
    """–í—ã—á–∏—Å–ª–∏—Ç—å —Å—Ö–æ–∂–µ—Å—Ç—å –º–µ–∂–¥—É –¥–≤—É–º—è —Å—Ç—Ä–æ–∫–∞–º–∏ (0-1)"""
    return SequenceMatcher(None, a.lower(), b.lower()).ratio()

def check_domain_similarity():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ö–æ–∂–µ—Å—Ç—å –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    
    print('üîç –ü–†–û–í–ï–†–ö–ê –°–•–û–ñ–ï–°–¢–ò –î–û–ú–ï–ù–û–í')
    print('=' * 50)
    
    with app.app_context():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã
        domains = BIGDomain.query.filter_by(is_active=True).order_by(BIGDomain.code).all()
        
        print(f'üìä –í—Å–µ–≥–æ –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(domains)}')
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        domain_info = []
        for domain in domains:
            questions_count = Question.query.filter_by(big_domain_id=domain.id).count()
            domain_info.append({
                'id': domain.id,
                'code': domain.code,
                'name': domain.name,
                'questions': questions_count,
                'weight': domain.weight_percentage
            })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å –º–µ–∂–¥—É –≤—Å–µ–º–∏ –ø–∞—Ä–∞–º–∏ –¥–æ–º–µ–Ω–æ–≤
        potential_duplicates = []
        
        for i, domain1 in enumerate(domain_info):
            for j, domain2 in enumerate(domain_info[i+1:], i+1):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å –∫–æ–¥–æ–≤
                code_similarity = similarity(domain1['code'], domain2['code'])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–π
                name_similarity = similarity(domain1['name'], domain2['name'])
                
                # –ï—Å–ª–∏ —Å—Ö–æ–∂–µ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
                if code_similarity > 0.7 or name_similarity > 0.7:
                    potential_duplicates.append({
                        'domain1': domain1,
                        'domain2': domain2,
                        'code_similarity': code_similarity,
                        'name_similarity': name_similarity,
                        'total_similarity': (code_similarity + name_similarity) / 2
                    })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ–±—â–µ–π —Å—Ö–æ–∂–µ—Å—Ç–∏ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        potential_duplicates.sort(key=lambda x: x['total_similarity'], reverse=True)
        
        if potential_duplicates:
            print(f'\n‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–û {len(potential_duplicates)} –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–• –î–£–ë–õ–ò–ö–ê–¢–û–í:')
            print('=' * 80)
            
            for i, duplicate in enumerate(potential_duplicates, 1):
                d1 = duplicate['domain1']
                d2 = duplicate['domain2']
                
                print(f'\n{i}. –°–•–û–ñ–ï–°–¢–¨: {duplicate["total_similarity"]:.1%}')
                print(f'   –ö–æ–¥: {duplicate["code_similarity"]:.1%} | –ù–∞–∑–≤–∞–Ω–∏–µ: {duplicate["name_similarity"]:.1%}')
                print(f'   {"–î–æ–º–µ–Ω 1":<20} {"–ö–æ–¥":<20} {"–ù–∞–∑–≤–∞–Ω–∏–µ":<30} {"–í–æ–ø—Ä–æ—Å–æ–≤":<10} {"ID":<6}')
                print(f'   {d1["code"]:<20} {d1["code"]:<20} {d1["name"]:<30} {d1["questions"]:<10} {d1["id"]:<6}')
                print(f'   {d2["code"]:<20} {d2["code"]:<20} {d2["name"]:<30} {d2["questions"]:<10} {d2["id"]:<6}')
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
                if duplicate['total_similarity'] > 0.9:
                    recommendation = "üî¥ –í–´–°–û–ö–ê–Ø –í–ï–†–û–Ø–¢–ù–û–°–¢–¨ –î–£–ë–õ–ò–ö–ê–¢–ê"
                elif duplicate['total_similarity'] > 0.8:
                    recommendation = "üü° –°–†–ï–î–ù–Ø–Ø –í–ï–†–û–Ø–¢–ù–û–°–¢–¨ –î–£–ë–õ–ò–ö–ê–¢–ê"
                else:
                    recommendation = "üü¢ –ù–ò–ó–ö–ê–Ø –í–ï–†–û–Ø–¢–ù–û–°–¢–¨ –î–£–ë–õ–ò–ö–ê–¢–ê"
                
                print(f'   {recommendation}')
        else:
            print('\n‚úÖ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –¥–æ–º–µ–Ω—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤
        print(f'\nüìä –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:')
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–æ–º–µ–Ω—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–æ–ø—Ä–æ—Å–æ–≤
        questions_groups = {}
        for domain in domain_info:
            questions_count = domain['questions']
            if questions_count not in questions_groups:
                questions_groups[questions_count] = []
            questions_groups[questions_count].append(domain)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –¥–æ–º–µ–Ω–∞–º–∏
        multiple_domains_groups = {count: domains for count, domains in questions_groups.items() if len(domains) > 1}
        
        if multiple_domains_groups:
            print(f'\nüìã –î–û–ú–ï–ù–´ –° –û–î–ò–ù–ê–ö–û–í–´–ú –ö–û–õ–ò–ß–ï–°–¢–í–û–ú –í–û–ü–†–û–°–û–í:')
            for questions_count, domains in sorted(multiple_domains_groups.items()):
                print(f'\n   {questions_count} –≤–æ–ø—Ä–æ—Å–æ–≤ ({len(domains)} –¥–æ–º–µ–Ω–æ–≤):')
                for domain in domains:
                    print(f'      ‚Ä¢ {domain["code"]} ({domain["name"]})')
        else:
            print('\n   –ù–µ—Ç –¥–æ–º–µ–Ω–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ö–æ–∂–µ—Å—Ç–∏
        print(f'\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–•–û–ñ–ï–°–¢–ò:')
        if potential_duplicates:
            high_similarity = len([d for d in potential_duplicates if d['total_similarity'] > 0.9])
            medium_similarity = len([d for d in potential_duplicates if 0.8 < d['total_similarity'] <= 0.9])
            low_similarity = len([d for d in potential_duplicates if d['total_similarity'] <= 0.8])
            
            print(f'   –í—ã—Å–æ–∫–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å (>90%): {high_similarity}')
            print(f'   –°—Ä–µ–¥–Ω—è—è —Å—Ö–æ–∂–µ—Å—Ç—å (80-90%): {medium_similarity}')
            print(f'   –ù–∏–∑–∫–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å (<80%): {low_similarity}')
        else:
            print('   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏')

if __name__ == '__main__':
    check_domain_similarity()


