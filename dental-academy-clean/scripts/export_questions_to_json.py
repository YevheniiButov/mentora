#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª
"""

import json
import sys
import os
from datetime import datetime
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import app
from models import Question, BIGDomain, IRTParameters
from extensions import db

def export_questions_to_json():
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ JSON —Ñ–∞–π–ª"""
    
    print('üì§ –≠–ö–°–ü–û–†–¢ –í–û–ü–†–û–°–û–í –í JSON –§–ê–ô–õ')
    print('=' * 50)
    
    with app.app_context():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Å –∏—Ö –¥–æ–º–µ–Ω–∞–º–∏ –∏ IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        questions = Question.query.options(
            db.joinedload(Question.big_domain),
            db.joinedload(Question.irt_parameters)
        ).order_by(Question.id).all()
        
        print(f'üìä –ù–∞–π–¥–µ–Ω–æ {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_data = []
        
        for question in questions:
            # –ü–æ–ª—É—á–∞–µ–º IRT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            irt_params = question.irt_parameters
            irt_data = None
            if irt_params:
                irt_data = {
                    'difficulty': irt_params.difficulty,
                    'discrimination': irt_params.discrimination,
                    'guessing': irt_params.guessing,
                    'calibration_date': irt_params.calibration_date.isoformat() if irt_params.calibration_date else None
                }
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–º–µ–Ω–µ
            domain_info = None
            if question.big_domain:
                domain_info = {
                    'code': question.big_domain.code,
                    'name': question.big_domain.name,
                    'weight_percentage': question.big_domain.weight_percentage
                }
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≤–æ–ø—Ä–æ—Å–∞
            question_data = {
                'id': question.id,
                'text': question.text,
                'options': question.options,
                'correct_answer_index': question.correct_answer_index,
                'correct_answer_text': question.correct_answer_text,
                'explanation': question.explanation,
                'category': question.category,
                'domain': question.domain,  # —Å—Ç—Ä–æ–∫–∞ –¥–æ–º–µ–Ω–∞
                'domain_info': domain_info,  # –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–º–µ–Ω–µ
                'difficulty_level': question.difficulty_level,
                'question_type': question.question_type,
                'clinical_context': question.clinical_context,
                'learning_objectives': question.learning_objectives,
                'image_url': question.image_url,
                'tags': question.tags,
                'irt_parameters': irt_data,
                'created_at': question.created_at.isoformat() if question.created_at else None,
                'updated_at': question.updated_at.isoformat() if question.updated_at else None
            }
            
            export_data.append(question_data)
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f'questions_export_{timestamp}.json'
        filepath = os.path.join(os.path.dirname(__file__), filename)
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, ensure_ascii=False, indent=2)
            
            print(f'‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
            print(f'üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}')
            print(f'üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(export_data)}')
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–æ–º–µ–Ω–∞–º
            domain_stats = {}
            for question in export_data:
                domain = question['domain']
                if domain not in domain_stats:
                    domain_stats[domain] = 0
                domain_stats[domain] += 1
            
            print(f'\nüìã –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –î–û–ú–ï–ù–ê–ú:')
            print(f'   {"–î–æ–º–µ–Ω":<20} {"–í–æ–ø—Ä–æ—Å–æ–≤":<10}')
            print('   ' + '-' * 30)
            
            for domain, count in sorted(domain_stats.items()):
                print(f'   {domain:<20} {count:<10}')
            
            return filepath
            
        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}')
            return None

def create_summary_report(filepath):
    """–°–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –æ–± —ç–∫—Å–ø–æ—Ä—Ç–µ"""
    
    if not filepath:
        return
    
    report_filename = filepath.replace('.json', '_report.md')
    
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        total_questions = len(data)
        domains_with_irt = 0
        domains_without_irt = 0
        
        domain_stats = {}
        irt_stats = {'with_irt': 0, 'without_irt': 0}
        
        for question in data:
            domain = question['domain']
            if domain not in domain_stats:
                domain_stats[domain] = {'total': 0, 'with_irt': 0, 'without_irt': 0}
            
            domain_stats[domain]['total'] += 1
            
            if question['irt_parameters']:
                domain_stats[domain]['with_irt'] += 1
                irt_stats['with_irt'] += 1
            else:
                domain_stats[domain]['without_irt'] += 1
                irt_stats['without_irt'] += 1
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report_content = f"""# –û—Ç—á–µ—Ç –æ–± —ç–∫—Å–ø–æ—Ä—Ç–µ –≤–æ–ø—Ä–æ—Å–æ–≤

## –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- **–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
- **–§–∞–π–ª**: {os.path.basename(filepath)}
- **–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤**: {total_questions}

## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
- **–° IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏**: {irt_stats['with_irt']} ({irt_stats['with_irt']/total_questions*100:.1f}%)
- **–ë–µ–∑ IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤**: {irt_stats['without_irt']} ({irt_stats['without_irt']/total_questions*100:.1f}%)

## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–º–µ–Ω–∞–º

| –î–æ–º–µ–Ω | –í—Å–µ–≥–æ | –° IRT | –ë–µ–∑ IRT | % —Å IRT |
|-------|-------|-------|---------|---------|
"""
        
        for domain, stats in sorted(domain_stats.items()):
            irt_percentage = stats['with_irt'] / stats['total'] * 100 if stats['total'] > 0 else 0
            report_content += f"| {domain} | {stats['total']} | {stats['with_irt']} | {stats['without_irt']} | {irt_percentage:.1f}% |\n"
        
        report_content += f"""
## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞
–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏:
- `id`: —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
- `question_text`: —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
- `options`: –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
- `correct_answer`: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
- `explanation`: –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
- `difficulty_level`: —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
- `domain`: –∫–æ–¥ –¥–æ–º–µ–Ω–∞
- `domain_info`: –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–º–µ–Ω–µ
- `irt_parameters`: IRT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
- `created_at`: –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
- `updated_at`: –¥–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

## –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
–≠—Ç–æ—Ç —Ñ–∞–π–ª –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è:
- –†–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
- –ò–º–ø–æ—Ä—Ç–∞ –≤ –¥—Ä—É–≥—É—é —Å–∏—Å—Ç–µ–º—É
- –ê–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤
- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
"""
        
        with open(report_filename, 'w', encoding='utf-8') as f:
            f.write(report_content)
        
        print(f'üìÑ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {report_filename}')
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}')

if __name__ == '__main__':
    print('üöÄ –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤...')
    
    filepath = export_questions_to_json()
    
    if filepath:
        create_summary_report(filepath)
        print('\n‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!')
    else:
        print('\n‚ùå –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏!')
