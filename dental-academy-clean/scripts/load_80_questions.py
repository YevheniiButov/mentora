#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ 80 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import app, db
from models import Question, QuestionCategory, IRTParameters, BIGDomain
from datetime import datetime, timezone
import json

def create_categories():
    """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    
    with app.app_context():
        categories = [
            "–¢–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è",
            "–•–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è", 
            "–û—Ä—Ç–æ–ø–µ–¥–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è",
            "–û—Ä—Ç–æ–¥–æ–Ω—Ç–∏—è",
            "–î–µ—Ç—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è",
            "–≠—Ç–∏–∫–∞ –∏ –ø—Ä–∞–≤–æ",
            "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
            "–ù–µ–æ—Ç–ª–æ–∂–Ω–∞—è –ø–æ–º–æ—â—å",
            "–§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è",
            "–ê–Ω–∞—Ç–æ–º–∏—è –∏ —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—è"
        ]
        
        created_categories = {}
        
        for cat_name in categories:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            existing = QuestionCategory.query.filter_by(name=cat_name).first()
            if existing:
                created_categories[cat_name] = existing.id
                print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {cat_name} (ID: {existing.id})")
            else:
                category = QuestionCategory(name=cat_name)
                db.session.add(category)
                db.session.flush()
                created_categories[cat_name] = category.id
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {cat_name} (ID: {category.id})")
        
        db.session.commit()
        return created_categories

def get_domain_mapping():
    """–ü–æ–ª—É—á–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –¥–æ–º–µ–Ω–æ–≤ BIG"""
    
    with app.app_context():
        domains = BIGDomain.query.all()
        domain_mapping = {}
        
        for domain in domains:
            domain_mapping[domain.code] = domain.id
            domain_mapping[domain.name] = domain.id
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è
            domain_mapping[domain.code.upper()] = domain.id
            domain_mapping[domain.code.lower()] = domain.id
        
        print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–º–µ–Ω—ã:")
        for domain in domains:
            print(f"   {domain.code} -> {domain.name} (ID: {domain.id})")
        
        return domain_mapping

def create_question_with_irt(question_data, categories, domains):
    """–°–æ–∑–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å —Å IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    
    with app.app_context():
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –¥–æ–º–µ–Ω—É –∏–ª–∏ —Ç–∏–ø—É –≤–æ–ø—Ä–æ—Å–∞
        category_name = question_data.get('category', '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞')
        category_id = categories.get(category_name, categories.get('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', 1))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–µ–Ω
        domain_code = question_data.get('domain', 'THER')
        domain_id = domains.get(domain_code, domains.get('THER', 1))
        
        # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
        question = Question(
            text=question_data['text'],
            options=json.dumps(question_data['options']),
            correct_answer=question_data['correct_answer'],
            explanation=question_data['explanation'],
            category_id=category_id,
            big_domain_id=domain_id,
            difficulty_level=question_data.get('difficulty_level', 3),
            question_type=question_data.get('question_type', 'multiple_choice'),
            clinical_context=question_data.get('clinical_context', '')
        )
        
        db.session.add(question)
        db.session.flush()
        
        # –°–æ–∑–¥–∞–µ–º IRT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        irt_params = question_data['irt_params']
        irt = IRTParameters(
            question_id=question.id,
            difficulty=irt_params['difficulty'],
            discrimination=irt_params['discrimination'],
            guessing=irt_params['guessing']
        )
        
        db.session.add(irt)
        db.session.commit()
        
        return question.id

def load_sample_questions():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ 80 –≤–æ–ø—Ä–æ—Å–æ–≤)"""
    
    print("\nüìù –ó–ê–ì–†–£–ó–ö–ê –í–û–ü–†–û–°–û–í")
    print("=" * 40)
    
    with app.app_context():
        categories = create_categories()
        domains = get_domain_mapping()
        
        # –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–æ–ø—Ä–æ—Å–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ)
        sample_questions = [
            {
                "text": "–≠—Ç–∏—á–µ—Å–∫–∏–µ –¥–∏–ª–µ–º–º—ã - –ê–≤—Ç–æ–Ω–æ–º–∏—è vs. –±–ª–∞–≥–æ–¥–µ—è–Ω–∏–µ. 70-–ª–µ—Ç–Ω–∏–π –ø–∞—Ü–∏–µ–Ω—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º–∏ –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π —ç–∫—Å—Ç—Ä–∞–∫—Ü–∏–∏ –∏–Ω—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑—É–±–∞. –ü–æ–Ω–∏–º–∞–µ—Ç —Ä–∏—Å–∫–∏ —Å–µ–ø—Å–∏—Å–∞, –Ω–æ '–Ω–µ —Ö–æ—á–µ—Ç —Ç–µ—Ä—è—Ç—å –±–æ–ª—å—à–µ –∑—É–±–æ–≤'. –°–µ–º—å—è –Ω–∞—Å—Ç–∞–∏–≤–∞–µ—Ç –Ω–∞ –ª–µ—á–µ–Ω–∏–∏. –ü–∞—Ü–∏–µ–Ω—Ç –ø—Å–∏—Ö–∏—á–µ—Å–∫–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–µ–Ω, –Ω–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω –∏–∑-–∑–∞ –ø–æ—Ç–µ—Ä–∏ –∑—É–±–æ–≤. –ö–∞–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —ç—Ç–æ —ç—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ –º–µ–∂–¥—É –∞–≤—Ç–æ–Ω–æ–º–∏–µ–π –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º –±–ª–∞–≥–æ–¥–µ—è–Ω–∏–µ–º?",
                "options": [
                    "–£–≤–∞–∂–∞—Ç—å –∞–≤—Ç–æ–Ω–æ–º–∏—é –ø–∞—Ü–∏–µ–Ω—Ç–∞ - —Å–æ–±–ª—é–¥–∞—Ç—å –æ—Ç–∫–∞–∑ –æ—Ç –ª–µ—á–µ–Ω–∏—è",
                    "–û—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–Ω–æ–º–∏—é –∏–∑-–∑–∞ —Å–µ—Ä—å–µ–∑–Ω–æ–≥–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Ä–∏—Å–∫–∞", 
                    "–°–æ–≥–ª–∞—Å–∏–µ —Å–µ–º—å–∏ –º–æ–∂–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å –æ—Ç–∫–∞–∑ –ø–∞—Ü–∏–µ–Ω—Ç–∞",
                    "–ü—Å–∏—Ö–∏–∞—Ç—Ä–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏",
                    "–ö–æ–º–ø—Ä–æ–º–∏—Å—Å–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ —Å –º–µ–Ω–µ–µ –∏–Ω–≤–∞–∑–∏–≤–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º"
                ],
                "correct_answer": "–£–≤–∞–∂–∞—Ç—å –∞–≤—Ç–æ–Ω–æ–º–∏—é –ø–∞—Ü–∏–µ–Ω—Ç–∞ - —Å–æ–±–ª—é–¥–∞—Ç—å –æ—Ç–∫–∞–∑ –æ—Ç –ª–µ—á–µ–Ω–∏—è",
                "explanation": "–ü—Ä–∏–Ω—Ü–∏–ø –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π —ç—Ç–∏–∫–∏ –∞–≤—Ç–æ–Ω–æ–º–∏–∏ —Ç—Ä–µ–±—É–µ—Ç —É–≤–∞–∂–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏–π –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞, –¥–∞–∂–µ –∫–æ–≥–¥–∞ –æ–Ω–∏ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–æ–∑–Ω–æ –Ω–µ—Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω—ã. –ü–∞—Ü–∏–µ–Ω—Ç –ø–æ–Ω–∏–º–∞–µ—Ç –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.",
                "category": "–≠—Ç–∏–∫–∞ –∏ –ø—Ä–∞–≤–æ",
                "domain": "ETHIEK",
                "difficulty_level": 4,
                "question_type": "clinical_case",
                "clinical_context": "–≠—Ç–∏—á–µ—Å–∫–∞—è –¥–∏–ª–µ–º–º–∞ —Å –∞–≤—Ç–æ–Ω–æ–º–∏–µ–π –ø–∞—Ü–∏–µ–Ω—Ç–∞",
                "irt_params": {
                    "difficulty": 0.8,
                    "discrimination": 1.9,
                    "guessing": 0.17
                }
            }
        ]
        
        created_count = 0
        
        for i, q_data in enumerate(sample_questions, 1):
            try:
                question_id = create_question_with_irt(q_data, categories, domains)
                print(f"‚úÖ –í–æ–ø—Ä–æ—Å {i} —Å–æ–∑–¥–∞–Ω (ID: {question_id})")
                created_count += 1
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ {i}: {e}")
        
        print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {created_count}")
        return created_count

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üöÄ –ó–ê–ì–†–£–ó–ö–ê 80 –í–û–ü–†–û–°–û–í –° IRT –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò")
    print("=" * 50)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
        count = load_sample_questions()
        
        print(f"\nüéâ –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("=" * 50)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {count}")
        print("üìù –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö 80 –≤–æ–ø—Ä–æ—Å–æ–≤:")
        print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª scripts/load_80_questions.py")
        print("   2. –ó–∞–º–µ–Ω–∏—Ç–µ sample_questions –Ω–∞ –≤–∞—à–∏ 80 –≤–æ–ø—Ä–æ—Å–æ–≤")
        print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")

if __name__ == '__main__':
    main() 