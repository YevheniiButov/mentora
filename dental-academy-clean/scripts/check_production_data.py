#!/usr/bin/env python3
"""
Production Data Check and Load Script
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ production –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
"""

import sys
import os
import logging
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app import app, db
from models import Question, IRTParameters, BIGDomain, User
from utils.irt_engine import IRTEngine

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def check_database_status():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        with app.app_context():
            # Check questions
            questions_count = Question.query.count()
            logger.info(f"üìä –í–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑–µ: {questions_count}")
            
            # Check IRT parameters
            irt_count = IRTParameters.query.count()
            logger.info(f"üìä IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {irt_count}")
            
            # Check domains
            domains_count = BIGDomain.query.count()
            logger.info(f"üìä –î–æ–º–µ–Ω–æ–≤: {domains_count}")
            
            # Check users
            users_count = User.query.count()
            logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
            
            # Test IRT engine
            logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IRT Engine...")
            irt_engine = IRTEngine()
            test_question = irt_engine.select_initial_question()
            
            if test_question:
                logger.info(f"‚úÖ IRT Engine —Ä–∞–±–æ—Ç–∞–µ—Ç - –≤—ã–±—Ä–∞–Ω –≤–æ–ø—Ä–æ—Å: {test_question.id}")
                return True
            else:
                logger.error("‚ùå IRT Engine –Ω–µ –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
                return False
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def load_missing_data():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ"""
    logger.info("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # Import the production data loader
        from scripts.seed_production_data_runner import main as load_data
        
        # Run the data loader
        load_data()
        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def create_test_user():
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    logger.info("üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    
    try:
        with app.app_context():
            # Check if we have any users
            user_count = User.query.count()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {user_count}")
            
            if user_count == 0:
                logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
                
                # Create test user
                test_user = User(
                    username='test.user',
                    email='test@mentora.nl',
                    is_active=True
                )
                test_user.set_password('test123')
                db.session.add(test_user)
                db.session.commit()
                
                logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω")
                return True
            else:
                logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ")
                return True
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ production –¥–∞–Ω–Ω—ã—Ö...")
    
    # Check current status
    status_ok = check_database_status()
    
    if not status_ok:
        logger.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
        
        # Try to load missing data
        logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        if load_missing_data():
            # Check again after loading
            logger.info("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏...")
            status_ok = check_database_status()
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return False
    
    # Ensure we have a test user
    create_test_user()
    
    if status_ok:
        logger.info("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        logger.error("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Å—Ç–∞–ª–∏—Å—å")
        return False

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)
