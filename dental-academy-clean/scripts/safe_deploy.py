#!/usr/bin/env python3
"""
–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–µ–ø–ª–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è Mentora
–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Ç–µ—Ä—é –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –¥–µ–ø–ª–æ–µ
"""

import os
import sys
import shutil
import subprocess
import json
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def log_message(message, level="INFO"):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] {level}: {message}")

def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from app import app
        from models import db, User
        
        with app.app_context():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            db.session.execute('SELECT 1')
            user_count = User.query.count()
            log_message(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}")
            return True
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {str(e)}", "ERROR")
        return False

def create_backup():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from app import app
        from models import db, User, Contact, Profession
        
        backup_dir = Path("backups")
        backup_dir.mkdir(exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_file = backup_dir / f"backup_{timestamp}.json"
        
        with app.app_context():
            backup_data = {
                'timestamp': timestamp,
                'users': [],
                'contacts': [],
                'professions': [],
                'metadata': {
                    'user_count': User.query.count(),
                    'contact_count': Contact.query.count() if hasattr(Contact, 'query') else 0,
                    'profession_count': Profession.query.count() if hasattr(Profession, 'query') else 0
                }
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            for user in User.query.all():
                user_data = {
                    'id': user.id,
                    'email': user.email,
                    'first_name': user.first_name,
                    'last_name': user.last_name,
                    'role': user.role,
                    'is_active': user.is_active,
                    'created_at': user.created_at.isoformat() if user.created_at else None,
                    'last_login': user.last_login.isoformat() if user.last_login else None
                }
                backup_data['users'].append(user_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã (–µ—Å–ª–∏ –º–æ–¥–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            try:
                for contact in Contact.query.all():
                    contact_data = {
                        'id': contact.id,
                        'full_name': contact.full_name,
                        'email': contact.email,
                        'phone': contact.phone,
                        'profession_id': contact.profession_id,
                        'contact_status': contact.contact_status,
                        'created_at': contact.created_at.isoformat() if contact.created_at else None
                    }
                    backup_data['contacts'].append(contact_data)
            except:
                log_message("‚ö†Ô∏è –ú–æ–¥–µ–ª—å Contact –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ (–µ—Å–ª–∏ –º–æ–¥–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            try:
                for profession in Profession.query.all():
                    profession_data = {
                        'id': profession.id,
                        'name': profession.name,
                        'name_nl': profession.name_nl,
                        'code': profession.code,
                        'category': profession.category,
                        'is_active': profession.is_active,
                        'created_at': profession.created_at.isoformat() if profession.created_at else None
                    }
                    backup_data['professions'].append(profession_data)
            except:
                log_message("‚ö†Ô∏è –ú–æ–¥–µ–ª—å Profession –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            with open(backup_file, 'w', encoding='utf-8') as f:
                json.dump(backup_data, f, ensure_ascii=False, indent=2)
            
            log_message(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_file}")
            log_message(f"üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {len(backup_data['users'])} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            return str(backup_file)
            
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {str(e)}", "ERROR")
        return None

def restore_backup(backup_file):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    try:
        from app import app
        from models import db, User, Contact, Profession
        
        if not os.path.exists(backup_file):
            log_message(f"‚ùå –§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {backup_file}", "ERROR")
            return False
        
        with open(backup_file, 'r', encoding='utf-8') as f:
            backup_data = json.load(f)
        
        with app.app_context():
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            restored_users = 0
            for user_data in backup_data['users']:
                existing_user = User.query.filter_by(email=user_data['email']).first()
                if not existing_user:
                    user = User(
                        email=user_data['email'],
                        first_name=user_data['first_name'],
                        last_name=user_data['last_name'],
                        role=user_data['role'],
                        is_active=user_data['is_active']
                    )
                    db.session.add(user)
                    restored_users += 1
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã (–µ—Å–ª–∏ –º–æ–¥–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            restored_contacts = 0
            try:
                for contact_data in backup_data['contacts']:
                    existing_contact = Contact.query.filter_by(email=contact_data['email']).first()
                    if not existing_contact:
                        contact = Contact(
                            full_name=contact_data['full_name'],
                            email=contact_data['email'],
                            phone=contact_data['phone'],
                            profession_id=contact_data['profession_id'],
                            contact_status=contact_data['contact_status']
                        )
                        db.session.add(contact)
                        restored_contacts += 1
            except:
                log_message("‚ö†Ô∏è –ú–æ–¥–µ–ª—å Contact –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ (–µ—Å–ª–∏ –º–æ–¥–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            restored_professions = 0
            try:
                for profession_data in backup_data['professions']:
                    existing_profession = Profession.query.filter_by(code=profession_data['code']).first()
                    if not existing_profession:
                        profession = Profession(
                            name=profession_data['name'],
                            name_nl=profession_data['name_nl'],
                            code=profession_data['code'],
                            category=profession_data['category'],
                            is_active=profession_data['is_active']
                        )
                        db.session.add(profession)
                        restored_professions += 1
            except:
                log_message("‚ö†Ô∏è –ú–æ–¥–µ–ª—å Profession –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ")
            
            db.session.commit()
            
            log_message(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:")
            log_message(f"   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {restored_users}")
            log_message(f"   - –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {restored_contacts}")
            log_message(f"   - –ü—Ä–æ—Ñ–µ—Å—Å–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {restored_professions}")
            
            return True
            
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}", "ERROR")
        return False

def ensure_admin_user():
    """–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        from app import app
        from models import db, User
        
        with app.app_context():
            admin = User.query.filter_by(role='admin').first()
            if not admin:
                log_message("‚ö†Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º...")
                
                # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
                admin = User(
                    email='admin@mentora.com',
                    first_name='Admin',
                    last_name='Mentora',
                    role='admin',
                    is_active=True
                )
                admin.set_password('admin123')  # –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
                
                db.session.add(admin)
                db.session.commit()
                
                log_message("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: admin@mentora.com / admin123")
            else:
                log_message(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω: {admin.email}")
                
            return True
            
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}", "ERROR")
        return False

def run_database_migrations():
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        log_message("üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        from app import app
        from models import db
        
        with app.app_context():
            db.create_all()
            log_message("‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            
        return True
        
    except Exception as e:
        log_message(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π: {str(e)}", "ERROR")
        return False

def cleanup_old_backups():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)"""
    try:
        backup_dir = Path("backups")
        if not backup_dir.exists():
            return
        
        backup_files = list(backup_dir.glob("backup_*.json"))
        backup_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–ø–∏–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
        for old_backup in backup_files[10:]:
            old_backup.unlink()
            log_message(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {old_backup.name}")
            
    except Exception as e:
        log_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∫–æ–ø–∏–π: {str(e)}", "WARNING")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è"""
    log_message("üöÄ –ù–∞—á–∞–ª–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è Mentora")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    if not check_database_connection():
        log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –¥–µ–ø–ª–æ–π", "ERROR")
        return False
    
    # 2. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_file = create_backup()
    if not backup_file:
        log_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –¥–µ–ø–ª–æ–π", "ERROR")
        return False
    
    # 3. –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    if not run_database_migrations():
        log_message("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏", "ERROR")
        restore_backup(backup_file)
        return False
    
    # 4. –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not ensure_admin_user():
        log_message("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", "ERROR")
        return False
    
    # 5. –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
    cleanup_old_backups()
    
    log_message("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    return True

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)
