#!/usr/bin/env python3
"""
Force Load Production Data Script
–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ production
"""

import sys
import os
import logging
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app import app, db
from models import Question, IRTParameters, BIGDomain, User
from scripts.seed_production_data_runner import main as load_data

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def force_load_data():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"""
    logger.info("üöÄ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ production...")
    
    try:
        with app.app_context():
            # Check current state
            questions_before = Question.query.count()
            irt_before = IRTParameters.query.count()
            domains_before = BIGDomain.query.count()
            
            logger.info(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏:")
            logger.info(f"  - –í–æ–ø—Ä–æ—Å–æ–≤: {questions_before}")
            logger.info(f"  - IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {irt_before}")
            logger.info(f"  - –î–æ–º–µ–Ω–æ–≤: {domains_before}")
            
            # Force load data
            logger.info("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            load_data()
            
            # Check after loading
            questions_after = Question.query.count()
            irt_after = IRTParameters.query.count()
            domains_after = BIGDomain.query.count()
            
            logger.info(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏:")
            logger.info(f"  - –í–æ–ø—Ä–æ—Å–æ–≤: {questions_after}")
            logger.info(f"  - IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {irt_after}")
            logger.info(f"  - –î–æ–º–µ–Ω–æ–≤: {domains_after}")
            
            # Test IRT engine
            logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IRT Engine...")
            from utils.irt_engine import IRTEngine
            irt_engine = IRTEngine()
            test_question = irt_engine.select_initial_question()
            
            if test_question:
                logger.info(f"‚úÖ IRT Engine —Ä–∞–±–æ—Ç–∞–µ—Ç - –≤—ã–±—Ä–∞–Ω –≤–æ–ø—Ä–æ—Å: {test_question.id}")
                logger.info("‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                logger.error("‚ùå IRT Engine –Ω–µ –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏")
                return False
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = force_load_data()
    sys.exit(0 if success else 1)

if __name__ == '__main__':
    main()
