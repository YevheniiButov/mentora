#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è production –¥–µ–ø–ª–æ—è
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
"""

import os
import sys
import json
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

from app import app
from extensions import db
from models import (
    BIGDomain, LearningPath, Subject, Module, Lesson,
    Question, IRTParameters, VirtualPatientScenario,
    Achievement, User, UserProgress
)

def load_bi_toets_structure():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É BI-toets –ø—É—Ç–µ–π –æ–±—É—á–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ BI-toets 2025"""
    print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º BI-toets —Å—Ç—Ä—É–∫—Ç—É—Ä—É...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—É—Ç–∏ –æ–±—É—á–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ BI-toets 2025 (9 –ø—É—Ç–µ–π)
    learning_paths = [
        {
            'id': 'basic_medical_sciences',
            'name': 'Basic Medical Sciences',
            'name_nl': 'Basic Medical Sciences',
            'name_ru': '–ë–∞–∑–æ–≤—ã–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –Ω–∞—É–∫–∏',
            'description': '–û–±—â–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –Ω–∞—É–∫–∏ - Multiple choice —Ñ–æ—Ä–º–∞—Ç',
            'exam_component': 'THEORETICAL',
            'exam_weight': 15.0,
            'exam_type': 'multiple_choice',
            'duration_weeks': 8,
            'total_estimated_hours': 80
        },
        {
            'id': 'thk_1',
            'name': 'THK I - Tandheelkunde Kern I',
            'name_nl': 'THK I - Tandheelkunde Kern I',
            'name_ru': 'THK I - –û—Å–Ω–æ–≤—ã —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏ I',
            'description': '–ö–∞—Ä–∏–æ–ª–æ–≥–∏—è, –°–ª—é–Ω–∞, –≠–Ω–¥–æ–¥–æ–Ω—Ç–∏—è, –î–µ—Ç—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è, –ü–∞—Ä–æ–¥–æ–Ω—Ç–æ–ª–æ–≥–∏—è',
            'exam_component': 'THEORETICAL',
            'exam_weight': 25.0,
            'exam_type': 'multiple_choice',
            'duration_weeks': 12,
            'total_estimated_hours': 120
        },
        {
            'id': 'thk_2',
            'name': 'THK II - Tandheelkunde Kern II',
            'name_nl': 'THK II - Tandheelkunde Kern II',
            'name_ru': 'THK II - –û—Å–Ω–æ–≤—ã —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏ II',
            'description': '–ü—Ä–æ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ, –û—Ä—Ç–æ–¥–æ–Ω—Ç–∏—è, –ß–µ–ª—é—Å—Ç–Ω–æ-–ª–∏—Ü–µ–≤–∞—è —Ö–∏—Ä—É—Ä–≥–∏—è, –ö–∏–Ω–µ–∑–∏–æ–ª–æ–≥–∏—è',
            'exam_component': 'THEORETICAL',
            'exam_weight': 25.0,
            'exam_type': 'multiple_choice',
            'duration_weeks': 12,
            'total_estimated_hours': 120
        },
        {
            'id': 'radiology',
            'name': 'Radiologie',
            'name_nl': 'Radiologie',
            'name_ru': '–†–µ–Ω—Ç–≥–µ–Ω–æ–ª–æ–≥–∏—è',
            'description': '–†–µ–Ω—Ç–≥–µ–Ω–æ–ª–æ–≥–∏—è - Multiple choice —Ñ–æ—Ä–º–∞—Ç',
            'exam_component': 'THEORETICAL',
            'exam_weight': 10.0,
            'exam_type': 'multiple_choice',
            'duration_weeks': 6,
            'total_estimated_hours': 60
        },
        {
            'id': 'statistics',
            'name': 'Statistiek voor tandheelkunde',
            'name_nl': 'Statistiek voor tandheelkunde',
            'name_ru': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏',
            'description': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - Multiple choice, Open book',
            'exam_component': 'METHODOLOGY',
            'exam_weight': 8.0,
            'exam_type': 'open_book',
            'duration_weeks': 4,
            'total_estimated_hours': 40
        },
        {
            'id': 'research_methodology',
            'name': 'Onderzoeksmethodologie',
            'name_nl': 'Onderzoeksmethodologie',
            'name_ru': '–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π',
            'description': '–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è - Short answer, Open book (PICO, –¥–∏–∑–∞–π–Ω –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π)',
            'exam_component': 'METHODOLOGY',
            'exam_weight': 7.0,
            'exam_type': 'open_book',
            'duration_weeks': 4,
            'total_estimated_hours': 40
        },
        {
            'id': 'simodont_training',
            'name': 'Praktische vaardigheden (Simodont voorbereiding)',
            'name_nl': 'Praktische vaardigheden (Simodont voorbereiding)',
            'name_ru': '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ (–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ Simodont)',
            'description': '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —ç–∫–∑–∞–º–µ–Ω—ã - Manual vaardigheden, Caries excavation, Endodontic preparation, Kroon preparation',
            'exam_component': 'PRACTICAL',
            'exam_weight': 20.0,
            'exam_type': 'practical',
            'duration_weeks': 10,
            'total_estimated_hours': 100
        },
        {
            'id': 'communication_ethics',
            'name': 'Communicatie en ethiek',
            'name_nl': 'Communicatie en ethiek',
            'name_ru': '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è –∏ —ç—Ç–∏–∫–∞',
            'description': 'Intake gesprek, Ethics & Social Dentistry',
            'exam_component': 'COMMUNICATION',
            'exam_weight': 10.0,
            'exam_type': 'interview',
            'duration_weeks': 6,
            'total_estimated_hours': 60
        },
        {
            'id': 'treatment_planning',
            'name': 'Behandelplanning',
            'name_nl': 'Behandelplanning',
            'name_ru': '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–µ—á–µ–Ω–∏—è',
            'description': 'Treatment Planning - Casus 1, 2, 3, Endodontics casus, Gebits reiniging',
            'exam_component': 'CLINICAL',
            'exam_weight': 15.0,
            'exam_type': 'case_study',
            'duration_weeks': 8,
            'total_estimated_hours': 80
        }
    ]
    
    for path_data in learning_paths:
        existing = LearningPath.query.get(path_data['id'])
        if not existing:
            path = LearningPath(**path_data)
            db.session.add(path)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—É—Ç—å: {path_data['name']}")
    
    db.session.commit()

def load_domains():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç 30 –¥–æ–º–µ–Ω–æ–≤ BI-toets"""
    print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–º–µ–Ω—ã BI-toets...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–æ–º–µ–Ω—ã
    existing_domains = BIGDomain.query.count()
    if existing_domains > 0:
        print(f"‚úÖ –î–æ–º–µ–Ω—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç ({existing_domains} –¥–æ–º–µ–Ω–æ–≤)")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–º–µ–Ω—ã —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å
    BIGDomain.initialize_domains()
    print("‚úÖ –î–æ–º–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

def load_questions():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–∑ JSON —Ñ–∞–π–ª–æ–≤"""
    print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤–æ–ø—Ä–æ—Å—ã
    existing_questions = Question.query.count()
    if existing_questions > 0:
        print(f"‚úÖ –í–æ–ø—Ä–æ—Å—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç ({existing_questions} –≤–æ–ø—Ä–æ—Å–æ–≤)")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    questions_path = Path(__file__).parent / '160_2.json'
    if questions_path.exists():
        with open(questions_path, 'r', encoding='utf-8') as f:
            questions_data = json.load(f)
        
        for q_data in questions_data:
            # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
            question = Question(
                text=q_data['text'],
                options=q_data['options'],
                correct_answer_index=q_data['correct_answer_index'],
                correct_answer_text=q_data['correct_answer_text'],
                explanation=q_data['explanation'],
                category=q_data.get('category', 'general'),
                domain=q_data.get('domain', 'general'),
                difficulty_level=q_data.get('difficulty_level', 2)
            )
            db.session.add(question)
            db.session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID
            
            # –°–æ–∑–¥–∞–µ–º IRT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if 'irt_params' in q_data:
                irt_params = IRTParameters(
                    question_id=question.id,
                    difficulty=q_data['irt_params'].get('difficulty', 0.0),
                    discrimination=q_data['irt_params'].get('discrimination', 1.0),
                    guessing=q_data['irt_params'].get('guessing', 0.25)
                )
                db.session.add(irt_params)
        
        db.session.commit()
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(questions_data)} –≤–æ–ø—Ä–æ—Å–æ–≤")
    else:
        print("‚ö†Ô∏è –§–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")

def load_learning_cards():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—É—á–∞—é—â–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ –≤—Å–µ—Ö –ø–∞–ø–æ–∫ cards"""
    print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–∞—é—â–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏...")
    
    cards_dir = Path(__file__).parent.parent / 'cards'
    if not cards_dir.exists():
        print("‚ö†Ô∏è –ü–∞–ø–∫–∞ cards –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    total_cards = 0
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–∞–ø–∫–∞–º –≤ cards
    for category_dir in cards_dir.iterdir():
        if not category_dir.is_dir():
            continue
            
        category_name = category_dir.name
        print(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category_name}")
        
        # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
        card_files = list(category_dir.glob('*.json')) + list(category_dir.glob('*.txt'))
        
        for card_file in card_files:
            try:
                if card_file.suffix == '.json':
                    with open(card_file, 'r', encoding='utf-8') as f:
                        cards_data = json.load(f)
                        
                    if isinstance(cards_data, list):
                        for card in cards_data:
                            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –ë–î
                            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å—á–∏—Ç–∞–µ–º
                            total_cards += 1
                    else:
                        total_cards += 1
                        
                elif card_file.suffix == '.txt':
                    # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ—Å—Ç–æ —Å—á–∏—Ç–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ –∫–∞—Ä—Ç–æ—á–∫–∏
                    with open(card_file, 'r', encoding='utf-8') as f:
                        lines = f.readlines()
                        total_cards += len([line for line in lines if line.strip()])
                        
            except json.JSONDecodeError as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ JSON –≤ {card_file.name}: {e}")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {card_file.name}: {e}")
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {total_cards} –æ–±—É—á–∞—é—â–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ {len(list(cards_dir.iterdir()))} –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö")

def load_tests_from_cards():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç—ã –∏–∑ –ø–∞–ø–æ–∫ cards"""
    print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç—ã –∏–∑ –ø–∞–ø–æ–∫ cards...")
    
    cards_dir = Path(__file__).parent.parent / 'cards'
    if not cards_dir.exists():
        print("‚ö†Ô∏è –ü–∞–ø–∫–∞ cards –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    total_tests = 0
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–∞–ø–∫–∞–º –≤ cards
    for category_dir in cards_dir.iterdir():
        if not category_dir.is_dir():
            continue
            
        category_name = category_dir.name
        print(f"üìÅ –ò—â–µ–º —Ç–µ—Å—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_name}")
        
        # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å —Ç–µ—Å—Ç–∞–º–∏
        test_files = list(category_dir.glob('*test*.json')) + list(category_dir.glob('*tests*.json'))
        
        for test_file in test_files:
            try:
                with open(test_file, 'r', encoding='utf-8') as f:
                    test_data = json.load(f)
                    
                if isinstance(test_data, list):
                    total_tests += len(test_data)
                else:
                    total_tests += 1
                    
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ç–µ—Å—Ç: {test_file.name}")
                        
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ—Å—Ç–∞ {test_file}: {e}")
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {total_tests} —Ç–µ—Å—Ç–æ–≤ –≤ –ø–∞–ø–∫–∞—Ö cards")

def load_virtual_patients():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤"""
    print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç—ã
    existing_vp = VirtualPatientScenario.query.count()
    if existing_vp > 0:
        print(f"‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç ({existing_vp} –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤)")
        return
    
    vp_dir = Path(__file__).parent.parent / 'cards' / 'virtual_patient'
    if vp_dir.exists():
        loaded_count = 0
        for vp_file in vp_dir.glob('*.json'):
            try:
                with open(vp_file, 'r', encoding='utf-8') as f:
                    vp_data = json.load(f)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                if isinstance(vp_data, dict) and 'title' in vp_data:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º title (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Å–ª–æ–≤–∞—Ä–µ–º —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏)
                    title = vp_data['title']
                    if isinstance(title, dict):
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
                        title = title.get('en', title.get('nl', title.get('ru', str(title))))
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º description (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Å–ª–æ–≤–∞—Ä–µ–º —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏)
                    description = vp_data.get('description', '')
                    if isinstance(description, dict):
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
                        description = description.get('en', description.get('nl', description.get('ru', str(description))))
                    
                    scenario = VirtualPatientScenario(
                        title=title,
                        description=description,
                        difficulty=vp_data.get('difficulty', 'medium'),
                        category=vp_data.get('category', 'diagnosis'),
                        scenario_data=json.dumps(vp_data.get('scenario_data', {})),
                        is_published=True
                    )
                    db.session.add(scenario)
                    loaded_count += 1
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–∞—Ü–∏–µ–Ω—Ç: {title}")
                else:
                    print(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ {vp_file.name}")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {vp_file.name}: {e}")
        
        db.session.commit()
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {loaded_count} –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")
    else:
        print("‚ö†Ô∏è –ü–∞–ø–∫–∞ virtual_patient –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

def load_achievements():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∫—Ä–∏–ø—Ç
    try:
        from scripts.init_achievements_simple import init_achievements
        init_achievements()
        print("‚úÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")

def create_admin_user():
    """–°–æ–∑–¥–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    print("üîÑ –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    
    admin_email = "admin@mentora.nl"
    admin = User.query.filter_by(email=admin_email).first()
    
    if not admin:
        from werkzeug.security import generate_password_hash
        admin = User(
            email=admin_email,
            username="admin",
            password_hash=generate_password_hash("admin123"),
            first_name="Admin",
            last_name="User",
            role="admin",
            is_active=True,
            registration_completed=True
        )
        db.session.add(admin)
        db.session.commit()
        print("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: admin@mentora.nl / admin123")
    else:
        print("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

def create_learning_structure():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—É—á–µ–Ω–∏—è, —Å–≤—è–∑—ã–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ –ø–∞–ø–∫–∏ cards —Å –ø—É—Ç—è–º–∏ –æ–±—É—á–µ–Ω–∏—è"""
    print("üîÑ –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—É—á–µ–Ω–∏—è...")
    
    # –ú–∞–ø–ø–∏–Ω–≥ –ø–∞–ø–æ–∫ cards –∫ –ø—É—Ç—è–º –æ–±—É—á–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ BI-toets 2025
    cards_to_paths_mapping = {
        # Basic Medical Sciences (–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ —ç–∫–∑–∞–º–µ–Ω—ã)
        'anatomy': 'basic_medical_sciences',  # –ê–Ω–∞—Ç–æ–º–∏—è
        'saliva': 'basic_medical_sciences',   # –°–ª—é–Ω–∞ –∏ –±–∏–æ—Ö–∏–º–∏—è
        
        # THK I - Tandheelkunde Kern I (–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ —ç–∫–∑–∞–º–µ–Ω—ã)
        'caries': 'thk_1',        # –ö–∞—Ä–∏–æ–ª–æ–≥–∏—è (Cariology)
        'endodontic': 'thk_1',    # –≠–Ω–¥–æ–¥–æ–Ω—Ç–∏—è (Endodontics)
        'pediatric': 'thk_1',     # –î–µ—Ç—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è (Paediatric dentistry)
        'periodontic': 'thk_1',   # –ü–∞—Ä–æ–¥–æ–Ω—Ç–æ–ª–æ–≥–∏—è (Periodontology)
        
        # THK II - Tandheelkunde Kern II (–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ —ç–∫–∑–∞–º–µ–Ω—ã)
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í THK II –ø—Ä–æ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ—Ä—Ç–æ–¥–æ–Ω—Ç–∏—è, —Ö–∏—Ä—É—Ä–≥–∏—è, –Ω–æ —É –Ω–∞—Å –Ω–µ—Ç —ç—Ç–∏—Ö –ø–∞–ø–æ–∫ –≤ cards/
        
        # Radiologie (–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ —ç–∫–∑–∞–º–µ–Ω—ã)
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –£ –Ω–∞—Å –Ω–µ—Ç –ø–∞–ø–∫–∏ radiology –≤ cards/
        
        # Statistiek voor tandheelkunde (–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ —ç–∫–∑–∞–º–µ–Ω—ã)
        'statistics': 'statistics', # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (Multiple choice, Open book)
        
        # Onderzoeksmethodologie (–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ —ç–∫–∑–∞–º–µ–Ω—ã)
        'Methodology': 'research_methodology', # –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è (Short answer, Open book)
        
        # Communicatie en ethiek (–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è –∏ —ç—Ç–∏–∫–∞)
        'virtual_patient': 'communication_ethics', # –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
        
        # Simodont Training (–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —ç–∫–∑–∞–º–µ–Ω—ã)
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –£ –Ω–∞—Å –Ω–µ—Ç –ø–∞–ø–∫–∏ simodont –≤ cards/
        
        # Behandelplanning (–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–µ—á–µ–Ω–∏—è)
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –£ –Ω–∞—Å –Ω–µ—Ç –ø–∞–ø–∫–∏ treatment_planning –≤ cards/
    }
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É—Ç–∏ –æ–±—É—á–µ–Ω–∏—è
    for cards_folder, path_id in cards_to_paths_mapping.items():
        print(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–ø–∫—É {cards_folder} –¥–ª—è –ø—É—Ç–∏ {path_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –æ–±—É—á–µ–Ω–∏—è
        learning_path = LearningPath.query.get(path_id)
        if not learning_path:
            print(f"‚ö†Ô∏è –ü—É—Ç—å –æ–±—É—á–µ–Ω–∏—è {path_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —ç—Ç–æ–π –ø–∞–ø–∫–∏
        subject_name = cards_folder.replace('_', ' ').title()
        subject = Subject.query.filter_by(
            name=subject_name,
            learning_path_id=learning_path.id
        ).first()
        
        if not subject:
            subject = Subject(
                name=subject_name,
                description=f"Subject {subject_name} for {learning_path.name}",
                learning_path_id=learning_path.id,
                order=len(Subject.query.filter_by(learning_path_id=learning_path.id).all()) + 1
            )
            db.session.add(subject)
            db.session.flush()
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: {subject_name}")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
        cards_dir = Path(__file__).parent.parent / 'cards' / cards_folder
        if cards_dir.exists():
            # –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª—å –¥–ª—è –æ–±—É—á–∞—é—â–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
            learning_module = Module.query.filter_by(
                title=f"Learning Cards {subject_name}",
                subject_id=subject.id
            ).first()
            
            if not learning_module:
                learning_module = Module(
                    title=f"Learning Cards {subject_name}",
                    description=f"Learning materials for {subject_name}",
                    subject_id=subject.id,
                    order=1,
                    module_type='learning_cards'
                )
                db.session.add(learning_module)
                db.session.flush()
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –º–æ–¥—É–ª—å: Learning Cards {subject_name}")
            
            # –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            test_module = Module.query.filter_by(
                title=f"Tests {subject_name}",
                subject_id=subject.id
            ).first()
            
            if not test_module:
                test_module = Module(
                    title=f"Tests {subject_name}",
                    description=f"Tests for {subject_name}",
                    subject_id=subject.id,
                    order=2,
                    module_type='tests'
                )
                db.session.add(test_module)
                db.session.flush()
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –º–æ–¥—É–ª—å: Tests {subject_name}")
            
            # –°–æ–∑–¥–∞–µ–º —É—Ä–æ–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–π–ª–æ–≤
            for file_path in cards_dir.iterdir():
                if file_path.is_file():
                    file_name = file_path.stem
                    file_ext = file_path.suffix
                    
                    if file_ext in ['.json', '.txt']:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                        if 'test' in file_name.lower():
                            module = test_module
                            lesson_type = 'test'
                        else:
                            module = learning_module
                            lesson_type = 'learning_card'
                        
                        # –°–æ–∑–¥–∞–µ–º —É—Ä–æ–∫
                        lesson = Lesson.query.filter_by(
                            title=file_name.replace('_', ' ').title(),
                            module_id=module.id
                        ).first()
                        
                        if not lesson:
                            lesson = Lesson(
                                title=file_name.replace('_', ' ').title(),
                                content=f"Content from file {file_path.name}",
                                content_type=lesson_type,
                                module_id=module.id,
                                order=len(Lesson.query.filter_by(module_id=module.id).all()) + 1
                            )
                            db.session.add(lesson)
                            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —É—Ä–æ–∫: {lesson.title}")
    
    db.session.commit()
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–±—É—á–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    with app.app_context():
        try:
            print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è production...")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            db.create_all()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            load_bi_toets_structure()
            load_domains()
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—É—á–µ–Ω–∏—è
            create_learning_structure()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            load_questions()
            load_learning_cards()
            load_tests_from_cards()
            load_virtual_patients()
            load_achievements()
            
            # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            create_admin_user()
            
            print("üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            db.session.rollback()
            raise

if __name__ == '__main__':
    main() 