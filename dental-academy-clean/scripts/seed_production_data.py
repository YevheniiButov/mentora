#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è production –¥–µ–ø–ª–æ—è
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
"""

import os
import sys
import json
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

from app import app
from extensions import db
from models import (
    BIGDomain, LearningPath, Subject, Module, Lesson,
    Question, IRTParameters, VirtualPatientScenario,
    Achievement, User, UserProgress
)

def load_bi_toets_structure():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É BI-toets –ø—É—Ç–µ–π –æ–±—É—á–µ–Ω–∏—è"""
    print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º BI-toets —Å—Ç—Ä—É–∫—Ç—É—Ä—É...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—É—Ç–∏ –æ–±—É—á–µ–Ω–∏—è (9 –ø—É—Ç–µ–π)
    learning_paths = [
        {
            'id': 'theoretical',
            'name': 'Theoretische Kennis',
            'name_nl': 'Theoretische Kennis',
            'name_ru': '–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è',
            'description': '–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏',
            'exam_component': 'THEORETICAL',
            'exam_weight': 40.0,
            'exam_type': 'multiple_choice',
            'duration_weeks': 12,
            'total_estimated_hours': 120
        },
        {
            'id': 'methodology',
            'name': 'Methodologie',
            'name_nl': 'Methodologie',
            'name_ru': '–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è',
            'description': '–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–æ–¥—Ö–æ–¥—ã',
            'exam_component': 'METHODOLOGY',
            'exam_weight': 25.0,
            'exam_type': 'open_book',
            'duration_weeks': 8,
            'total_estimated_hours': 80
        },
        {
            'id': 'practical',
            'name': 'Praktische Vaardigheden',
            'name_nl': 'Praktische Vaardigheden',
            'name_ru': '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏',
            'description': '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏',
            'exam_component': 'PRACTICAL',
            'exam_weight': 20.0,
            'exam_type': 'practical_theory',
            'duration_weeks': 10,
            'total_estimated_hours': 100
        },
        {
            'id': 'clinical',
            'name': 'Klinische Competenties',
            'name_nl': 'Klinische Competenties',
            'name_ru': '–ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏',
            'description': '–ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏',
            'exam_component': 'CLINICAL',
            'exam_weight': 15.0,
            'exam_type': 'case_study',
            'duration_weeks': 6,
            'total_estimated_hours': 60
        }
    ]
    
    for path_data in learning_paths:
        existing = LearningPath.query.get(path_data['id'])
        if not existing:
            path = LearningPath(**path_data)
            db.session.add(path)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—É—Ç—å: {path_data['name']}")
    
    db.session.commit()

def load_domains():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç 30 –¥–æ–º–µ–Ω–æ–≤ BI-toets"""
    print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–º–µ–Ω—ã BI-toets...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–º–µ–Ω—ã —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å
    BIGDomain.initialize_domains()
    print("‚úÖ –î–æ–º–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

def load_questions():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–∑ JSON —Ñ–∞–π–ª–æ–≤"""
    print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    questions_path = Path(__file__).parent / '160_2.json'
    if questions_path.exists():
        with open(questions_path, 'r', encoding='utf-8') as f:
            questions_data = json.load(f)
        
        for q_data in questions_data:
            # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
            question = Question(
                text=q_data['text'],
                options=q_data['options'],
                correct_answer_index=q_data['correct_answer_index'],
                correct_answer_text=q_data['correct_answer_text'],
                explanation=q_data['explanation'],
                category=q_data.get('category', 'general'),
                domain=q_data.get('domain', 'general'),
                difficulty_level=q_data.get('difficulty_level', 2)
            )
            db.session.add(question)
            db.session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID
            
            # –°–æ–∑–¥–∞–µ–º IRT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if 'irt_params' in q_data:
                irt_params = IRTParameters(
                    question_id=question.id,
                    difficulty=q_data['irt_params'].get('difficulty', 0.0),
                    discrimination=q_data['irt_params'].get('discrimination', 1.0),
                    guessing=q_data['irt_params'].get('guessing', 0.25)
                )
                db.session.add(irt_params)
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(questions_data)} –≤–æ–ø—Ä–æ—Å–æ–≤")

def load_virtual_patients():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤"""
    print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤...")
    
    vp_dir = Path(__file__).parent.parent / 'cards' / 'virtual_patient'
    if vp_dir.exists():
        for vp_file in vp_dir.glob('*.json'):
            with open(vp_file, 'r', encoding='utf-8') as f:
                vp_data = json.load(f)
            
            scenario = VirtualPatientScenario(
                title=vp_data['title'],
                description=vp_data.get('description', ''),
                difficulty=vp_data.get('difficulty', 'medium'),
                category=vp_data.get('category', 'diagnosis'),
                scenario_data=json.dumps(vp_data['scenario_data']),
                is_published=True
            )
            db.session.add(scenario)
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")

def load_achievements():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∫—Ä–∏–ø—Ç
    try:
        from scripts.init_achievements_simple import init_achievements
        init_achievements()
        print("‚úÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")

def create_admin_user():
    """–°–æ–∑–¥–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    print("üîÑ –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    
    admin_email = "admin@mentora.nl"
    admin = User.query.filter_by(email=admin_email).first()
    
    if not admin:
        from werkzeug.security import generate_password_hash
        admin = User(
            email=admin_email,
            username="admin",
            password_hash=generate_password_hash("admin123"),
            first_name="Admin",
            last_name="User",
            role="admin",
            is_active=True,
            registration_completed=True
        )
        db.session.add(admin)
        db.session.commit()
        print("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: admin@mentora.nl / admin123")
    else:
        print("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    with app.app_context():
        try:
            print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è production...")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            db.create_all()
            print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            load_bi_toets_structure()
            load_domains()
            load_questions()
            load_virtual_patients()
            load_achievements()
            create_admin_user()
            
            # –ö–æ–º–º–∏—Ç–∏–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            db.session.commit()
            print("üéâ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            db.session.rollback()
            raise

if __name__ == '__main__':
    main() 