#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –ø—É—Ç–µ–π –æ–±—É—á–µ–Ω–∏—è
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from flask import Flask
from extensions import db
from models import User, PersonalLearningPlan, LearningPath, BIGDomain
from utils.adaptive_path_selector import AdaptivePathSelector
import json

def create_test_app():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    app = Flask(__name__)
    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///test.db'
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    app.config['SECRET_KEY'] = 'test-secret-key'
    
    db.init_app(app)
    
    return app

def test_adaptive_path_selector():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –ø—É—Ç–µ–π"""
    app = create_test_app()
    
    with app.app_context():
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        db.create_all()
        
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –ø—É—Ç–µ–π –æ–±—É—á–µ–Ω–∏—è")
        print("=" * 60)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user = User(
            email='test@example.com',
            username='testuser',
            first_name='Test',
            last_name='User'
        )
        test_user.set_password('password123')
        db.session.add(test_user)
        db.session.commit()
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {test_user.id}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è
        test_plan = PersonalLearningPlan(
            user_id=test_user.id,
            current_ability=0.5,  # –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
            target_ability=1.0,   # –¶–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å
            study_hours_per_week=20.0,
            status='active'
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–æ –¥–æ–º–µ–Ω–∞–º
        test_abilities = {
            'THER': 0.3,  # –°–ª–∞–±—ã–π –¥–æ–º–µ–Ω
            'SURG': 0.7,  # –°–∏–ª—å–Ω—ã–π –¥–æ–º–µ–Ω
            'ORTH': 0.5,  # –°—Ä–µ–¥–Ω–∏–π –¥–æ–º–µ–Ω
            'PEDO': 0.2,  # –û—á–µ–Ω—å —Å–ª–∞–±—ã–π –¥–æ–º–µ–Ω
            'PERI': 0.6,  # –°—Ä–µ–¥–Ω–∏–π –¥–æ–º–µ–Ω
            'ENDO': 0.4,  # –°—Ä–µ–¥–Ω–∏–π –¥–æ–º–µ–Ω
            'RAD': 0.8,   # –°–∏–ª—å–Ω—ã–π –¥–æ–º–µ–Ω
            'ANAT': 0.5,  # –°—Ä–µ–¥–Ω–∏–π –¥–æ–º–µ–Ω
            'PHAR': 0.3,  # –°–ª–∞–±—ã–π –¥–æ–º–µ–Ω
            'COMM': 0.6   # –°—Ä–µ–¥–Ω–∏–π –¥–æ–º–µ–Ω
        }
        
        test_plan.set_domain_analysis(test_abilities)
        test_plan.set_weak_domains(['PEDO', 'THER', 'PHAR'])
        test_plan.set_strong_domains(['RAD', 'SURG'])
        
        db.session.add(test_plan)
        db.session.commit()
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è: {test_plan.id}")
        print(f"   –¢–µ–∫—É—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {test_plan.current_ability}")
        print(f"   –¶–µ–ª–µ–≤–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {test_plan.target_ability}")
        print(f"   –°–ª–∞–±—ã–µ –¥–æ–º–µ–Ω—ã: {test_plan.get_weak_domains()}")
        print(f"   –°–∏–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω—ã: {test_plan.get_strong_domains()}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—É—Ç–∏ –æ–±—É—á–µ–Ω–∏—è
        test_paths = [
            {
                'id': 'path_1',
                'name': '–ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö',
                'exam_component': 'THEORETICAL',
                'exam_weight': 0.3,
                'exam_type': 'multiple_choice',
                'duration_weeks': 8,
                'total_estimated_hours': 40,
                'irt_difficulty_range': [-1.0, 0.5],
                'irt_discrimination_range': [0.5, 1.5],
                'target_ability_levels': {'beginner': -0.5, 'intermediate': 0.0},
                'adaptive_routing': {'focus_weak_domains': True},
                'modules': [
                    {'id': 1, 'title': '–í–≤–µ–¥–µ–Ω–∏–µ –≤ —Ç–µ–æ—Ä–∏—é', 'estimated_hours': 4},
                    {'id': 2, 'title': '–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏', 'estimated_hours': 6}
                ]
            },
            {
                'id': 'path_2',
                'name': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—É—Ç—å –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö',
                'exam_component': 'CLINICAL',
                'exam_weight': 0.4,
                'exam_type': 'case_study',
                'duration_weeks': 12,
                'total_estimated_hours': 60,
                'irt_difficulty_range': [0.5, 2.0],
                'irt_discrimination_range': [1.0, 2.0],
                'target_ability_levels': {'intermediate': 0.5, 'advanced': 1.0},
                'adaptive_routing': {'focus_strong_domains': True},
                'modules': [
                    {'id': 3, 'title': '–ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª—É—á–∞–∏', 'estimated_hours': 8},
                    {'id': 4, 'title': '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏', 'estimated_hours': 10}
                ]
            }
        ]
        
        for path_data in test_paths:
            path = LearningPath(**path_data)
            db.session.add(path)
        
        db.session.commit()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(test_paths)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—É—Ç–µ–π –æ–±—É—á–µ–Ω–∏—è")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        selector = AdaptivePathSelector()
        
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø—É—Ç–∏...")
        
        # –¢–µ—Å—Ç 1: –í—ã–±–æ—Ä –ø—É—Ç–∏ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –¥–æ–º–µ–Ω–∞
        result1 = selector.select_adaptive_path(test_user.id)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç 1 (–±–µ–∑ –¥–æ–º–µ–Ω–∞): {result1.get('success', False)}")
        if result1.get('success'):
            print(f"   –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É—Ç—å: {result1.get('path_name', 'N/A')}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π: {result1.get('total_modules', 0)}")
            print(f"   –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {result1.get('difficulty_level', 'N/A')}")
        
        # –¢–µ—Å—Ç 2: –í—ã–±–æ—Ä –ø—É—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞
        result2 = selector.select_adaptive_path(test_user.id, target_domain='THEORETICAL')
        print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç 2 (–¥–æ–º–µ–Ω THEORETICAL): {result2.get('success', False)}")
        if result2.get('success'):
            print(f"   –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É—Ç—å: {result2.get('path_name', 'N/A')}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π: {result2.get('total_modules', 0)}")
        
        # –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É—Ç–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏...")
        new_abilities = {
            'THER': 0.6,  # –£–ª—É—á—à–∏–ª—Å—è
            'SURG': 0.8,  # –û—Å—Ç–∞–ª—Å—è —Å–∏–ª—å–Ω—ã–º
            'PEDO': 0.4,  # –£–ª—É—á—à–∏–ª—Å—è
            'PHAR': 0.5   # –£–ª—É—á—à–∏–ª—Å—è
        }
        
        result3 = selector.update_path_after_reassessment(test_user.id, new_abilities)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç 3 (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ): {result3.get('success', False)}")
        if result3.get('success'):
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {result3.get('message', 'N/A')}")
        
        # –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø—É—Ç–∏ —á–µ—Ä–µ–∑ –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ —á–µ—Ä–µ–∑ –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è...")
        adaptive_path = test_plan.get_adaptive_learning_path()
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç 4 (—á–µ—Ä–µ–∑ –ø–ª–∞–Ω): {adaptive_path.get('success', False)}")
        if adaptive_path.get('success'):
            print(f"   –ü—É—Ç—å: {adaptive_path.get('path_name', 'N/A')}")
            print(f"   –ú–æ–¥—É–ª–∏: {len(adaptive_path.get('modules', []))}")
        
        print("\n" + "=" * 60)
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
        # –û—á–∏—Å—Ç–∫–∞
        db.session.delete(test_plan)
        db.session.delete(test_user)
        for path in LearningPath.query.all():
            db.session.delete(path)
        db.session.commit()
        
        print("üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")

if __name__ == '__main__':
    test_adaptive_path_selector() 