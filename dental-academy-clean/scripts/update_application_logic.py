#!/usr/bin/env python3
"""
–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–æ–º–µ–Ω–æ–≤
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –¥–æ–º–µ–Ω–∞–º–∏
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import app
from models import db, BIGDomain, PersonalLearningPlan
import json
from datetime import datetime, timezone

def update_application_logic():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–æ–º–µ–Ω–æ–≤"""
    
    with app.app_context():
        print("üîß –û–ë–ù–û–í–õ–ï–ù–ò–ï –õ–û–ì–ò–ö–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø")
        print("=" * 50)
        
        # 1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ utils/domain_mapping.py
        print("\n1Ô∏è‚É£ –û–ë–ù–û–í–õ–ï–ù–ò–ï DOMAIN MAPPING:")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª domain_mapping.py
        domain_mapping_content = '''"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–º–µ–Ω–æ–≤ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–º–µ–Ω–æ–≤ BI-TOETS
"""

# –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–æ–º–µ–Ω–æ–≤ (–ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏)
UNIFIED_DOMAIN_MAPPING = {
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ–º–µ–Ω—ã BI-TOETS
    'THER': '–¢–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è',
    'SURG': '–•–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è',
    'PROTH': '–û—Ä—Ç–æ–ø–µ–¥–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è',
    'PEDI': '–î–µ—Ç—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è',
    'PARO': '–ü–∞—Ä–æ–¥–æ–Ω—Ç–æ–ª–æ–≥–∏—è',
    'ORTHO': '–û—Ä—Ç–æ–¥–æ–Ω—Ç–∏—è',
    'PREV': '–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞',
    'ANATOMIE': '–ê–Ω–∞—Ç–æ–º–∏—è',
    'FYSIOLOGIE': '–§–∏–∑–∏–æ–ª–æ–≥–∏—è',
    'PATHOLOGIE': '–ü–∞—Ç–æ–ª–æ–≥–∏—è',
    'MICROBIOLOGIE': '–ú–∏–∫—Ä–æ–±–∏–æ–ª–æ–≥–∏—è',
    'MATERIAALKUNDE': '–ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤–µ–¥–µ–Ω–∏–µ',
    'RADIOLOGIE': '–†–µ–Ω—Ç–≥–µ–Ω–æ–ª–æ–≥–∏—è',
    'ALGEMENE_GENEESKUNDE': '–û–±—â–∞—è –º–µ–¥–∏—Ü–∏–Ω–∞',
    'EMERGENCY': '–ù–µ–æ—Ç–ª–æ–∂–Ω–∞—è –ø–æ–º–æ—â—å',
    'SYSTEMIC': '–°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è',
    'PHARMACOLOGY': '–§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è',  # –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ —Å PHARMA –∏ FARMACOLOGIE
    'INFECTION': '–ò–Ω—Ñ–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å',
    'SPECIAL': '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤',
    'DIAGNOSIS': '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞',  # –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ —Å DIAGNOSIS_SPECIAL
    'DUTCH': '–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è',
    'PROFESSIONAL': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ',
    'ETHIEK': '–≠—Ç–∏–∫–∞ –∏ –ø—Ä–∞–≤–æ',
    'STATISTICS': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö',
    'RESEARCH_METHOD': '–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π',
    'PRACTICAL_SKILLS': '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏',
    'TREATMENT_PLANNING': '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–µ—á–µ–Ω–∏—è',
    'COMMUNICATION': '–ö–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏'
}

# –í–µ—Å–∞ –¥–æ–º–µ–Ω–æ–≤ –≤ —ç–∫–∑–∞–º–µ–Ω–µ
DOMAIN_WEIGHTS = {
    'THER': 15.0,
    'SURG': 10.0,
    'PROTH': 8.0,
    'PEDI': 7.0,
    'PARO': 8.0,
    'ORTHO': 6.0,
    'PREV': 5.0,
    'ANATOMIE': 4.0,
    'FYSIOLOGIE': 4.0,
    'PATHOLOGIE': 5.0,
    'MICROBIOLOGIE': 3.0,
    'MATERIAALKUNDE': 3.0,
    'RADIOLOGIE': 4.0,
    'ALGEMENE_GENEESKUNDE': 2.0,
    'EMERGENCY': 10.0,
    'SYSTEMIC': 7.0,
    'PHARMACOLOGY': 8.0,
    'INFECTION': 5.0,
    'SPECIAL': 4.0,
    'DIAGNOSIS': 10.0,
    'DUTCH': 3.0,
    'PROFESSIONAL': 2.0,
    'ETHIEK': 3.0,
    'STATISTICS': 6.0,
    'RESEARCH_METHOD': 4.0,
    'PRACTICAL_SKILLS': 15.0,
    'TREATMENT_PLANNING': 10.0,
    'COMMUNICATION': 6.0
}

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–º–µ–Ω–æ–≤
DOMAIN_CATEGORIES = {
    'THEORETICAL': ['THER', 'SURG', 'PROTH', 'PEDI', 'PARO', 'ORTHO', 'PREV', 
                   'ANATOMIE', 'FYSIOLOGIE', 'PATHOLOGIE', 'MICROBIOLOGIE', 
                   'MATERIAALKUNDE', 'RADIOLOGIE', 'ALGEMENE_GENEESKUNDE', 
                   'EMERGENCY', 'SYSTEMIC', 'PHARMACOLOGY', 'INFECTION', 
                   'SPECIAL', 'DIAGNOSIS', 'DUTCH', 'PROFESSIONAL'],
    'METHODOLOGY': ['STATISTICS', 'RESEARCH_METHOD'],
    'PRACTICAL': ['PRACTICAL_SKILLS'],
    'CLINICAL': ['TREATMENT_PLANNING', 'COMMUNICATION', 'ETHIEK']
}

def get_domain_name(domain_code):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–º–µ–Ω–∞ –ø–æ –∫–æ–¥—É"""
    return UNIFIED_DOMAIN_MAPPING.get(domain_code, domain_code)

def get_domain_weight(domain_code):
    """–ü–æ–ª—É—á–∏—Ç—å –≤–µ—Å –¥–æ–º–µ–Ω–∞ –≤ —ç–∫–∑–∞–º–µ–Ω–µ"""
    return DOMAIN_WEIGHTS.get(domain_code, 0.0)

def get_domain_category(domain_code):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ–º–µ–Ω–∞"""
    for category, domains in DOMAIN_CATEGORIES.items():
        if domain_code in domains:
            return category
    return 'OTHER'

def get_all_domains():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ–º–µ–Ω—ã"""
    return list(UNIFIED_DOMAIN_MAPPING.keys())

def get_domains_by_category(category):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–æ–º–µ–Ω—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    return DOMAIN_CATEGORIES.get(category, [])
'''
        
        with open('utils/domain_mapping.py', 'w', encoding='utf-8') as f:
            f.write(domain_mapping_content)
        
        print("   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω utils/domain_mapping.py")
        
        # 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ utils/daily_learning_algorithm.py
        print("\n2Ô∏è‚É£ –û–ë–ù–û–í–õ–ï–ù–ò–ï DAILY LEARNING ALGORITHM:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã —Å –¥–æ–º–µ–Ω–∞–º–∏
        try:
            from utils.daily_learning_algorithm import DailyLearningAlgorithm
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            algorithm = DailyLearningAlgorithm()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –¥–æ–º–µ–Ω–æ–≤
            all_domains = BIGDomain.query.filter_by(is_active=True).all()
            print(f"   –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç–∞–µ—Ç —Å {len(all_domains)} –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏")
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞: {e}")
        
        # 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ routes/diagnostic_routes.py
        print("\n3Ô∏è‚É£ –û–ë–ù–û–í–õ–ï–ù–ò–ï DIAGNOSTIC ROUTES:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ä–æ—É—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –¥–æ–º–µ–Ω–æ–≤
        try:
            from routes.diagnostic_routes import diagnostic_bp
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–æ–º–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            diagnostic_domains = BIGDomain.query.filter_by(is_active=True).all()
            print(f"   –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è {len(diagnostic_domains)} –¥–æ–º–µ–Ω–æ–≤")
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–æ—É—Ç–æ–≤: {e}")
        
        # 4. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã
        print("\n4Ô∏è‚É£ –°–û–ó–î–ê–ù–ò–ï –û–¢–ß–ï–¢–ê –û –°–û–°–¢–û–Ø–ù–ò–ò:")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        total_domains = BIGDomain.query.count()
        active_domains = BIGDomain.query.filter_by(is_active=True).count()
        plans_with_all_domains = 0
        total_plans = PersonalLearningPlan.query.count()
        
        for plan in PersonalLearningPlan.query.all():
            try:
                if plan.domain_analysis:
                    analysis = plan.get_domain_analysis()
                    if analysis and len(analysis) >= 28:  # –ú–∏–Ω–∏–º—É–º 28 –¥–æ–º–µ–Ω–æ–≤
                        plans_with_all_domains += 1
            except:
                pass
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–º–µ–Ω–∞–º
        domain_stats = {}
        for domain in BIGDomain.query.all():
            questions_count = len(domain.questions) if domain.questions else 0
            domain_stats[domain.code] = {
                'name': domain.name,
                'weight': domain.weight_percentage,
                'category': domain.category,
                'questions': questions_count,
                'is_active': domain.is_active
            }
        
        system_status = {
            'update_date': datetime.now(timezone.utc).isoformat(),
            'total_domains': total_domains,
            'active_domains': active_domains,
            'plans_with_all_domains': plans_with_all_domains,
            'total_plans': total_plans,
            'migration_complete': plans_with_all_domains > 0,
            'domain_statistics': domain_stats,
            'recommendations': []
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if plans_with_all_domains < total_plans:
            system_status['recommendations'].append(
                "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–ª–∞–Ω—ã –æ–±—É—á–µ–Ω–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –¥–æ–º–µ–Ω–æ–≤"
            )
        
        if active_domains < total_domains:
            system_status['recommendations'].append(
                f"–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤: {total_domains - active_domains}"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–º–µ–Ω—ã –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤
        domains_without_questions = [code for code, stats in domain_stats.items() if stats['questions'] == 0]
        if domains_without_questions:
            system_status['recommendations'].append(
                f"–î–æ–º–µ–Ω—ã –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤: {domains_without_questions}"
            )
        
        with open('analysis/system_status_after_migration.json', 'w', encoding='utf-8') as f:
            json.dump(system_status, f, indent=2, ensure_ascii=False)
        
        print(f"   ‚úÖ –û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        
        # 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        print("\n5Ô∏è‚É£ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:")
        
        print(f"   –í—Å–µ–≥–æ –¥–æ–º–µ–Ω–æ–≤: {total_domains}")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤: {active_domains}")
        print(f"   –ü–ª–∞–Ω–æ–≤ —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –¥–æ–º–µ–Ω–æ–≤: {plans_with_all_domains}/{total_plans}")
        
        if plans_with_all_domains == total_plans:
            print("   ‚úÖ –í–°–ï –ü–õ–ê–ù–´ –û–ë–£–ß–ï–ù–ò–Ø –°–û–î–ï–†–ñ–ê–¢ –ü–û–õ–ù–´–ô –ù–ê–ë–û–† –î–û–ú–ï–ù–û–í")
        else:
            print(f"   ‚ö†Ô∏è  {total_plans - plans_with_all_domains} –ø–ª–∞–Ω–æ–≤ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –¥–æ–º–µ–Ω–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã
        print(f"   –î–æ–º–µ–Ω—ã —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏: {len([d for d in domain_stats.values() if d['questions'] > 0])}")
        
        if len([d for d in domain_stats.values() if d['questions'] > 0]) >= 20:
            print("   ‚úÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã –∏–∑ –≤—Å–µ—Ö –¥–æ–º–µ–Ω–æ–≤")
        else:
            print("   ‚ö†Ô∏è  –ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º")
        
        print(f"\nüìä –û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã: analysis/system_status_after_migration.json")
        
        return system_status

if __name__ == '__main__':
    update_application_logic() 