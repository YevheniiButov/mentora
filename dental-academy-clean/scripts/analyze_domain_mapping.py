#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã —Å –º–∞–ø–ø–∏–Ω–≥–æ–º —É—Ä–æ–∫–æ–≤ –∫ –¥–æ–º–µ–Ω–∞–º BIG
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import app, db
from models import BIGDomain, Lesson, Module, Subject, ContentDomainMapping, Question
import json
from datetime import datetime, timezone

def analyze_domain_mapping():
    """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞ –¥–æ–º–µ–Ω–æ–≤"""
    
    print("üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –° –ú–ê–ü–ü–ò–ù–ì–û–ú –£–†–û–ö–û–í –ö –î–û–ú–ï–ù–ê–ú BIG")
    print("=" * 60)
    
    with app.app_context():
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–µ–Ω–æ–≤
        domains = BIGDomain.query.filter_by(is_active=True).all()
        print(f"\nüìä –î–û–ú–ï–ù–´ BIG:")
        print(f"   –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤: {len(domains)}")
        
        for domain in domains:
            questions_count = len(domain.questions) if hasattr(domain, 'questions') else 0
            print(f"   ‚Ä¢ {domain.code}: {domain.name} ({domain.weight_percentage}%) - {questions_count} –≤–æ–ø—Ä–æ—Å–æ–≤")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤
        lessons = Lesson.query.all()
        print(f"\nüìö –£–†–û–ö–ò:")
        print(f"   –í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤: {len(lessons)}")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π
        modules = Module.query.all()
        print(f"   –í—Å–µ–≥–æ –º–æ–¥—É–ª–µ–π: {len(modules)}")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        subjects = Subject.query.all()
        print(f"   –í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {len(subjects)}")
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–ø–ø–∏–Ω–≥–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫ –¥–æ–º–µ–Ω–∞–º
        content_mappings = ContentDomainMapping.query.all()
        print(f"\nüîó –ú–ê–ü–ü–ò–ù–ì–ò –ö–û–ù–¢–ï–ù–¢–ê –ö –î–û–ú–ï–ù–ê–ú:")
        print(f"   –í—Å–µ–≥–æ –º–∞–ø–ø–∏–Ω–≥–æ–≤: {len(content_mappings)}")
        
        lesson_mappings = [m for m in content_mappings if m.lesson_id]
        module_mappings = [m for m in content_mappings if m.module_id]
        subject_mappings = [m for m in content_mappings if m.subject_id]
        
        print(f"   ‚Ä¢ –ú–∞–ø–ø–∏–Ω–≥–æ–≤ —É—Ä–æ–∫–æ–≤: {len(lesson_mappings)}")
        print(f"   ‚Ä¢ –ú–∞–ø–ø–∏–Ω–≥–æ–≤ –º–æ–¥—É–ª–µ–π: {len(module_mappings)}")
        print(f"   ‚Ä¢ –ú–∞–ø–ø–∏–Ω–≥–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {len(subject_mappings)}")
        
        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–∫–∏ –±–µ–∑ –º–∞–ø–ø–∏–Ω–≥–∞
        lessons_with_mapping = set(m.lesson_id for m in lesson_mappings)
        lessons_without_mapping = [l for l in lessons if l.id not in lessons_with_mapping]
        
        print(f"\n‚ùå –£–†–û–ö–ò –ë–ï–ó –ú–ê–ü–ü–ò–ù–ì–ê:")
        print(f"   –£—Ä–æ–∫–æ–≤ –±–µ–∑ –º–∞–ø–ø–∏–Ω–≥–∞: {len(lessons_without_mapping)}")
        
        if lessons_without_mapping:
            print("   –ü—Ä–∏–º–µ—Ä—ã —É—Ä–æ–∫–æ–≤ –±–µ–∑ –º–∞–ø–ø–∏–Ω–≥–∞:")
            for lesson in lessons_without_mapping[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                module_name = lesson.module.title if lesson.module else "–ù–µ—Ç –º–æ–¥—É–ª—è"
                print(f"     ‚Ä¢ {lesson.title} (–ú–æ–¥—É–ª—å: {module_name})")
        
        # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥—É–ª–∏ –±–µ–∑ –º–∞–ø–ø–∏–Ω–≥–∞
        modules_with_mapping = set(m.module_id for m in module_mappings)
        modules_without_mapping = [m for m in modules if m.id not in modules_with_mapping]
        
        print(f"\n‚ùå –ú–û–î–£–õ–ò –ë–ï–ó –ú–ê–ü–ü–ò–ù–ì–ê:")
        print(f"   –ú–æ–¥—É–ª–µ–π –±–µ–∑ –º–∞–ø–ø–∏–Ω–≥–∞: {len(modules_without_mapping)}")
        
        if modules_without_mapping:
            print("   –ü—Ä–∏–º–µ—Ä—ã –º–æ–¥—É–ª–µ–π –±–µ–∑ –º–∞–ø–ø–∏–Ω–≥–∞:")
            for module in modules_without_mapping[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                subject_name = module.subject.name if module.subject else "–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞"
                print(f"     ‚Ä¢ {module.title} (–ü—Ä–µ–¥–º–µ—Ç: {subject_name})")
        
        # 8. –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–æ–º–µ–Ω–∞–º
        print(f"\nüìà –ê–ù–ê–õ–ò–ó –ü–û –î–û–ú–ï–ù–ê–ú:")
        for domain in domains:
            domain_mappings = [m for m in content_mappings if m.domain_id == domain.id]
            lesson_count = len([m for m in domain_mappings if m.lesson_id])
            module_count = len([m for m in domain_mappings if m.module_id])
            subject_count = len([m for m in domain_mappings if m.subject_id])
            
            print(f"   ‚Ä¢ {domain.code}: {lesson_count} —É—Ä–æ–∫–æ–≤, {module_count} –º–æ–¥—É–ª–µ–π, {subject_count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
        
        # 9. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print(f"   1. –°–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞–ø–ø–∏–Ω–≥ —É—Ä–æ–∫–æ–≤ –∫ –¥–æ–º–µ–Ω–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
        print(f"   2. –î–æ–±–∞–≤–∏—Ç—å —Ä—É—á–Ω–æ–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤")
        print(f"   3. –°–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞")
        print(f"   4. –î–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –º–∞–ø–ø–∏–Ω–≥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")

def create_auto_mapping():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    
    print("\nüîß –°–û–ó–î–ê–ù–ò–ï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ú–ê–ü–ü–ò–ù–ì–ê")
    print("=" * 60)
    
    with app.app_context():
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–º–µ–Ω–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        domain_keywords = {
            'THER': ['caries', 'cavity', 'filling', 'endodontics', 'therapeutic', 'treatment'],
            'SURG': ['surgery', 'surgical', 'extraction', 'implant', 'implantation'],
            'PROTH': ['prosthesis', 'crown', 'bridge', 'prosthodontics'],
            'PEDI': ['pediatric', 'pediatrics', 'child', 'children', 'milk teeth'],
            'PARO': ['periodont', 'periodontal', 'gingiva', 'gum', 'periodontitis'],
            'ORTHO': ['orthodontics', 'orthodontic', 'braces', 'bite', 'malocclusion'],
            'ANATOMIE': ['anatomy', 'anatomical', 'structure', 'tooth', 'jaw'],
            'FYSIOLOGIE': ['physiology', 'physiological', 'function', 'process'],
            'PATHOLOGIE': ['pathology', 'pathological', 'disease', 'tumor'],
            'RADIOLOGIE': ['radiology', 'radiographic', 'x-ray', 'imaging'],
            'MICROBIOLOGIE': ['microbiology', 'bacterial', 'infection', 'virus'],
            'MATERIAALKUNDE': ['material', 'cement', 'composite', 'amalgam'],
            'ALGEMENE_GENEESKUNDE': ['general medicine', 'systemic disease'],
            'EMERGENCY': ['emergency', 'urgent', 'trauma', 'bleeding'],
            'PHARMACOLOGY': ['pharmacology', 'drug', 'medication', 'antibiotic'],
            'INFECTION': ['infection', 'antibiotic', 'sterilization'],
            'ETHIEK': ['ethics', 'ethical', 'law', 'legal'],
            'DUTCH': ['dutch', 'netherlands', 'healthcare system'],
            'PROFESSIONAL': ['professional', 'development', 'competency'],
            'DIAGNOSIS': ['diagnosis', 'diagnostic', 'examination'],
            'TREATMENT_PLANNING': ['planning', 'treatment plan', 'strategy'],
            'SPECIAL': ['special', 'special needs', 'groups'],
            'STATISTICS': ['statistics', 'statistical', 'data analysis'],
            'RESEARCH_METHOD': ['research', 'methodology', 'study design'],
            'PRACTICAL_SKILLS': ['practical', 'skills', 'manual'],
            'COMMUNICATION': ['communication', 'communicative', 'patient']
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Ä–æ–∫–∏ –±–µ–∑ –º–∞–ø–ø–∏–Ω–≥–∞
        lessons_with_mapping = set(m.lesson_id for m in ContentDomainMapping.query.filter_by(lesson_id=db.not_(None)).all())
        lessons_without_mapping = Lesson.query.filter(~Lesson.id.in_(lessons_with_mapping)).all()
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(lessons_without_mapping)} —É—Ä–æ–∫–æ–≤ –±–µ–∑ –º–∞–ø–ø–∏–Ω–≥–∞")
        
        mapped_count = 0
        
        for lesson in lessons_without_mapping:
            lesson_text = f"{lesson.title} {lesson.content or ''}".lower()
            
            # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–æ–º–µ–Ω
            best_domain = None
            best_score = 0
            
            for domain_code, keywords in domain_keywords.items():
                domain = BIGDomain.query.filter_by(code=domain_code).first()
                if not domain:
                    continue
                
                score = sum(1 for keyword in keywords if keyword.lower() in lesson_text)
                if score > best_score:
                    best_score = score
                    best_domain = domain
            
            # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –µ—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–æ–º–µ–Ω
            if best_domain and best_score > 0:
                mapping = ContentDomainMapping(
                    lesson_id=lesson.id,
                    domain_id=best_domain.id,
                    relevance_score=min(best_score / 5.0, 1.0),  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–æ 1.0
                    relationship_type='auto_mapped'
                )
                db.session.add(mapping)
                mapped_count += 1
                print(f"   ‚úÖ {lesson.title} -> {best_domain.code} (score: {best_score})")
        
        db.session.commit()
        print(f"\n‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ {mapped_count} –º–∞–ø–ø–∏–Ω–≥–æ–≤")

def create_manual_mapping_template():
    """–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞"""
    
    print("\nüìù –°–û–ó–î–ê–ù–ò–ï –®–ê–ë–õ–û–ù–ê –î–õ–Ø –†–£–ß–ù–û–ì–û –ú–ê–ü–ü–ò–ù–ì–ê")
    print("=" * 60)
    
    with app.app_context():
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫–∏ –±–µ–∑ –º–∞–ø–ø–∏–Ω–≥–∞
        lessons_with_mapping = set(m.lesson_id for m in ContentDomainMapping.query.filter_by(lesson_id=db.not_(None)).all())
        lessons_without_mapping = Lesson.query.filter(~Lesson.id.in_(lessons_with_mapping)).all()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã
        domains = BIGDomain.query.filter_by(is_active=True).all()
        
        # –°–æ–∑–¥–∞–µ–º JSON —à–∞–±–ª–æ–Ω
        template = {
            "manual_mappings": [],
            "metadata": {
                "created_at": datetime.now(timezone.utc).isoformat(),
                "total_lessons": len(lessons_without_mapping),
                "total_domains": len(domains)
            }
        }
        
        for lesson in lessons_without_mapping[:50]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–º–∏ 50 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            module_name = lesson.module.title if lesson.module else "–ù–µ—Ç –º–æ–¥—É–ª—è"
            subject_name = lesson.module.subject.name if lesson.module and lesson.module.subject else "–ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞"
            
            mapping_entry = {
                "lesson_id": lesson.id,
                "lesson_title": lesson.title,
                "module": module_name,
                "subject": subject_name,
                "suggested_domain": None,
                "manual_domain": None,
                "relevance_score": 0.5,
                "notes": ""
            }
            
            template["manual_mappings"].append(mapping_entry)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω
        with open('scripts/manual_mapping_template.json', 'w', encoding='utf-8') as f:
            json.dump(template, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞: scripts/manual_mapping_template.json")
        print(f"   –°–æ–¥–µ—Ä–∂–∏—Ç {len(template['manual_mappings'])} —É—Ä–æ–∫–æ–≤ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –º–∞–ø–ø–∏–Ω–≥–∞ –¥–æ–º–µ–Ω–æ–≤...")
    
    try:
        analyze_domain_mapping()
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ
        print("\n" + "=" * 60)
        print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –°–æ–∑–¥–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞–ø–ø–∏–Ω–≥")
        print("2. –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞")
        print("3. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
        
        if choice == "1":
            create_auto_mapping()
        elif choice == "2":
            create_manual_mapping_template()
        elif choice == "3":
            print("–í—ã—Ö–æ–¥...")
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        
        print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1) 