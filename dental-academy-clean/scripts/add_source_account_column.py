#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ source_account –≤ —Ç–∞–±–ª–∏—Ü—É incoming_emails
"""

import os
import sys

def add_source_account_column():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–æ–Ω–∫—É source_account –≤ —Ç–∞–±–ª–∏—Ü—É incoming_emails"""
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
        project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        sys.path.insert(0, project_root)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        from app import app
        from extensions import db
        from sqlalchemy import text
        
        print("üîß Adding source_account column to incoming_emails table...")
        
        with app.app_context():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            try:
                db.session.execute(text("SELECT 1"))
                print("‚úÖ Database connection successful")
            except Exception as e:
                print(f"‚ùå Database connection failed: {str(e)}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞
            try:
                result = db.session.execute(text("""
                    SELECT column_name 
                    FROM information_schema.columns 
                    WHERE table_name = 'incoming_emails' 
                    AND column_name = 'source_account'
                """))
                
                if result.fetchone():
                    print("‚úÖ Column source_account already exists")
                    return True
                else:
                    print("üìù Column source_account does not exist, adding it...")
                    
            except Exception as e:
                print(f"‚ùå Error checking column: {str(e)}")
                return False
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É
            try:
                db.session.execute(text("""
                    ALTER TABLE incoming_emails 
                    ADD COLUMN source_account VARCHAR(50) NOT NULL DEFAULT 'info'
                """))
                
                db.session.commit()
                print("‚úÖ Successfully added source_account column")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
                db.session.execute(text("""
                    UPDATE incoming_emails 
                    SET source_account = 'info' 
                    WHERE source_account IS NULL OR source_account = ''
                """))
                
                db.session.commit()
                print("‚úÖ Updated existing records with default source_account value")
                
                return True
                
            except Exception as e:
                print(f"‚ùå Error adding column: {str(e)}")
                db.session.rollback()
                return False
            
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ Source Account Column Adder")
    print("=" * 50)
    
    success = add_source_account_column()
    
    if success:
        print("‚úÖ Script completed successfully!")
        sys.exit(0)
    else:
        print("‚ùå Script failed!")
        sys.exit(1)

if __name__ == '__main__':
    main()
