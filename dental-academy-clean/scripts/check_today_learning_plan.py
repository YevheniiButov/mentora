#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import app
from extensions import db
from models import User, PersonalLearningPlan, DiagnosticSession
from utils.daily_learning_algorithm import DailyLearningAlgorithm
from datetime import datetime, timezone

def check_today_learning_plan():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    
    with app.app_context():
        print("üìö –ü–†–û–í–ï–†–ö–ê –ï–ñ–ï–î–ù–ï–í–ù–û–ì–û –ü–õ–ê–ù–ê –û–ë–£–ß–ï–ù–ò–Ø –ù–ê –°–ï–ì–û–î–ù–Ø")
        print("=" * 70)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏
        users_with_plans = db.session.query(User).join(
            PersonalLearningPlan, 
            User.id == PersonalLearningPlan.user_id
        ).filter(
            PersonalLearningPlan.status == 'active'
        ).all()
        
        if not users_with_plans:
            print("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è")
            return
        
        print(f"üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏: {len(users_with_plans)}")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for user in users_with_plans:
            print(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get_display_name()} (ID: {user.id})")
            print("-" * 50)
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω
            active_plan = PersonalLearningPlan.query.filter_by(
                user_id=user.id,
                status='active'
            ).first()
            
            if active_plan:
                print(f"üìã –ê–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω: ID {active_plan.id}")
                print(f"   üìÖ –î–∞—Ç–∞ —ç–∫–∑–∞–º–µ–Ω–∞: {active_plan.exam_date}")
                print(f"   üéØ –¶–µ–ª–µ–≤–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {active_plan.target_ability}")
                print(f"   üìä –¢–µ–∫—É—â–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {active_plan.current_ability}")
                print(f"   üìà –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {active_plan.overall_progress:.1f}%")
                print(f"   ‚è∞ –ß–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é: {active_plan.study_hours_per_week}")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
                latest_diagnostic = DiagnosticSession.query.filter_by(
                    user_id=user.id,
                    status='completed'
                ).order_by(DiagnosticSession.completed_at.desc()).first()
                
                if latest_diagnostic:
                    print(f"üî¨ –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: {latest_diagnostic.completed_at.strftime('%Y-%m-%d %H:%M')}")
                    print(f"   üìä –í–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç–≤–µ—á–µ–Ω–æ: {latest_diagnostic.questions_answered}")
                    print(f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {latest_diagnostic.correct_answers}")
                    print(f"   üìà –¢–æ—á–Ω–æ—Å—Ç—å: {(latest_diagnostic.correct_answers/latest_diagnostic.questions_answered*100):.1f}%")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞–Ω
            print("\nüìÖ –ï–ñ–ï–î–ù–ï–í–ù–´–ô –ü–õ–ê–ù –ù–ê –°–ï–ì–û–î–ù–Ø:")
            print("-" * 30)
            
            try:
                algorithm = DailyLearningAlgorithm()
                daily_plan_result = algorithm.generate_daily_plan(
                    user_id=user.id,
                    target_minutes=30
                )
                
                if daily_plan_result['success']:
                    daily_plan = daily_plan_result['daily_plan']
                    
                    # –¢–µ–æ—Ä–∏—è
                    theory_section = daily_plan['theory_section']
                    print(f"üìñ –¢–ï–û–†–ò–Ø ({theory_section['estimated_time']} –º–∏–Ω):")
                    if theory_section['content']:
                        for item in theory_section['content']:
                            print(f"   ‚Ä¢ {item['title']} ({item['estimated_time']} –º–∏–Ω, {item['difficulty']})")
                    else:
                        print("   ‚Ä¢ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ —Ç–µ–æ—Ä–∏–∏")
                    
                    # –ü—Ä–∞–∫—Ç–∏–∫–∞
                    practice_section = daily_plan['practice_section']
                    print(f"\n‚úèÔ∏è –ü–†–ê–ö–¢–ò–ö–ê ({practice_section['estimated_time']} –º–∏–Ω):")
                    if practice_section['content']:
                        for item in practice_section['content']:
                            print(f"   ‚Ä¢ {item['title']} ({item['estimated_time']} –º–∏–Ω, {item['difficulty']})")
                    else:
                        print("   ‚Ä¢ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π")
                    
                    # –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
                    review_section = daily_plan['review_section']
                    print(f"\nüîÑ –ü–û–í–¢–û–†–ï–ù–ò–ï ({review_section['estimated_time']} –º–∏–Ω):")
                    if review_section['content']:
                        for item in review_section['content']:
                            print(f"   ‚Ä¢ {item['title']} ({item['estimated_time']} –º–∏–Ω)")
                    else:
                        print("   ‚Ä¢ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π")
                    
                    print(f"\n‚è±Ô∏è –û–ë–©–ï–ï –í–†–ï–ú–Ø: {daily_plan_result['total_estimated_time']} –º–∏–Ω—É—Ç")
                    
                    # –°–ª–∞–±—ã–µ –¥–æ–º–µ–Ω—ã
                    if daily_plan_result['weak_domains']:
                        print(f"\n‚ö†Ô∏è –°–õ–ê–ë–´–ï –î–û–ú–ï–ù–´:")
                        for domain in daily_plan_result['weak_domains']:
                            print(f"   ‚Ä¢ {domain}")
                    
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {e}")
            
            print("\n" + "=" * 70 + "\n")

if __name__ == "__main__":
    check_today_learning_plan() 