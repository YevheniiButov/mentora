import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import app
from extensions import db
from models import DiagnosticSession, DiagnosticResponse, Question, IRTParameters, User
from datetime import datetime, timedelta, timezone
from sqlalchemy import func

def test_diagnostic_analytics():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫"""
    with app.app_context():
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–ù–ê–õ–ò–¢–ò–ö–ò –î–ò–ê–ì–ù–û–°–¢–ò–ö")
        print("=" * 50)
        
        # 1. –ë–ê–ó–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
        print("\n1Ô∏è‚É£ –ë–ê–ó–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        total_sessions = DiagnosticSession.query.count()
        completed_sessions = DiagnosticSession.query.filter_by(status='completed').count()
        active_sessions = DiagnosticSession.query.filter_by(status='active').count()
        
        print(f"   –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {total_sessions}")
        print(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_sessions}")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_sessions}")
        print(f"   Completion rate: {(completed_sessions/total_sessions*100) if total_sessions > 0 else 0:.1f}%")
        
        # 2. –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú
        print("\n2Ô∏è‚É£ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:")
        session_types = db.session.query(
            DiagnosticSession.session_type,
            func.count(DiagnosticSession.id).label('count'),
            func.avg(DiagnosticSession.current_ability).label('avg_ability')
        ).filter(
            DiagnosticSession.status == 'completed'
        ).group_by(DiagnosticSession.session_type).all()
        
        for session_type in session_types:
            print(f"   {session_type.session_type}: {session_type.count} —Å–µ—Å—Å–∏–π, —Å—Ä–µ–¥–Ω—è—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {session_type.avg_ability:.2f}")
        
        # 3. –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–ü–û–°–û–ë–ù–û–°–¢–ï–ô
        print("\n3Ô∏è‚É£ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–ü–û–°–û–ë–ù–û–°–¢–ï–ô:")
        ability_distribution = db.session.query(
            func.floor(DiagnosticSession.current_ability).label('ability_range'),
            func.count(DiagnosticSession.id).label('count')
        ).filter(
            DiagnosticSession.status == 'completed'
        ).group_by('ability_range').order_by('ability_range').all()
        
        for dist in ability_distribution:
            print(f"   –î–∏–∞–ø–∞–∑–æ–Ω {dist.ability_range}: {dist.count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # 4. IRT –°–¢–ê–¢–ò–°–¢–ò–ö–ê
        print("\n4Ô∏è‚É£ IRT –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        total_questions = Question.query.count()
        questions_with_irt = Question.query.join(IRTParameters).count()
        calibrated_questions = IRTParameters.query.filter(
            IRTParameters.calibration_sample_size > 0
        ).count()
        
        avg_discrimination = db.session.query(
            func.avg(IRTParameters.discrimination)
        ).scalar() or 0
        avg_difficulty = db.session.query(
            func.avg(IRTParameters.difficulty)
        ).scalar() or 0
        
        print(f"   –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}")
        print(f"   –° IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {questions_with_irt}")
        print(f"   –ö–∞–ª–∏–±—Ä–æ–≤–∞–Ω–æ: {calibrated_questions}")
        print(f"   IRT –ø–æ–∫—Ä—ã—Ç–∏–µ: {(questions_with_irt/total_questions*100) if total_questions > 0 else 0:.1f}%")
        print(f"   –°—Ä–µ–¥–Ω—è—è –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è: {avg_discrimination:.3f}")
        print(f"   –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {avg_difficulty:.3f}")
        
        # 5. –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ï –í–û–ü–†–û–°–´
        print("\n5Ô∏è‚É£ –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ï –í–û–ü–†–û–°–´:")
        
        # –û—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã–µ
        very_difficult = Question.query.join(IRTParameters).filter(
            IRTParameters.difficulty > 2.0
        ).limit(5).all()
        print(f"   –û—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã—Ö (>2.0): {len(very_difficult)}")
        for q in very_difficult:
            print(f"     ID {q.id}: —Å–ª–æ–∂–Ω–æ—Å—Ç—å {q.irt_parameters.difficulty:.2f}")
        
        # –û—á–µ–Ω—å –ª–µ–≥–∫–∏–µ
        very_easy = Question.query.join(IRTParameters).filter(
            IRTParameters.difficulty < -2.0
        ).limit(5).all()
        print(f"   –û—á–µ–Ω—å –ª–µ–≥–∫–∏—Ö (<-2.0): {len(very_easy)}")
        for q in very_easy:
            print(f"     ID {q.id}: —Å–ª–æ–∂–Ω–æ—Å—Ç—å {q.irt_parameters.difficulty:.2f}")
        
        # –ù–∏–∑–∫–∞—è –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è
        low_discrimination = Question.query.join(IRTParameters).filter(
            IRTParameters.discrimination < 0.5
        ).limit(5).all()
        print(f"   –° –Ω–∏–∑–∫–æ–π –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏–µ–π (<0.5): {len(low_discrimination)}")
        for q in low_discrimination:
            print(f"     ID {q.id}: –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—è {q.irt_parameters.discrimination:.2f}")
        
        # 6. –ê–ù–ê–õ–ò–ó –ü–û –î–û–ú–ï–ù–ê–ú
        print("\n6Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –ü–û –î–û–ú–ï–ù–ê–ú:")
        recent_sessions = DiagnosticSession.query.filter(
            DiagnosticSession.status == 'completed'
        ).limit(50).all()
        
        domain_abilities = {}
        domain_counts = {}
        
        for session in recent_sessions:
            try:
                results = session.generate_results()
                if results and 'domain_abilities' in results:
                    for domain, ability in results['domain_abilities'].items():
                        if domain not in domain_abilities:
                            domain_abilities[domain] = []
                            domain_counts[domain] = 0
                        domain_abilities[domain].append(ability)
                        if ability < 0.0:
                            domain_counts[domain] += 1
            except Exception as e:
                print(f"     –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–µ—Å—Å–∏–∏ {session.id}: {e}")
                continue
        
        for domain, abilities in domain_abilities.items():
            # –§–∏–ª—å—Ç—Ä—É–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
            valid_abilities = [a for a in abilities if a is not None]
            if valid_abilities:
                avg_ability = sum(valid_abilities) / len(valid_abilities)
                weak_count = domain_counts[domain]
                print(f"   {domain}: —Å—Ä–µ–¥–Ω—è—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å {avg_ability:.2f}, —Å–ª–∞–±—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ {weak_count}/{len(valid_abilities)}")
            else:
                print(f"   {domain}: –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        # 7. –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–ï–°–°–ò–ô
        print("\n7Ô∏è‚É£ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–ï–°–°–ò–ô:")
        sample_session = DiagnosticSession.query.filter_by(status='completed').first()
        if sample_session:
            print(f"   –ü—Ä–∏–º–µ—Ä —Å–µ—Å—Å–∏–∏ #{sample_session.id}:")
            print(f"     –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {sample_session.user.email}")
            print(f"     –¢–∏–ø: {sample_session.session_type}")
            print(f"     –í–æ–ø—Ä–æ—Å–æ–≤: {sample_session.questions_answered}")
            print(f"     –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {sample_session.correct_answers}")
            print(f"     –¢–æ—á–Ω–æ—Å—Ç—å: {(sample_session.correct_answers/sample_session.questions_answered*100) if sample_session.questions_answered > 0 else 0:.1f}%")
            print(f"     –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {sample_session.current_ability:.3f}")
            
            # –û—Ç–≤–µ—Ç—ã –≤ —Å–µ—Å—Å–∏–∏
            responses = DiagnosticResponse.query.filter_by(session_id=sample_session.id).all()
            print(f"     –û—Ç–≤–µ—Ç–æ–≤ –≤ –ë–î: {len(responses)}")
            
            # –ò—Å—Ç–æ—Ä–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
            if sample_session.ability_history:
                try:
                    history = sample_session.get_ability_history()
                    print(f"     –ó–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(history)}")
                except:
                    print(f"     –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏")
        else:
            print("   –ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        print("\n‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–ù–ê–õ–ò–¢–ò–ö–ò –ó–ê–í–ï–†–®–ï–ù–û!")
        print("–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")

if __name__ == '__main__':
    test_diagnostic_analytics() 