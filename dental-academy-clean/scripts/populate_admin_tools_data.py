#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import app
from models import db, AdminAuditLog, SystemHealthLog, DatabaseBackup, EmailTemplate, EmailCampaign, SystemNotification, User
from datetime import datetime, timedelta
import json
import random

def create_admin_tools_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    
    with app.app_context():
        print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∞
        admin = User.query.filter_by(role='admin').first()
        if not admin:
            print("‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –∞–¥–º–∏–Ω–∞ —Å–Ω–∞—á–∞–ª–∞.")
            return
        
        # 1. –°–æ–∑–¥–∞–µ–º –ª–æ–≥–∏ –∞—É–¥–∏—Ç–∞
        print("üìù –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–æ–≤ –∞—É–¥–∏—Ç–∞...")
        audit_actions = [
            ('user_created', 'user', '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'),
            ('user_updated', 'user', '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'),
            ('user_deleted', 'user', '–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'),
            ('database_backup_created', 'system', '–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ë–î'),
            ('notification_created', 'system', '–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'),
            ('bulk_delete', 'contact', '–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤'),
            ('data_export', 'system', '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã'),
            ('profession_created', 'profession', '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏'),
            ('contact_updated', 'contact', '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞'),
            ('analytics_export', 'system', '–≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö')
        ]
        
        for i in range(50):
            action, target_type, description = random.choice(audit_actions)
            
            audit_log = AdminAuditLog(
                admin_user_id=admin.id,
                action=action,
                target_type=target_type,
                target_id=random.randint(1, 100) if random.choice([True, False]) else None,
                details=json.dumps({
                    'description': description,
                    'timestamp': datetime.utcnow().isoformat(),
                    'additional_info': f'Test data {i+1}'
                }),
                old_values=json.dumps({'old_value': f'old_{i}'}) if random.choice([True, False]) else None,
                new_values=json.dumps({'new_value': f'new_{i}'}) if random.choice([True, False]) else None,
                ip_address=f'192.168.1.{random.randint(1, 254)}',
                user_agent='Mozilla/5.0 (Test Browser)',
                request_url=f'/admin/{target_type}/action',
                request_method=random.choice(['GET', 'POST', 'PUT', 'DELETE']),
                created_at=datetime.utcnow() - timedelta(days=random.randint(0, 30))
            )
            
            db.session.add(audit_log)
        
        # 2. –°–æ–∑–¥–∞–µ–º –ª–æ–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
        print("üíì –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...")
        
        for i in range(30):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            cpu_usage = random.uniform(10, 90)
            memory_usage = random.uniform(20, 85)
            disk_usage = random.uniform(30, 80)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫
            if cpu_usage > 80 or memory_usage > 80 or disk_usage > 85:
                status = 'critical'
            elif cpu_usage > 60 or memory_usage > 70 or disk_usage > 70:
                status = 'warning'
            else:
                status = 'healthy'
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
            alerts = None
            if status == 'critical':
                alert_list = []
                if cpu_usage > 80:
                    alert_list.append('High CPU usage detected')
                if memory_usage > 80:
                    alert_list.append('High memory usage detected')
                if disk_usage > 85:
                    alert_list.append('Disk space running low')
                alerts = json.dumps(alert_list)
            
            health_log = SystemHealthLog(
                cpu_usage=round(cpu_usage, 1),
                memory_usage=round(memory_usage, 1),
                disk_usage=round(disk_usage, 1),
                database_connections=random.randint(5, 25),
                response_time=random.uniform(50, 500),
                active_users=random.randint(10, 100),
                total_requests=random.randint(1000, 10000),
                error_count=random.randint(0, 50),
                cache_hit_rate=random.uniform(0.7, 0.95),
                status=status,
                alerts=alerts,
                created_at=datetime.utcnow() - timedelta(hours=random.randint(0, 72))
            )
            
            db.session.add(health_log)
        
        # 3. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
        print("üíæ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...")
        
        backup_types = ['manual', 'scheduled', 'before_deploy']
        backup_statuses = ['completed', 'failed', 'pending']
        
        for i in range(15):
            backup_type = random.choice(backup_types)
            status = random.choice(backup_statuses)
            
            started_at = datetime.utcnow() - timedelta(days=random.randint(0, 30))
            completed_at = started_at + timedelta(minutes=random.randint(5, 60)) if status == 'completed' else None
            
            backup = DatabaseBackup(
                admin_user_id=admin.id if random.choice([True, False]) else None,
                backup_name=f"{backup_type}_backup_{started_at.strftime('%Y%m%d_%H%M%S')}",
                backup_type=backup_type,
                file_path=f"/backups/{backup_type}_backup_{started_at.strftime('%Y%m%d_%H%M%S')}.sql",
                file_size=random.randint(1024*1024, 100*1024*1024) if status == 'completed' else None,
                status=status,
                error_message=f"Backup failed: {random.choice(['Disk full', 'Permission denied', 'Database locked'])}" if status == 'failed' else None,
                tables_count=random.randint(20, 50),
                records_count=random.randint(10000, 100000),
                backup_duration=random.uniform(30, 300),
                started_at=started_at,
                completed_at=completed_at,
                expires_at=started_at + timedelta(days=30)
            )
            
            db.session.add(backup)
        
        # 4. –°–æ–∑–¥–∞–µ–º email —à–∞–±–ª–æ–Ω—ã
        print("üìß –°–æ–∑–¥–∞–Ω–∏–µ email —à–∞–±–ª–æ–Ω–æ–≤...")
        
        templates_data = [
            {
                'name': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å',
                'subject': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Mentora!',
                'template_type': 'welcome',
                'html_content': '<h1>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h1><p>–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ Mentora.</p>',
                'text_content': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ Mentora.',
                'is_system': True,
                'sent_count': random.randint(50, 200)
            },
            {
                'name': '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫—É—Ä—Å–µ',
                'subject': '–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ',
                'template_type': 'reminder',
                'html_content': '<h2>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ</h2><p>–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã.</p>',
                'text_content': '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ. –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã.',
                'is_system': False,
                'sent_count': random.randint(20, 100)
            },
            {
                'name': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∫—É—Ä—Å–µ',
                'subject': '–ù–æ–≤—ã–π –∫—É—Ä—Å –¥–æ—Å—Ç—É–ø–µ–Ω!',
                'template_type': 'notification',
                'html_content': '<h2>–ù–æ–≤—ã–π –∫—É—Ä—Å</h2><p>–î–æ—Å—Ç—É–ø–µ–Ω –Ω–æ–≤—ã–π –∫—É—Ä—Å –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.</p>',
                'text_content': '–ù–æ–≤—ã–π –∫—É—Ä—Å –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.',
                'is_system': False,
                'sent_count': random.randint(30, 150)
            },
            {
                'name': '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞',
                'subject': '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
                'template_type': 'marketing',
                'html_content': '<h2>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</h2><p>–°–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤—Å–µ –∫—É—Ä—Å—ã!</p>',
                'text_content': '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: —Å–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤—Å–µ –∫—É—Ä—Å—ã!',
                'is_system': False,
                'sent_count': random.randint(100, 500)
            }
        ]
        
        for template_data in templates_data:
            template = EmailTemplate(
                name=template_data['name'],
                subject=template_data['subject'],
                template_type=template_data['template_type'],
                html_content=template_data['html_content'],
                text_content=template_data['text_content'],
                variables=json.dumps(['user_name', 'course_name', 'expiry_date']),
                is_active=True,
                is_system=template_data['is_system'],
                sent_count=template_data['sent_count'],
                last_sent_at=datetime.utcnow() - timedelta(days=random.randint(0, 7)),
                created_at=datetime.utcnow() - timedelta(days=random.randint(1, 30))
            )
            
            db.session.add(template)
        
        # 5. –°–æ–∑–¥–∞–µ–º email –∫–∞–º–ø–∞–Ω–∏–∏
        print("üì¢ –°–æ–∑–¥–∞–Ω–∏–µ email –∫–∞–º–ø–∞–Ω–∏–π...")
        
        templates = EmailTemplate.query.all()
        campaign_statuses = ['draft', 'scheduled', 'sending', 'sent', 'failed']
        
        for i in range(10):
            template = random.choice(templates)
            status = random.choice(campaign_statuses)
            
            campaign = EmailCampaign(
                admin_user_id=admin.id,
                name=f"–ö–∞–º–ø–∞–Ω–∏—è {i+1}: {template.name}",
                description=f"–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ {i+1}",
                template_id=template.id,
                target_criteria=json.dumps({
                    'profession': random.choice(['dentist', 'doctor', 'nurse']),
                    'country': random.choice(['NL', 'DE', 'BE']),
                    'registration_date': 'last_30_days'
                }),
                target_count=random.randint(100, 1000),
                status=status,
                scheduled_at=datetime.utcnow() + timedelta(days=random.randint(1, 7)) if status == 'scheduled' else None,
                started_at=datetime.utcnow() - timedelta(days=random.randint(0, 5)) if status in ['sending', 'sent'] else None,
                completed_at=datetime.utcnow() - timedelta(days=random.randint(0, 3)) if status == 'sent' else None,
                sent_count=random.randint(50, 500) if status in ['sending', 'sent'] else 0,
                delivered_count=random.randint(45, 480) if status in ['sending', 'sent'] else 0,
                opened_count=random.randint(20, 200) if status in ['sending', 'sent'] else 0,
                clicked_count=random.randint(5, 50) if status in ['sending', 'sent'] else 0,
                bounced_count=random.randint(0, 20) if status in ['sending', 'sent'] else 0,
                unsubscribed_count=random.randint(0, 10) if status in ['sending', 'sent'] else 0,
                created_at=datetime.utcnow() - timedelta(days=random.randint(1, 15))
            )
            
            db.session.add(campaign)
        
        # 6. –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        print("üîî –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        
        notifications_data = [
            {
                'title': '–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
                'message': '–°–∏—Å—Ç–µ–º–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ –≤–µ—Ä—Å–∏–∏ 2.1.0',
                'notification_type': 'success',
                'priority': 'normal'
            },
            {
                'title': '–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä',
                'message': '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.',
                'notification_type': 'warning',
                'priority': 'high'
            },
            {
                'title': '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
                'message': '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ.',
                'notification_type': 'error',
                'priority': 'critical'
            },
            {
                'title': '–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞',
                'message': '–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–¥–µ–ª "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞" –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.',
                'notification_type': 'info',
                'priority': 'normal'
            },
            {
                'title': '–ü–ª–∞–Ω–æ–≤–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ',
                'message': '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ —Å 02:00 –¥–æ 04:00',
                'notification_type': 'info',
                'priority': 'high'
            }
        ]
        
        for i, notif_data in enumerate(notifications_data):
            notification = SystemNotification(
                title=notif_data['title'],
                message=notif_data['message'],
                notification_type=notif_data['notification_type'],
                priority=notif_data['priority'],
                target_users=json.dumps('all'),
                target_roles=json.dumps(['admin']),
                is_read=random.choice([True, False]),
                is_active=True,
                action_url='/admin/system' if random.choice([True, False]) else None,
                action_text='–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º' if random.choice([True, False]) else None,
                created_at=datetime.utcnow() - timedelta(days=random.randint(0, 7))
            )
            
            db.session.add(notification)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        try:
            db.session.commit()
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –°–æ–∑–¥–∞–Ω–æ:")
            print(f"   - {AdminAuditLog.query.count()} –ª–æ–≥–æ–≤ –∞—É–¥–∏—Ç–∞")
            print(f"   - {SystemHealthLog.query.count()} –ª–æ–≥–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã")
            print(f"   - {DatabaseBackup.query.count()} –∑–∞–ø–∏—Å–µ–π —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")
            print(f"   - {EmailTemplate.query.count()} email —à–∞–±–ª–æ–Ω–æ–≤")
            print(f"   - {EmailCampaign.query.count()} email –∫–∞–º–ø–∞–Ω–∏–π")
            print(f"   - {SystemNotification.query.count()} —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            raise

if __name__ == '__main__':
    create_admin_tools_data()
