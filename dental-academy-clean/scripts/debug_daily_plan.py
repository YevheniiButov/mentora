#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import app, db
from models import User, SpacedRepetitionItem
from utils.daily_learning_algorithm import DailyLearningAlgorithm
from datetime import datetime, timezone

def debug_daily_plan():
    """–û—Ç–ª–∞–¥–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    
    print("üîç –û–¢–õ–ê–î–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò –ï–ñ–ï–î–ù–ï–í–ù–û–ì–û –ü–õ–ê–ù–ê")
    print("=" * 60)
    
    with app.app_context():
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User.query.first()
        if not user:
            print("   ‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Spaced Repetition —ç–ª–µ–º–µ–Ω—Ç—ã
        items = SpacedRepetitionItem.query.filter_by(user_id=user.id).all()
        print(f"   üìö –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ Spaced Repetition: {len(items)}")
        
        now = datetime.now(timezone.utc)
        overdue = [i for i in items if i.next_review.replace(tzinfo=timezone.utc) < now]
        print(f"   ‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(overdue)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for i, item in enumerate(overdue[:3]):
            overdue_days = (now - item.next_review.replace(tzinfo=timezone.utc)).days
            print(f"      {i+1}. –í–æ–ø—Ä–æ—Å {item.question_id} (–î–æ–º–µ–Ω: {item.domain}) - –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –Ω–∞ {overdue_days} –¥–Ω–µ–π")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞–Ω
        print("\n   üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞...")
        algorithm = DailyLearningAlgorithm()
        daily_plan = algorithm.generate_daily_plan(user.id, target_minutes=30)
        
        if daily_plan['success']:
            print("   ‚úÖ –ü–ª–∞–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ü–∏–∏
            daily_plan_data = daily_plan['daily_plan']
            
            print(f"   üìñ –¢–µ–æ—Ä–∏—è: {len(daily_plan_data['theory_section']['content'])} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            print(f"   ‚úèÔ∏è –ü—Ä–∞–∫—Ç–∏–∫–∞: {len(daily_plan_data['practice_section']['content'])} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            print(f"   üîÑ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {len(daily_plan_data['review_section']['content'])} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–µ–∫—Ü–∏–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            review_section = daily_plan_data['review_section']
            print(f"\n   üîç –î–µ—Ç–∞–ª–∏ —Å–µ–∫—Ü–∏–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:")
            print(f"      –í—Ä–µ–º—è: {review_section['estimated_time']} –º–∏–Ω—É—Ç")
            
            if review_section['content']:
                for i, item in enumerate(review_section['content']):
                    print(f"      {i+1}. {item['title']} (–î–æ–º–µ–Ω: {item['domain']}, –ü—Ä–æ—Å—Ä–æ—á–µ–Ω: {item['overdue_days']} –¥–Ω–µ–π)")
            else:
                print("      ‚ùå –°–µ–∫—Ü–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø—É—Å—Ç–∞!")
                
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {daily_plan['error']}")

if __name__ == "__main__":
    debug_daily_plan() 