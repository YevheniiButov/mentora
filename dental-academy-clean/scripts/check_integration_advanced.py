#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω—É—é —Ü–µ–ø–æ—á–∫—É –≤–∫–ª—é—á–∞—è –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫—É –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∑–∞–¥–∞—á
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import app
from models import db, User, DiagnosticSession, PersonalLearningPlan, UserProgress, TestAttempt, TestSession, TestResult
from datetime import datetime, timedelta, timezone
from utils.daily_learning_algorithm import DailyLearningAlgorithm
from utils.learning_plan_generator import create_learning_plan_from_diagnostic
import json

def log_step(step_name, message, data=None, status="INFO"):
    """–õ–æ–≥–∏—Ä—É–µ—Ç —à–∞–≥ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ —Å—Ç–∞—Ç—É—Å–æ–º"""
    status_icons = {
        "INFO": "üîç",
        "SUCCESS": "‚úÖ", 
        "WARNING": "‚ö†Ô∏è",
        "ERROR": "‚ùå",
        "DEBUG": "üîß"
    }
    
    icon = status_icons.get(status, "üîç")
    print(f"\n{icon} –®–ê–ì {step_name}")
    print(f"   {message}")
    if data:
        if isinstance(data, dict):
            for key, value in data.items():
                print(f"   {key}: {value}")
        else:
            print(f"   –î–∞–Ω–Ω—ã–µ: {data}")
    print("-" * 50)

def create_test_user():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    log_step("1. –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø", "–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    
    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing_user = User.query.filter_by(email='test@integration.com').first()
    if existing_user:
        # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        DiagnosticSession.query.filter_by(user_id=existing_user.id).delete()
        PersonalLearningPlan.query.filter_by(user_id=existing_user.id).delete()
        UserProgress.query.filter_by(user_id=existing_user.id).delete()
        TestAttempt.query.filter_by(user_id=existing_user.id).delete()
        TestSession.query.filter_by(user_id=existing_user.id).delete()
        TestResult.query.filter_by(user_id=existing_user.id).delete()
        db.session.delete(existing_user)
        db.session.commit()
        print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {existing_user.id}")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_user = User(
        email='test@integration.com',
        username='test_integration',
        first_name='Test',
        last_name='Integration',
        requires_diagnostic=True,
        registration_completed=True
    )
    db.session.add(test_user)
    db.session.commit()
    
    log_step("1.1 –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –°–û–ó–î–ê–ù", f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {test_user.id}", {
        "email": test_user.email,
        "requires_diagnostic": test_user.requires_diagnostic,
        "registration_completed": test_user.registration_completed
    }, "SUCCESS")
    
    return test_user

def create_test_diagnostic(user):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    log_step("2. –°–û–ó–î–ê–ù–ò–ï –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò", f"–°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é —Å–µ—Å—Å–∏—é —Å –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    test_session = DiagnosticSession(
        user_id=user.id,
        session_type='diagnostic',
        current_ability=0.45,  # –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
        questions_answered=15,
        correct_answers=9,
        status='completed',
        started_at=datetime.now(timezone.utc) - timedelta(hours=1),
        completed_at=datetime.now(timezone.utc)
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_session.session_data = json.dumps({
        'domain_results': {
            'THER': {'correct': 3, 'total': 4, 'accuracy': 0.75},
            'SURG': {'correct': 2, 'total': 4, 'accuracy': 0.50},
            'ORTH': {'correct': 4, 'total': 4, 'accuracy': 1.00},
            'PEDO': {'correct': 1, 'total': 3, 'accuracy': 0.33}
        },
        'question_responses': [
            {'question_id': 1, 'selected_option': 'A', 'is_correct': True, 'response_time': 45},
            {'question_id': 2, 'selected_option': 'B', 'is_correct': False, 'response_time': 30},
            {'question_id': 3, 'selected_option': 'C', 'is_correct': True, 'response_time': 60}
        ]
    })
    
    db.session.add(test_session)
    db.session.commit()
    
    log_step("2.1 –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–û–ó–î–ê–ù–ê", f"–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ID: {test_session.id}", {
        "current_ability": test_session.current_ability,
        "questions_answered": test_session.questions_answered,
        "correct_answers": test_session.correct_answers,
        "accuracy": f"{test_session.correct_answers/test_session.questions_answered*100:.1f}%"
    }, "SUCCESS")
    
    return test_session

def test_learning_plan_creation(user, diagnostic_session):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –æ–±—É—á–µ–Ω–∏—è"""
    log_step("3. –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–ù–ê –û–ë–£–ß–ï–ù–ò–Ø", f"–°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ {diagnostic_session.id}")
    
    try:
        plan = create_learning_plan_from_diagnostic(
            user_id=user.id,
            diagnostic_session_id=diagnostic_session.id
        )
        
        log_step("3.1 –ü–õ–ê–ù –°–û–ó–î–ê–ù", f"–ü–ª–∞–Ω ID: {plan.id}", {
            "current_ability": plan.current_ability,
            "target_ability": plan.target_ability,
            "weak_domains_count": len(plan.get_weak_domains()),
            "strong_domains_count": len(plan.get_strong_domains()),
            "next_diagnostic_date": plan.next_diagnostic_date,
            "overall_progress": f"{plan.overall_progress}%"
        }, "SUCCESS")
        
        return plan
        
    except Exception as e:
        log_step("3.1 –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ü–õ–ê–ù–ê", f"–û—à–∏–±–∫–∞: {e}", {}, "ERROR")
        return None

def test_daily_tasks_generation(user, learning_plan):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á"""
    log_step("4. –ì–ï–ù–ï–†–ê–¶–ò–Ø –ï–ñ–ï–î–ù–ï–í–ù–´–• –ó–ê–î–ê–ß", f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–ª–∞–Ω–∞ {learning_plan.id}")
    
    try:
        algorithm = DailyLearningAlgorithm()
        daily_plan = algorithm.generate_daily_plan(
            user_id=user.id,
            target_minutes=45
        )
        
        if daily_plan.get('success'):
            daily_sections = daily_plan.get('daily_plan', {})
            section_stats = {}
            
            for section_name, section_data in daily_sections.items():
                content = section_data.get('content', [])
                section_stats[section_name] = len(content)
            
            log_step("4.1 –ó–ê–î–ê–ß–ò –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–´", "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞–Ω —Å–æ–∑–¥–∞–Ω", {
                "target_minutes": daily_plan.get('target_minutes'),
                "weak_domains": daily_plan.get('weak_domains', [])[:3],  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                "sections": section_stats,
                "total_content_items": sum(section_stats.values())
            }, "SUCCESS")
            
            return daily_plan
        else:
            log_step("4.1 –û–®–ò–ë–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò", f"–û—à–∏–±–∫–∞: {daily_plan.get('error')}", {
                "requires_diagnostic": daily_plan.get('requires_diagnostic'),
                "requires_reassessment": daily_plan.get('requires_reassessment')
            }, "ERROR")
            return None
            
    except Exception as e:
        log_step("4.1 –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê", f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}", {}, "ERROR")
        return None

def test_reassessment_scenario(user, learning_plan):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏"""
    log_step("5. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ï–†–ï–û–¶–ï–ù–ö–ò", f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏ –¥–ª—è –ø–ª–∞–Ω–∞ {learning_plan.id}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏ –≤ –ø—Ä–æ—à–ª–æ–µ
    learning_plan.next_diagnostic_date = datetime.now(timezone.utc).date() - timedelta(days=1)
    db.session.commit()
    
    log_step("5.1 –î–ê–¢–ê –ü–ï–†–ï–û–¶–ï–ù–ö–ò –£–°–¢–ê–ù–û–í–õ–ï–ù–ê", "–î–∞—Ç–∞ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ø—Ä–æ—à–ª–æ–µ", {
        "next_diagnostic_date": learning_plan.next_diagnostic_date,
        "days_overdue": 1
    }, "WARNING")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–ª–≥–æ—Ä–∏—Ç–º –±–ª–æ–∫–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–∞–¥–∞—á
    try:
        algorithm = DailyLearningAlgorithm()
        daily_plan = algorithm.generate_daily_plan(
            user_id=user.id,
            target_minutes=30
        )
        
        if not daily_plan.get('success') and daily_plan.get('requires_reassessment'):
            log_step("5.2 –ë–õ–û–ö–ò–†–û–í–ö–ê –†–ê–ë–û–¢–ê–ï–¢", "–ê–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", {
                "success": daily_plan.get('success'),
                "requires_reassessment": daily_plan.get('requires_reassessment'),
                "redirect_url": daily_plan.get('redirect_url'),
                "error_message": daily_plan.get('error')
            }, "SUCCESS")
            
            return True
        else:
            log_step("5.2 –û–®–ò–ë–ö–ê –ë–õ–û–ö–ò–†–û–í–ö–ò", "–ê–ª–≥–æ—Ä–∏—Ç–º –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é", {
                "success": daily_plan.get('success'),
                "requires_reassessment": daily_plan.get('requires_reassessment')
            }, "ERROR")
            return False
            
    except Exception as e:
        log_step("5.2 –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê", f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}", {}, "ERROR")
        return False

def test_reassessment_completion(user, learning_plan):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏"""
    log_step("6. –ó–ê–í–ï–†–®–ï–ù–ò–ï –ü–ï–†–ï–û–¶–ï–ù–ö–ò", f"–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Ç–∏–ø–∞ 'reassessment'")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é —Å–µ—Å—Å–∏—é —Ç–∏–ø–∞ 'reassessment'
    reassessment_session = DiagnosticSession(
        user_id=user.id,
        session_type='reassessment',
        current_ability=0.65,  # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
        questions_answered=12,
        correct_answers=9,
        status='completed',
        started_at=datetime.now(timezone.utc) - timedelta(minutes=30),
        completed_at=datetime.now(timezone.utc)
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏
    reassessment_session.session_data = json.dumps({
        'domain_results': {
            'THER': {'correct': 4, 'total': 4, 'accuracy': 1.00},
            'SURG': {'correct': 3, 'total': 4, 'accuracy': 0.75},
            'ORTH': {'correct': 4, 'total': 4, 'accuracy': 1.00},
            'PEDO': {'correct': 2, 'total': 3, 'accuracy': 0.67}
        }
    })
    
    db.session.add(reassessment_session)
    db.session.commit()
    
    log_step("6.1 –ü–ï–†–ï–û–¶–ï–ù–ö–ê –°–û–ó–î–ê–ù–ê", f"–ü–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞ ID: {reassessment_session.id}", {
        "current_ability": reassessment_session.current_ability,
        "improvement": f"+{reassessment_session.current_ability - 0.45:.2f}",
        "accuracy": f"{reassessment_session.correct_answers/reassessment_session.questions_answered*100:.1f}%"
    }, "SUCCESS")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    try:
        learning_plan.current_ability = reassessment_session.current_ability
        learning_plan.diagnostic_session_id = reassessment_session.id
        learning_plan.next_diagnostic_date = datetime.now(timezone.utc).date() + timedelta(days=14)
        learning_plan.diagnostic_reminder_sent = False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –¥–æ–º–µ–Ω–æ–≤
        results = reassessment_session.generate_results()
        learning_plan.set_domain_analysis(results.get('domain_abilities', {}))
        learning_plan.set_weak_domains(results.get('weak_domains', []))
        learning_plan.set_strong_domains(results.get('strong_domains', []))
        
        db.session.commit()
        
        log_step("6.2 –ü–õ–ê–ù –û–ë–ù–û–í–õ–ï–ù", "–ü–ª–∞–Ω –æ–±–Ω–æ–≤–ª–µ–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏", {
            "new_current_ability": learning_plan.current_ability,
            "new_next_diagnostic_date": learning_plan.next_diagnostic_date,
            "weak_domains_count": len(learning_plan.get_weak_domains()),
            "strong_domains_count": len(learning_plan.get_strong_domains())
        }, "SUCCESS")
        
        return reassessment_session
        
    except Exception as e:
        log_step("6.2 –û–®–ò–ë–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø", f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞: {e}", {}, "ERROR")
        return None

def test_post_reassessment_tasks(user, learning_plan):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–∞–¥–∞—á –ø–æ—Å–ª–µ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏"""
    log_step("7. –ó–ê–î–ê–ß–ò –ü–û–°–õ–ï –ü–ï–†–ï–û–¶–ï–ù–ö–ò", f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–∞–¥–∞—á –ø–æ—Å–ª–µ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏")
    
    try:
        algorithm = DailyLearningAlgorithm()
        daily_plan = algorithm.generate_daily_plan(
            user_id=user.id,
            target_minutes=30
        )
        
        if daily_plan.get('success'):
            daily_sections = daily_plan.get('daily_plan', {})
            section_stats = {}
            
            for section_name, section_data in daily_sections.items():
                content = section_data.get('content', [])
                section_stats[section_name] = len(content)
            
            log_step("7.1 –ó–ê–î–ê–ß–ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–´", "–ó–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏", {
                "success": daily_plan.get('success'),
                "target_minutes": daily_plan.get('target_minutes'),
                "sections": section_stats,
                "total_content_items": sum(section_stats.values())
            }, "SUCCESS")
            
            return True
        else:
            log_step("7.1 –û–®–ò–ë–ö–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø", f"–ó–∞–¥–∞—á–∏ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è: {daily_plan.get('error')}", {
                "success": daily_plan.get('success'),
                "requires_diagnostic": daily_plan.get('requires_diagnostic'),
                "requires_reassessment": daily_plan.get('requires_reassessment')
            }, "ERROR")
            return False
            
    except Exception as e:
        log_step("7.1 –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê", f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}", {}, "ERROR")
        return False

def run_integration_test():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("üöÄ –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –°–ò–°–¢–ï–ú–´")
    print("=" * 70)
    
    with app.app_context():
        try:
            # –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = create_test_user()
            if not user:
                return False
            
            # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            diagnostic_session = create_test_diagnostic(user)
            if not diagnostic_session:
                return False
            
            # –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –æ–±—É—á–µ–Ω–∏—è
            learning_plan = test_learning_plan_creation(user, diagnostic_session)
            if not learning_plan:
                return False
            
            # –®–∞–≥ 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á
            daily_plan = test_daily_tasks_generation(user, learning_plan)
            if not daily_plan:
                return False
            
            # –®–∞–≥ 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏
            reassessment_blocked = test_reassessment_scenario(user, learning_plan)
            if not reassessment_blocked:
                return False
            
            # –®–∞–≥ 6: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏
            reassessment_session = test_reassessment_completion(user, learning_plan)
            if not reassessment_session:
                return False
            
            # –®–∞–≥ 7: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á
            tasks_restored = test_post_reassessment_tasks(user, learning_plan)
            if not tasks_restored:
                return False
            
            print("\nüéâ –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ü–†–û–®–õ–ê –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
            print("‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            return True
            
        except Exception as e:
            print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            import traceback
            traceback.print_exc()
            return False

if __name__ == '__main__':
    success = run_integration_test()
    if success:
        print("\n‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        sys.exit(0)
    else:
        print("\n‚ùå –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1) 