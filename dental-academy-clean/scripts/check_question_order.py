#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—è–¥–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
–ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å —Ñ–∞–π–ª–æ–º 160_2.json
"""

import json
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import app
from models import Question, BIGDomain
from extensions import db

def load_160_2_order():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ 160_2.json"""
    
    file_path = os.path.join(os.path.dirname(__file__), '160_2.json')
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å: id -> –ø–æ–∑–∏—Ü–∏—è –≤ —Ñ–∞–π–ª–µ
        order_dict = {}
        for i, question in enumerate(data):
            question_id = question.get('id')
            if question_id:
                order_dict[question_id] = i + 1  # +1 –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ (–Ω–∞—á–∏–Ω–∞—è —Å 1)
        
        return order_dict, data
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ 160_2.json: {e}")
        return {}, []

def check_question_order():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    print('üîç –ü–†–û–í–ï–†–ö–ê –ü–û–†–Ø–î–ö–ê –í–û–ü–†–û–°–û–í')
    print('=' * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞
    file_order, file_data = load_160_2_order()
    
    if not file_order:
        print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞')
        return
    
    print(f'üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(file_order)} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞')
    
    with app.app_context():
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –ë–î, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ ID
        db_questions = Question.query.order_by(Question.id).all()
        
        print(f'üìä –ù–∞–π–¥–µ–Ω–æ {len(db_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID
        file_ids = set(file_order.keys())
        db_ids = {q.id for q in db_questions}
        
        print(f'\nüìã –ê–ù–ê–õ–ò–ó ID –í–û–ü–†–û–°–û–í:')
        print(f'   –í —Ñ–∞–π–ª–µ: {len(file_ids)} –≤–æ–ø—Ä–æ—Å–æ–≤')
        print(f'   –í –ë–î: {len(db_ids)} –≤–æ–ø—Ä–æ—Å–æ–≤')
        print(f'   –û–±—â–∏–µ: {len(file_ids & db_ids)} –≤–æ–ø—Ä–æ—Å–æ–≤')
        print(f'   –¢–æ–ª—å–∫–æ –≤ —Ñ–∞–π–ª–µ: {len(file_ids - db_ids)} –≤–æ–ø—Ä–æ—Å–æ–≤')
        print(f'   –¢–æ–ª—å–∫–æ –≤ –ë–î: {len(db_ids - file_ids)} –≤–æ–ø—Ä–æ—Å–æ–≤')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        common_ids = file_ids & db_ids
        
        if common_ids:
            print(f'\nüìä –ü–†–û–í–ï–†–ö–ê –ü–û–†–Ø–î–ö–ê –î–õ–Ø {len(common_ids)} –û–ë–©–ò–• –í–û–ü–†–û–°–û–í:')
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –≤ –ø–æ—Ä—è–¥–∫–µ –ë–î
            db_order = []
            for q in db_questions:
                if q.id in common_ids:
                    db_order.append(q.id)
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ ID –≤ –ø–æ—Ä—è–¥–∫–µ —Ñ–∞–π–ª–∞
            file_order_list = []
            for question in file_data:
                question_id = question.get('id')
                if question_id in common_ids:
                    file_order_list.append(question_id)
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–∫–∏
            order_matches = 0
            order_mismatches = []
            
            for i, (file_id, db_id) in enumerate(zip(file_order_list, db_order)):
                if file_id == db_id:
                    order_matches += 1
                else:
                    order_mismatches.append({
                        'position': i + 1,
                        'file_id': file_id,
                        'db_id': db_id,
                        'file_domain': next((q.get('domain') for q in file_data if q.get('id') == file_id), 'N/A'),
                        'db_domain': next((q.domain for q in db_questions if q.id == db_id), 'N/A')
                    })
            
            print(f'   ‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –ø–æ—Ä—è–¥–∫—É: {order_matches}')
            print(f'   ‚ùå –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –ø–æ—Ä—è–¥–∫—É: {len(order_mismatches)}')
            
            if order_mismatches:
                print(f'\nüìã –ü–ï–†–í–´–ï 10 –ù–ï–°–û–í–ü–ê–î–ï–ù–ò–ô:')
                print(f'   {"–ü–æ–∑":<4} {"–§–∞–π–ª ID":<8} {"–ë–î ID":<8} {"–§–∞–π–ª –¥–æ–º–µ–Ω":<15} {"–ë–î –¥–æ–º–µ–Ω":<15}')
                print('   ' + '-' * 60)
                
                for mismatch in order_mismatches[:10]:
                    print(f'   {mismatch["position"]:<4} {mismatch["file_id"]:<8} {mismatch["db_id"]:<8} '
                          f'{mismatch["file_domain"]:<15} {mismatch["db_domain"]:<15}')
                
                if len(order_mismatches) > 10:
                    print(f'   ... –∏ –µ—â–µ {len(order_mismatches) - 10} –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –ø–æ –¥–æ–º–µ–Ω–∞–º
            print(f'\nüìä –ê–ù–ê–õ–ò–ó –ü–û –î–û–ú–ï–ù–ê–ú:')
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–æ–º–µ–Ω–∞–º
            domain_analysis = {}
            
            for question in file_data:
                domain = question.get('domain')
                question_id = question.get('id')
                
                if domain and question_id in common_ids:
                    if domain not in domain_analysis:
                        domain_analysis[domain] = {'file_order': [], 'db_order': []}
                    
                    domain_analysis[domain]['file_order'].append(question_id)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏–∑ –ë–î
            for question in db_questions:
                if question.id in common_ids:
                    domain = question.domain
                    if domain in domain_analysis:
                        domain_analysis[domain]['db_order'].append(question.id)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –¥–æ–º–µ–Ω
            for domain, orders in domain_analysis.items():
                file_order_domain = orders['file_order']
                db_order_domain = orders['db_order']
                
                if file_order_domain == db_order_domain:
                    status = "‚úÖ"
                else:
                    status = "‚ùå"
                
                print(f'   {status} {domain}: {len(file_order_domain)} –≤–æ–ø—Ä–æ—Å–æ–≤')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤
        print(f'\nüìã –ü–†–ò–ú–ï–†–´ –í–û–ü–†–û–°–û–í (–ø–µ—Ä–≤—ã–µ 5):')
        print(f'   {"ID":<6} {"–§–∞–π–ª –¥–æ–º–µ–Ω":<15} {"–ë–î –¥–æ–º–µ–Ω":<15} {"–ü–æ—Ä—è–¥–æ–∫":<10}')
        print('   ' + '-' * 55)
        
        for i, question in enumerate(db_questions[:5]):
            file_domain = file_order.get(question.id, 'N/A')
            if file_domain != 'N/A':
                file_domain = next((q.get('domain') for q in file_data if q.get('id') == question.id), 'N/A')
            
            order_status = "‚úÖ" if file_domain == question.domain else "‚ùå"
            
            print(f'   {question.id:<6} {file_domain:<15} {question.domain:<15} {order_status:<10}')

if __name__ == '__main__':
    check_question_order()


