#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
–ó–∞–ø—É—Å–∫–∞–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ—Å–ª–µ –ª—é–±—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π!
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import app, db
from utils.diagnostic_data_manager import DiagnosticDataManager
from utils.domain_mapping import get_domain_name, ALL_BIG_DOMAINS
from models import User, DiagnosticSession

def check_diagnostic_data_manager():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å DiagnosticDataManager"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ DiagnosticDataManager...")
    
    try:
        with app.app_context():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 6
            data = DiagnosticDataManager.get_user_diagnostic_data(6)
            
            if not data.get('has_diagnostic'):
                print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
                return False
                
            domains = data.get('domains', [])
            if len(domains) != 28:
                print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–µ–Ω–æ–≤: {len(domains)} (–æ–∂–∏–¥–∞–µ—Ç—Å—è 28)")
                return False
                
            domains_with_data = [d for d in domains if d.get('score', 0) > 0]
            if len(domains_with_data) == 0:
                print("‚ùå –ù–µ—Ç –¥–æ–º–µ–Ω–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏")
                return False
                
            print(f"‚úÖ DiagnosticDataManager —Ä–∞–±–æ—Ç–∞–µ—Ç: {len(domains_with_data)} –¥–æ–º–µ–Ω–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ DiagnosticDataManager: {e}")
        return False

def check_domain_mapping():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ –¥–æ–º–µ–Ω–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–ø–ø–∏–Ω–≥–∞ –¥–æ–º–µ–Ω–æ–≤...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–µ–Ω–æ–≤
        if len(ALL_BIG_DOMAINS) != 28:
            print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–µ–Ω–æ–≤: {len(ALL_BIG_DOMAINS)} (–æ–∂–∏–¥–∞–µ—Ç—Å—è 28)")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤
        test_domains = ['THER', 'SURG', 'PROTH', 'PEDI', 'PARO']
        for domain_code in test_domains:
            name = get_domain_name(domain_code)
            if not name or name == domain_code:
                print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è {domain_code}: {name}")
                return False
                
        print("‚úÖ –ú–∞–ø–ø–∏–Ω–≥ –¥–æ–º–µ–Ω–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–∞–ø–ø–∏–Ω–≥–µ –¥–æ–º–µ–Ω–æ–≤: {e}")
        return False

def check_database_data():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        with app.app_context():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User.query.get(6)
            if not user:
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 6 –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Å—Å–∏–∏
            sessions = DiagnosticSession.query.filter_by(user_id=6, status='completed').all()
            if len(sessions) == 0:
                print("‚ùå –ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π")
                return False
                
            latest_session = max(sessions, key=lambda s: s.questions_answered)
            if latest_session.questions_answered < 10:
                print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–µ—Å—Å–∏–∏: {latest_session.questions_answered}")
                return False
                
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –≤ –ë–î –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã: {len(sessions)} —Å–µ—Å—Å–∏–π, {latest_session.questions_answered} –≤–æ–ø—Ä–æ—Å–æ–≤")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î: {e}")
        return False

def check_learning_plan_data():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞ –æ–±—É—á–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–∞ –æ–±—É—á–µ–Ω–∏—è...")
    
    try:
        with app.app_context():
            plan_data = DiagnosticDataManager.get_learning_plan_data(6)
            
            if not plan_data.get('has_plan'):
                print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –æ–±—É—á–µ–Ω–∏—è")
                return False
                
            plan_info = plan_data.get('plan_data', {})
            if not plan_info.get('exam_date'):
                print("‚ùå –ù–µ—Ç –¥–∞—Ç—ã —ç–∫–∑–∞–º–µ–Ω–∞ –≤ –ø–ª–∞–Ω–µ")
                return False
                
            print(f"‚úÖ –ü–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: —ç–∫–∑–∞–º–µ–Ω {plan_info.get('exam_date')}")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞–Ω–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üè• –ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò –ö–ê–õ–ï–ù–î–ê–†–Ø")
    print("=" * 50)
    
    checks = [
        check_domain_mapping,
        check_database_data,
        check_diagnostic_data_manager,
        check_learning_plan_data
    ]
    
    passed = 0
    total = len(checks)
    
    for check in checks:
        if check():
            passed += 1
        print()
    
    print("=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("‚úÖ –ö–ê–õ–ï–ù–î–ê–†–¨ –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        print("üåê URL: http://127.0.0.1:5000/dashboard/learning-planner/26")
        return True
    else:
        print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 