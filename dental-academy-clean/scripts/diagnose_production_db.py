#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ production –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from app import app
from models import db, User

def diagnose_production_db():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ production –ë–î"""
    
    with app.app_context():
        try:
            print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê PRODUCTION –ë–ê–ó–´ –î–ê–ù–ù–´–•")
            print("=" * 60)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            print("üåç –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø:")
            print(f"   DATABASE_URL: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if os.environ.get('DATABASE_URL') else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
            print(f"   FLASK_ENV: {os.environ.get('FLASK_ENV', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")
            print(f"   SECRET_KEY: {'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if os.environ.get('SECRET_KEY') else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            print("\nüîå –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ë–î:")
            try:
                result = db.session.execute('SELECT 1').scalar()
                print(f"   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: OK (—Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result})")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            print("\nüìä –¢–ê–ë–õ–ò–¶–´ –ë–î:")
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É users
                user_count = User.query.count()
                print(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}")
                
                if user_count > 0:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    recent_users = User.query.order_by(User.created_at.desc()).limit(5).all()
                    print("   üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
                    for user in recent_users:
                        print(f"      - {user.email} (ID: {user.id}, –†–æ–ª—å: {user.role}, –°–æ–∑–¥–∞–Ω: {user.created_at.strftime('%d.%m.%Y %H:%M')})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–æ–≤
                admins = User.query.filter_by(role='admin').all()
                print(f"   üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(admins)}")
                
                if admins:
                    print("   üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:")
                    for admin in admins:
                        print(f"      - {admin.email} (ID: {admin.id}, –ê–∫—Ç–∏–≤–µ–Ω: {admin.is_active})")
                        print(f"        –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {admin.last_login.strftime('%d.%m.%Y %H:%M') if admin.last_login else '–ù–∏–∫–æ–≥–¥–∞'}")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã CRM
            print("\nüè¢ CRM –¢–ê–ë–õ–ò–¶–´:")
            try:
                from models import Profession, Contact
                
                profession_count = Profession.query.count()
                contact_count = Contact.query.count()
                
                print(f"   üë®‚Äç‚öïÔ∏è –ü—Ä–æ—Ñ–µ—Å—Å–∏–π: {profession_count}")
                print(f"   üìû –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤: {contact_count}")
                
            except Exception as e:
                print(f"   ‚ö†Ô∏è  CRM —Ç–∞–±–ª–∏—Ü—ã: {e}")
            
            print("\n‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
            return True
            
        except Exception as e:
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
            import traceback
            traceback.print_exc()
            return False

if __name__ == "__main__":
    success = diagnose_production_db()
    if not success:
        print("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ò–õ–ê–°–¨ –° –û–®–ò–ë–ö–û–ô")
        sys.exit(1)
    else:
        print("‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–´–ü–û–õ–ù–ï–ù–ê –£–°–ü–ï–®–ù–û")
