#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è production –¥–µ–ø–ª–æ—è
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
–° —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import os
import sys
import json
import logging
from pathlib import Path
from datetime import datetime

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('seed_production.log')
    ]
)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

try:
    from app import app
    from extensions import db
    from models import (
        BIGDomain, LearningPath, Subject, Module, Lesson,
        Question, IRTParameters, VirtualPatientScenario,
        Achievement, User, UserProgress
    )
    logger.info("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    sys.exit(1)

def safe_json_load(file_path):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ JSON —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except json.JSONDecodeError as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ JSON –≤ {file_path.name}: {e}")
        return None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path.name}: {e}")
        return None

def load_bi_toets_structure():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É BI-toets –ø—É—Ç–µ–π –æ–±—É—á–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ BI-toets 2025"""
    logger.info("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º BI-toets —Å—Ç—Ä—É–∫—Ç—É—Ä—É...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—É—Ç–∏ –æ–±—É—á–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ BI-toets 2025 (9 –ø—É—Ç–µ–π)
        learning_paths = [
            {
                'id': 'basic_medical_sciences',
                'name': 'Basic Medical Sciences',
                'name_nl': 'Basic Medical Sciences',
                'name_ru': '–ë–∞–∑–æ–≤—ã–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –Ω–∞—É–∫–∏',
                'description': '–û–±—â–∏–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –Ω–∞—É–∫–∏ - Multiple choice —Ñ–æ—Ä–º–∞—Ç',
                'exam_component': 'THEORETICAL',
                'exam_weight': 15.0,
                'exam_type': 'multiple_choice',
                'duration_weeks': 8,
                'total_estimated_hours': 80
            },
            {
                'id': 'thk_1',
                'name': 'THK I - Tandheelkunde Kern I',
                'name_nl': 'THK I - Tandheelkunde Kern I',
                'name_ru': 'THK I - –û—Å–Ω–æ–≤—ã —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏ I',
                'description': '–ö–∞—Ä–∏–æ–ª–æ–≥–∏—è, –°–ª—é–Ω–∞, –≠–Ω–¥–æ–¥–æ–Ω—Ç–∏—è, –î–µ—Ç—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è, –ü–∞—Ä–æ–¥–æ–Ω—Ç–æ–ª–æ–≥–∏—è',
                'exam_component': 'THEORETICAL',
                'exam_weight': 25.0,
                'exam_type': 'multiple_choice',
                'duration_weeks': 12,
                'total_estimated_hours': 120
            },
            {
                'id': 'thk_2',
                'name': 'THK II - Tandheelkunde Kern II',
                'name_nl': 'THK II - Tandheelkunde Kern II',
                'name_ru': 'THK II - –û—Å–Ω–æ–≤—ã —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏ II',
                'description': '–ü—Ä–æ—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ, –û—Ä—Ç–æ–¥–æ–Ω—Ç–∏—è, –ß–µ–ª—é—Å—Ç–Ω–æ-–ª–∏—Ü–µ–≤–∞—è —Ö–∏—Ä—É—Ä–≥–∏—è, –ö–∏–Ω–µ–∑–∏–æ–ª–æ–≥–∏—è',
                'exam_component': 'THEORETICAL',
                'exam_weight': 25.0,
                'exam_type': 'multiple_choice',
                'duration_weeks': 12,
                'total_estimated_hours': 120
            },
            {
                'id': 'radiology',
                'name': 'Radiologie',
                'name_nl': 'Radiologie',
                'name_ru': '–†–µ–Ω—Ç–≥–µ–Ω–æ–ª–æ–≥–∏—è',
                'description': '–†–µ–Ω—Ç–≥–µ–Ω–æ–ª–æ–≥–∏—è - Multiple choice —Ñ–æ—Ä–º–∞—Ç',
                'exam_component': 'THEORETICAL',
                'exam_weight': 10.0,
                'exam_type': 'multiple_choice',
                'duration_weeks': 6,
                'total_estimated_hours': 60
            },
            {
                'id': 'statistics',
                'name': 'Statistiek voor tandheelkunde',
                'name_nl': 'Statistiek voor tandheelkunde',
                'name_ru': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏–∏',
                'description': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - Multiple choice, Open book',
                'exam_component': 'METHODOLOGY',
                'exam_weight': 8.0,
                'exam_type': 'open_book',
                'duration_weeks': 4,
                'total_estimated_hours': 40
            },
            {
                'id': 'research_methodology',
                'name': 'Onderzoeksmethodologie',
                'name_nl': 'Onderzoeksmethodologie',
                'name_ru': '–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π',
                'description': '–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è - Short answer, Open book (PICO, –¥–∏–∑–∞–π–Ω –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π)',
                'exam_component': 'METHODOLOGY',
                'exam_weight': 7.0,
                'exam_type': 'open_book',
                'duration_weeks': 4,
                'total_estimated_hours': 40
            },
            {
                'id': 'communication_ethics',
                'name': 'Communicatie en ethiek',
                'name_nl': 'Communicatie en ethiek',
                'name_ru': '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è –∏ —ç—Ç–∏–∫–∞',
                'description': '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è –∏ —ç—Ç–∏–∫–∞ - Multiple choice, Short answer',
                'exam_component': 'COMMUNICATION',
                'exam_weight': 5.0,
                'exam_type': 'multiple_choice',
                'duration_weeks': 3,
                'total_estimated_hours': 30
            },
            {
                'id': 'clinical_skills',
                'name': 'Klinische vaardigheden',
                'name_nl': 'Klinische vaardigheden',
                'name_ru': '–ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏',
                'description': '–ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ - OSCE —Ñ–æ—Ä–º–∞—Ç',
                'exam_component': 'CLINICAL',
                'exam_weight': 5.0,
                'exam_type': 'osce',
                'duration_weeks': 3,
                'total_estimated_hours': 30
            }
        ]
        
        for path_data in learning_paths:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º Session.get() –≤–º–µ—Å—Ç–æ Query.get()
                existing = db.session.get(LearningPath, path_data['id'])
                
                if not existing:
                    learning_path = LearningPath(**path_data)
                    db.session.add(learning_path)
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—É—Ç—å –æ–±—É—á–µ–Ω–∏—è: {path_data['name']}")
                else:
                    logger.info(f"‚ÑπÔ∏è –ü—É—Ç—å –æ–±—É—á–µ–Ω–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {path_data['name']}")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—É—Ç–∏ –æ–±—É—á–µ–Ω–∏—è {path_data['name']}: {e}")
                continue
        
        db.session.commit()
        logger.info("‚úÖ BI-toets —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ BI-toets —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
        db.session.rollback()
        raise

def load_domains():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ–º–µ–Ω—ã BI-toets"""
    logger.info("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–º–µ–Ω—ã BI-toets...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–æ–º–µ–Ω—ã
        existing_domains = BIGDomain.query.count()
        if existing_domains > 0:
            logger.info(f"‚úÖ –î–æ–º–µ–Ω—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç ({existing_domains} –¥–æ–º–µ–Ω–æ–≤)")
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–º–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞ domain_mapping.json
        domain_file = Path(__file__).parent.parent / 'cards' / 'domain_mapping.json'
        if not domain_file.exists():
            logger.error(f"‚ùå –§–∞–π–ª –¥–æ–º–µ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {domain_file}")
            return
        
        domains_data = safe_json_load(domain_file)
        if not domains_data:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–æ–º–µ–Ω–æ–≤")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞
        if isinstance(domains_data, dict) and 'domain_mapping' in domains_data:
            # –§–∞–π–ª –∏–º–µ–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É {"domain_mapping": {...}}
            domain_mapping = domains_data['domain_mapping']
            domains_to_create = []
            
            for domain_name, domain_info in domain_mapping.items():
                if isinstance(domain_info, dict):
                    domain_data = {
                        'name': domain_name,
                        'description': domain_info.get('description', ''),
                        'weight': domain_info.get('weight', 1),
                        'priority': domain_info.get('priority', 'medium'),
                        'is_active': True
                    }
                    domains_to_create.append(domain_data)
        elif isinstance(domains_data, list):
            # –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤
            domains_to_create = domains_data
        else:
            logger.error("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ –¥–æ–º–µ–Ω–æ–≤")
            return
        
        for domain_data in domains_to_create:
            try:
                if isinstance(domain_data, dict):
                    domain = BIGDomain(**domain_data)
                    db.session.add(domain)
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –¥–æ–º–µ–Ω: {domain_data.get('name', 'Unknown')}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–º–µ–Ω–∞: {domain_data}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–º–µ–Ω–∞ {domain_data.get('name', 'Unknown') if isinstance(domain_data, dict) else 'Unknown'}: {e}")
                continue
        
        db.session.commit()
        logger.info("‚úÖ –î–æ–º–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–º–µ–Ω–æ–≤: {e}")
        db.session.rollback()
        raise

def load_questions():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ñ–∞–π–ª–æ–≤ JSON"""
    logger.info("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤–æ–ø—Ä–æ—Å—ã
        existing_questions = Question.query.count()
        if existing_questions > 0:
            logger.info(f"‚úÖ –í–æ–ø—Ä–æ—Å—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç ({existing_questions} –≤–æ–ø—Ä–æ—Å–æ–≤)")
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ñ–∞–π–ª–æ–≤
        questions_files = [
            Path(__file__).parent / '160.json',
            Path(__file__).parent / '160_2.json'
        ]
        
        total_questions = 0
        for file_path in questions_files:
            if not file_path.exists():
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                continue
            
            questions_data = safe_json_load(file_path)
            if not questions_data:
                continue
            
            for question_data in questions_data:
                try:
                    question = Question(**question_data)
                    db.session.add(question)
                    total_questions += 1
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
                    continue
        
        db.session.commit()
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {total_questions} –≤–æ–ø—Ä–æ—Å–æ–≤")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        db.session.rollback()
        raise

def load_learning_cards():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—É—á–∞—é—â–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–∑ –ø–∞–ø–∫–∏ cards"""
    logger.info("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–∞—é—â–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏...")
    
    try:
        cards_dir = Path(__file__).parent.parent / 'cards'
        if not cards_dir.exists():
            logger.error(f"‚ùå –ü–∞–ø–∫–∞ cards –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {cards_dir}")
            return
        
        total_cards = 0
        categories_processed = 0
        
        for category_dir in cards_dir.iterdir():
            if category_dir.is_dir() and not category_dir.name.startswith('.'):
                logger.info(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category_dir.name}")
                
                # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
                for file_path in category_dir.glob('*.json'):
                    if 'learning_cards' in file_path.name.lower():
                        cards_data = safe_json_load(file_path)
                        if cards_data:
                            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
                            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å—á–∏—Ç–∞–µ–º
                            if isinstance(cards_data, list):
                                total_cards += len(cards_data)
                            elif isinstance(cards_data, dict):
                                total_cards += 1
                
                categories_processed += 1
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {total_cards} –æ–±—É—á–∞—é—â–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ {categories_processed} –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—É—á–∞—é—â–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫: {e}")
        raise

def load_tests_from_cards():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç—ã –∏–∑ –ø–∞–ø–æ–∫ cards"""
    logger.info("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç—ã –∏–∑ –ø–∞–ø–æ–∫ cards...")
    
    try:
        cards_dir = Path(__file__).parent.parent / 'cards'
        if not cards_dir.exists():
            logger.error(f"‚ùå –ü–∞–ø–∫–∞ cards –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {cards_dir}")
            return
        
        total_tests = 0
        
        for category_dir in cards_dir.iterdir():
            if category_dir.is_dir() and not category_dir.name.startswith('.'):
                logger.info(f"üìÅ –ò—â–µ–º —Ç–µ—Å—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category_dir.name}")
                
                # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å —Ç–µ—Å—Ç–∞–º–∏
                for file_path in category_dir.glob('*.json'):
                    if 'test' in file_path.name.lower():
                        test_data = safe_json_load(file_path)
                        if test_data:
                            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤
                            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å—á–∏—Ç–∞–µ–º
                            if isinstance(test_data, list):
                                total_tests += len(test_data)
                            elif isinstance(test_data, dict):
                                total_tests += 1
                            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ç–µ—Å—Ç: {file_path.name}")
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {total_tests} —Ç–µ—Å—Ç–æ–≤ –≤ –ø–∞–ø–∫–∞—Ö cards")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Å—Ç–æ–≤: {e}")
        raise

def load_virtual_patients():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤"""
    logger.info("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç—ã
        existing_patients = VirtualPatientScenario.query.count()
        if existing_patients > 0:
            logger.info(f"‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç ({existing_patients} –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤)")
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ virtual_patient
        vp_dir = Path(__file__).parent.parent / 'cards' / 'virtual_patient'
        if not vp_dir.exists():
            logger.error(f"‚ùå –ü–∞–ø–∫–∞ virtual_patient –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {vp_dir}")
            return
        
        total_patients = 0
        for file_path in vp_dir.glob('*.json'):
            patient_data = safe_json_load(file_path)
            if patient_data:
                try:
                    patient = VirtualPatientScenario(**patient_data)
                    db.session.add(patient)
                    total_patients += 1
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–∞—Ü–∏–µ–Ω—Ç: {patient_data.get('name', 'Unknown')}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞: {e}")
                    continue
        
        db.session.commit()
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {total_patients} –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤: {e}")
        db.session.rollback()
        raise

def load_achievements():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
    logger.info("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        existing_achievements = Achievement.query.count()
        if existing_achievements > 0:
            logger.info(f"‚úÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç ({existing_achievements} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π)")
            return
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        achievements_data = [
            {
                'name': 'first_steps',
                'title': '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
                'description': '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫',
                'category': 'learning',
                'points': 10,
                'icon': 'üéØ'
            },
            {
                'name': 'dedicated_student',
                'title': '–ü—Ä–µ–¥–∞–Ω–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç',
                'description': '–ó–∞–≤–µ—Ä—à–∏—Ç–µ 10 —É—Ä–æ–∫–æ–≤',
                'category': 'learning',
                'points': 50,
                'icon': 'üìö'
            },
            {
                'name': 'time_master',
                'title': '–ú–∞—Å—Ç–µ—Ä –≤—Ä–µ–º–µ–Ω–∏',
                'description': '–ü–æ—Ç—Ä–∞—Ç—å—Ç–µ 10 —á–∞—Å–æ–≤ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ',
                'category': 'time',
                'points': 100,
                'icon': '‚è∞'
            }
        ]
        
        for achievement_data in achievements_data:
            try:
                achievement = Achievement(**achievement_data)
                db.session.add(achievement)
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {achievement_data['title']}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è {achievement_data['title']}: {e}")
                continue
        
        db.session.commit()
        logger.info("‚úÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {e}")
        db.session.rollback()
        raise

def create_admin_user():
    """–°–æ–∑–¥–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    logger.info("üîÑ –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        admin = User.query.filter_by(email='admin@mentora.com').first()
        if admin:
            logger.info("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        admin = User(
            email='admin@mentora.com',
            username='admin',
            first_name='Admin',
            last_name='User',
            is_active=True
        )
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
        admin.set_password('admin123')
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ –∞—Ç—Ä–∏–±—É—Ç
        admin._is_admin = True
        
        db.session.add(admin)
        db.session.commit()
        logger.info("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        db.session.rollback()
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        logger.warning("‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

def create_learning_structure():
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞–ø–æ–∫ cards"""
    logger.info("üîÑ –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—É—á–µ–Ω–∏—è...")
    
    try:
        cards_dir = Path(__file__).parent.parent / 'cards'
        if not cards_dir.exists():
            logger.error(f"‚ùå –ü–∞–ø–∫–∞ cards –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {cards_dir}")
            return
        
        # –ú–∞–ø–ø–∏–Ω–≥ –ø–∞–ø–æ–∫ –∫ –ø—É—Ç—è–º –æ–±—É—á–µ–Ω–∏—è
        folder_to_path = {
            'anatomy': 'basic_medical_sciences',
            'saliva': 'basic_medical_sciences',
            'caries': 'thk_1',
            'endodontic': 'thk_1',
            'pediatric': 'thk_1',
            'periodontic': 'thk_1',
            'statistics': 'statistics',
            'Methodology': 'research_methodology',
            'virtual_patient': 'communication_ethics'
        }
        
        for folder_name, path_id in folder_to_path.items():
            folder_path = cards_dir / folder_name
            if not folder_path.exists():
                logger.warning(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ {folder_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                continue
            
            logger.info(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–ø–∫—É {folder_name} –¥–ª—è –ø—É—Ç–∏ {path_id}")
            
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º Session.get() –≤–º–µ—Å—Ç–æ Query.get()
                learning_path = db.session.get(LearningPath, path_id)
                if not learning_path:
                    logger.warning(f"‚ö†Ô∏è –ü—É—Ç—å –æ–±—É—á–µ–Ω–∏—è {path_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
                subject = Subject.query.filter_by(
                    name=folder_name.replace('_', ' ').title(),
                    learning_path_id=learning_path.id
                ).first()
                
                if not subject:
                    subject = Subject(
                        name=folder_name.replace('_', ' ').title(),
                        description=f"Subject for {folder_name}",
                        learning_path_id=learning_path.id,
                        order=1
                    )
                    db.session.add(subject)
                    db.session.flush()
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: {subject.name}")
                
                # –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ —Ç–µ—Å—Ç–æ–≤
                learning_module = Module.query.filter_by(
                    title=f"Learning Cards {subject.name}",
                    subject_id=subject.id
                ).first()
                
                if not learning_module:
                    learning_module = Module(
                        title=f"Learning Cards {subject.name}",
                        description=f"Learning materials for {subject.name}",
                        subject_id=subject.id,
                        order=1,
                        module_type='learning_cards'
                    )
                    db.session.add(learning_module)
                    db.session.flush()
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –º–æ–¥—É–ª—å: Learning Cards {subject.name}")
                
                test_module = Module.query.filter_by(
                    title=f"Tests {subject.name}",
                    subject_id=subject.id
                ).first()
                
                if not test_module:
                    test_module = Module(
                        title=f"Tests {subject.name}",
                        description=f"Tests for {subject.name}",
                        subject_id=subject.id,
                        order=2,
                        module_type='tests'
                    )
                    db.session.add(test_module)
                    db.session.flush()
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –º–æ–¥—É–ª—å: Tests {subject.name}")
                
                # –°–æ–∑–¥–∞–µ–º —É—Ä–æ–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–π–ª–æ–≤
                for file_path in folder_path.iterdir():
                    if file_path.is_file():
                        file_name = file_path.stem
                        file_ext = file_path.suffix
                        
                        if file_ext in ['.json', '.txt']:
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                            if 'test' in file_name.lower():
                                module = test_module
                                lesson_type = 'test'
                            else:
                                module = learning_module
                                lesson_type = 'learning_card'
                            
                            # –°–æ–∑–¥–∞–µ–º —É—Ä–æ–∫
                            lesson = Lesson.query.filter_by(
                                title=file_name.replace('_', ' ').title(),
                                module_id=module.id
                            ).first()
                            
                            if not lesson:
                                lesson = Lesson(
                                    title=file_name.replace('_', ' ').title(),
                                    content=f"Content from file {file_path.name}",
                                    content_type=lesson_type,
                                    module_id=module.id,
                                    order=len(Lesson.query.filter_by(module_id=module.id).all()) + 1
                                )
                                db.session.add(lesson)
                                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —É—Ä–æ–∫: {lesson.title}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–ø–∫–∏ {folder_name}: {e}")
                continue
        
        db.session.commit()
        logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–±—É—á–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ–±—É—á–µ–Ω–∏—è: {e}")
        db.session.rollback()
        raise

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è production...")
    
    try:
        with app.app_context():
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            db.create_all()
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            load_bi_toets_structure()
            load_domains()
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–±—É—á–µ–Ω–∏—è
            create_learning_structure()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            load_questions()
            load_learning_cards()
            load_tests_from_cards()
            load_virtual_patients()
            load_achievements()
            
            # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            create_admin_user()
            
            logger.info("üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
