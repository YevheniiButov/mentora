#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import app
from extensions import db
from models import User, PersonalLearningPlan, DiagnosticSession
from datetime import datetime, timezone
import json

def test_updated_planner():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
    
    with app.app_context():
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Demo Gebruiker (ID: 6)
        user = User.query.get(6)
        if not user:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Demo Gebruiker –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get_display_name()} (ID: {user.id})")
        print("-" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω
        active_plan = PersonalLearningPlan.query.filter_by(
            user_id=user.id,
            status='active'
        ).first()
        
        if not active_plan:
            print("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"üìã –ê–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω: ID {active_plan.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞
        print(f"\nüìä –î–ê–ù–ù–´–ï –ü–õ–ê–ù–ê:")
        print("-" * 30)
        
        if active_plan.domain_analysis:
            try:
                domain_analysis = json.loads(active_plan.domain_analysis)
                print(f"‚úÖ Domain analysis: {len(domain_analysis)} –¥–æ–º–µ–Ω–æ–≤")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–æ–º–µ–Ω–æ–≤
                for i, (domain_name, domain_data) in enumerate(domain_analysis.items()):
                    if i >= 5:
                        print(f"   ... –∏ –µ—â–µ {len(domain_analysis) - 5} –¥–æ–º–µ–Ω–æ–≤")
                        break
                    print(f"   ‚Ä¢ {domain_name}: {domain_data.get('score', 0)}% ({domain_data.get('hours', 0)} —á)")
                
            except json.JSONDecodeError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ domain_analysis: {e}")
        else:
            print("‚ùå Domain analysis –ø—É—Å—Ç–æ–π")
        
        if active_plan.weak_domains:
            try:
                weak_domains = json.loads(active_plan.weak_domains)
                print(f"‚ö†Ô∏è Weak domains: {len(weak_domains)} –¥–æ–º–µ–Ω–æ–≤")
                for domain in weak_domains[:5]:
                    print(f"   ‚Ä¢ {domain}")
                if len(weak_domains) > 5:
                    print(f"   ... –∏ –µ—â–µ {len(weak_domains) - 5} –¥–æ–º–µ–Ω–æ–≤")
            except json.JSONDecodeError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ weak_domains: {e}")
        else:
            print("‚ùå Weak domains –ø—É—Å—Ç–æ–π")
        
        if active_plan.study_schedule:
            try:
                study_schedule = json.loads(active_plan.study_schedule)
                print(f"üìÖ Study schedule: {study_schedule.get('total_weeks', 0)} –Ω–µ–¥–µ–ª—å")
                print(f"   ‚Ä¢ Total hours: {study_schedule.get('total_hours', 0)}")
                print(f"   ‚Ä¢ Weekly schedule: {len(study_schedule.get('weekly_schedule', []))} –Ω–µ–¥–µ–ª—å")
            except json.JSONDecodeError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ study_schedule: {e}")
        else:
            print("‚ùå Study schedule –ø—É—Å—Ç–æ–π")
        
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–õ–ê–ù–ê:")
        print("-" * 30)
        print(f"üìä –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {active_plan.overall_progress:.1f}%")
        print(f"üéØ –¢–µ–∫—É—â–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {active_plan.current_ability:.2f}")
        print(f"üìà –û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {active_plan.estimated_readiness:.1%}")
        print(f"üìÖ –î–∞—Ç–∞ —ç–∫–∑–∞–º–µ–Ω–∞: {active_plan.exam_date}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        print(f"\nüîÑ –°–ò–ú–£–õ–Ø–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê:")
        print("-" * 40)
        
        diagnostic_results = {
            'overall_score': active_plan.current_ability,
            'domains': []
        }
        
        if active_plan.domain_analysis:
            try:
                domain_analysis = json.loads(active_plan.domain_analysis)
                
                for domain_name, domain_data in domain_analysis.items():
                    domain_result = {
                        'code': domain_data.get('domain_code', 'unknown'),
                        'name': domain_name,
                        'score': domain_data.get('score', 0),
                        'target': domain_data.get('target', 85),
                        'hours': domain_data.get('hours', 24.0),
                        'questions_answered': domain_data.get('questions_answered', 0),
                        'correct_answers': domain_data.get('correct_answers', 0)
                    }
                    diagnostic_results['domains'].append(domain_result)
                
                print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–ª–∞–Ω–∞: {len(diagnostic_results['domains'])} –¥–æ–º–µ–Ω–æ–≤")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                total_hours = sum(d['hours'] for d in diagnostic_results['domains'])
                weak_domains = [d for d in diagnostic_results['domains'] if d['score'] < 70]
                strong_domains = [d for d in diagnostic_results['domains'] if d['score'] >= 70]
                
                print(f"‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {total_hours:.1f} —á–∞—Å–æ–≤")
                print(f"‚ö†Ô∏è –°–ª–∞–±—ã—Ö –¥–æ–º–µ–Ω–æ–≤: {len(weak_domains)}")
                print(f"‚úÖ –°–∏–ª—å–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤: {len(strong_domains)}")
                
                if weak_domains:
                    print(f"\n‚ö†Ô∏è –°–õ–ê–ë–´–ï –î–û–ú–ï–ù–´ (–ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ):")
                    for domain in weak_domains[:5]:
                        print(f"   ‚Ä¢ {domain['name']}: {domain['score']}% ({domain['hours']:.1f} —á)")
                    if len(weak_domains) > 5:
                        print(f"   ... –∏ –µ—â–µ {len(weak_domains) - 5} –¥–æ–º–µ–Ω–æ–≤")
                
            except json.JSONDecodeError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        else:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ø–ª–∞–Ω–µ")
        
        print(f"\n‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
        print("–¢–µ–ø–µ—Ä—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–ª–∞–Ω–∞.")

if __name__ == "__main__":
    test_updated_planner() 