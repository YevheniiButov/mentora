#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º –ø–ª–∞–Ω–æ–º
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import app
from extensions import db
from models import User, PersonalLearningPlan, DiagnosticSession
from utils.daily_learning_algorithm import DailyLearningAlgorithm
from utils.learning_plan_generator import LearningPlanGenerator
from datetime import datetime, timezone, timedelta
import json

def fix_learning_planner_sync():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–±—É—á–µ–Ω–∏—è —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º –ø–ª–∞–Ω–æ–º"""
    
    with app.app_context():
        print("üîß –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê –û–ë–£–ß–ï–ù–ò–Ø")
        print("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Demo Gebruiker (ID: 6)
        user = User.query.get(6)
        if not user:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Demo Gebruiker –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get_display_name()} (ID: {user.id})")
        print("-" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω
        active_plan = PersonalLearningPlan.query.filter_by(
            user_id=user.id,
            status='active'
        ).first()
        
        if not active_plan:
            print("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"üìã –ê–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω: ID {active_plan.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        latest_diagnostic = DiagnosticSession.query.filter_by(
            user_id=user.id,
            status='completed'
        ).order_by(DiagnosticSession.completed_at.desc()).first()
        
        if not latest_diagnostic:
            print("‚ùå –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        print(f"üî¨ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: ID {latest_diagnostic.id}")
        
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–ª–∞–Ω–æ–≤
        generator = LearningPlanGenerator(user_id=user.id)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        print("\nüîÑ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ù–û–í–û–ì–û –ü–õ–ê–ù–ê:")
        print("-" * 30)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            diagnostic_data = {
                'session_id': latest_diagnostic.id,
                'overall_score': latest_diagnostic.current_ability,
                'domain_scores': {},
                'weak_domains': [],
                'strong_domains': []
            }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            if latest_diagnostic.session_data:
                session_data = json.loads(latest_diagnostic.session_data)
                print(f"   üìÑ Session data: {session_data}")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            responses = latest_diagnostic.responses.all()
            print(f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤: {len(responses)}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ –¥–æ–º–µ–Ω–∞–º
            domain_stats = {}
            for response in responses:
                if response.question and response.question.big_domain:
                    domain_name = response.question.big_domain.name
                    if domain_name not in domain_stats:
                        domain_stats[domain_name] = {
                            'total': 0,
                            'correct': 0,
                            'score': 0.0
                        }
                    
                    domain_stats[domain_name]['total'] += 1
                    if response.is_correct:
                        domain_stats[domain_name]['correct'] += 1
                    
                    domain_stats[domain_name]['score'] = (
                        domain_stats[domain_name]['correct'] / 
                        domain_stats[domain_name]['total'] * 100
                    )
            
            print(f"   üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–º–µ–Ω–∞–º:")
            for domain, stats in domain_stats.items():
                print(f"      ‚Ä¢ {domain}: {stats['correct']}/{stats['total']} ({stats['score']:.1f}%)")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–∞–±—ã–µ –¥–æ–º–µ–Ω—ã (score < 70%)
            weak_domains = [
                domain for domain, stats in domain_stats.items() 
                if stats['score'] < 70.0
            ]
            
            print(f"   ‚ö†Ô∏è –°–ª–∞–±—ã–µ –¥–æ–º–µ–Ω—ã: {weak_domains}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω
            print("\nüìù –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–õ–ê–ù–ê:")
            print("-" * 25)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º domain_analysis
            updated_domain_analysis = {}
            for domain, stats in domain_stats.items():
                updated_domain_analysis[domain] = {
                    'domain_code': f'domain_{list(domain_stats.keys()).index(domain) + 1}',
                    'score': stats['score'],
                    'questions_answered': stats['total'],
                    'correct_answers': stats['correct'],
                    'accuracy': stats['score'],
                    'target': 85,
                    'hours': 24.0 if stats['score'] < 70.0 else 8.0
                }
            
            active_plan.domain_analysis = json.dumps(updated_domain_analysis)
            print(f"   ‚úÖ Domain analysis –æ–±–Ω–æ–≤–ª–µ–Ω")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º weak_domains
            active_plan.weak_domains = json.dumps(weak_domains)
            print(f"   ‚úÖ Weak domains –æ–±–Ω–æ–≤–ª–µ–Ω: {len(weak_domains)} –¥–æ–º–µ–Ω–æ–≤")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º study_schedule
            if active_plan.exam_date:
                exam_date = active_plan.exam_date
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã —ç–∫–∑–∞–º–µ–Ω–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ 6 –º–µ—Å—è—Ü–µ–≤
                exam_date = datetime.now(timezone.utc).date() + timedelta(days=180)
                active_plan.exam_date = exam_date
                print(f"   üìÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ —ç–∫–∑–∞–º–µ–Ω–∞: {exam_date}")
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è
            study_schedule = generator._create_study_schedule(weak_domains, exam_date)
            active_plan.study_schedule = json.dumps(study_schedule)
            print(f"   ‚úÖ Study schedule –æ–±–Ω–æ–≤–ª–µ–Ω")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            total_domains = len(domain_stats)
            completed_domains = len([d for d, s in domain_stats.items() if s['score'] >= 70.0])
            active_plan.overall_progress = (completed_domains / total_domains) * 100 if total_domains > 0 else 0
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
            active_plan.current_ability = latest_diagnostic.current_ability
            active_plan.estimated_readiness = latest_diagnostic.current_ability / 100.0
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            db.session.commit()
            print(f"   üíæ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
            print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print("-" * 30)
            print(f"   üìà –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {active_plan.overall_progress:.1f}%")
            print(f"   üéØ –¢–µ–∫—É—â–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {active_plan.current_ability:.2f}")
            print(f"   üìä –û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {active_plan.estimated_readiness:.1%}")
            print(f"   ‚ö†Ô∏è –°–ª–∞–±—ã—Ö –¥–æ–º–µ–Ω–æ–≤: {len(weak_domains)}")
            print(f"   üìÖ –î–∞—Ç–∞ —ç–∫–∑–∞–º–µ–Ω–∞: {active_plan.exam_date}")
            
            print(f"\n‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
            print("–¢–µ–ø–µ—Ä—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞–Ω –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ.")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            db.session.rollback()

if __name__ == "__main__":
    fix_learning_planner_sync() 