import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import app
from extensions import db
from models import Lesson, Module, Subject
import numpy as np

def set_lesson_difficulties():
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å —É—Ä–æ–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –ø–æ–∑–∏—Ü–∏–∏ –≤ –º–æ–¥—É–ª—è—Ö"""
    with app.app_context():
        # –ë–∞–∑–æ–≤–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø–∞–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        subject_base_difficulty = {
            'anatomy': -0.5,      # –ë–∞–∑–æ–≤–∞—è –∞–Ω–∞—Ç–æ–º–∏—è - –ø—Ä–æ—â–µ
            'physiology': 0.0,    # –§–∏–∑–∏–æ–ª–æ–≥–∏—è - —Å—Ä–µ–¥–Ω—è—è
            'pathology': 0.5,     # –ü–∞—Ç–æ–ª–æ–≥–∏—è - —Å–ª–æ–∂–Ω–µ–µ
            'pharmacology': 0.3,  # –§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è - –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π
            'biochemistry': 0.7,  # –ë–∏–æ—Ö–∏–º–∏—è - —Å–ª–æ–∂–Ω–∞—è
            'microbiology': 0.2,  # –ú–∏–∫—Ä–æ–±–∏–æ–ª–æ–≥–∏—è - —á—É—Ç—å –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π
            'clinical': 0.4,      # –ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã - —Å–ª–æ–∂–Ω—ã–µ
            'preventive': -0.2,   # –ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ - –ø—Ä–æ—â–µ
            'ethics': -0.3,       # –≠—Ç–∏–∫–∞ - –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–∞—è
            'communication': -0.4, # –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è - –ø—Ä–æ—Å—Ç–∞—è
        }
        
        lessons_updated = 0
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Ä–æ–∫–∏ —Å –∏—Ö –º–æ–¥—É–ª—è–º–∏
        lessons = Lesson.query.join(Module).join(Subject).all()
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(lessons)} —É—Ä–æ–∫–æ–≤ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")
        print("=" * 60)
        
        for i, lesson in enumerate(lessons, 1):
            module = lesson.module
            subject = module.subject
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø—É –ø—Ä–µ–¥–º–µ—Ç–∞
            subject_type = 'clinical'  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            subject_name_lower = subject.name.lower()
            
            for key in subject_base_difficulty:
                if key in subject_name_lower:
                    subject_type = key
                    break
            
            base_difficulty = subject_base_difficulty.get(subject_type, 0.0)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–∑–∏—Ü–∏–∏ —É—Ä–æ–∫–∞ –≤ –º–æ–¥—É–ª–µ
            module_lessons = Lesson.query.filter_by(module_id=module.id).order_by(Lesson.order).all()
            lesson_position = next((i for i, l in enumerate(module_lessons) if l.id == lesson.id), 0)
            total_lessons = len(module_lessons)
            
            if total_lessons > 0:
                # –ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–Ω—É—Ç—Ä–∏ –º–æ–¥—É–ª—è (–æ—Ç -0.3 –¥–æ +0.3)
                position_factor = (lesson_position / total_lessons) * 0.6 - 0.3
            else:
                position_factor = 0.0
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–∑–∏—Ü–∏–∏ –º–æ–¥—É–ª—è –≤ –ø—Ä–µ–¥–º–µ—Ç–µ
            subject_modules = Module.query.filter_by(subject_id=subject.id).order_by(Module.order).all()
            module_position = next((i for i, m in enumerate(subject_modules) if m.id == module.id), 0)
            total_modules = len(subject_modules)
            
            if total_modules > 0:
                # –ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏ (–æ—Ç -0.2 –¥–æ +0.2)
                module_factor = (module_position / total_modules) * 0.4 - 0.2
            else:
                module_factor = 0.0
            
            # –ò—Ç–æ–≥–æ–≤–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
            difficulty = base_difficulty + position_factor + module_factor
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Å–ª—É—á–∞–π–Ω—É—é –≤–∞—Ä–∏–∞—Ü–∏—é
            difficulty += np.random.normal(0, 0.1)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω [-2.5, 2.5]
            difficulty = np.clip(difficulty, -2.5, 2.5)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–∫
            lesson.difficulty = round(difficulty, 2)
            lessons_updated += 1
            
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤—ã—Ö 10 —É—Ä–æ–∫–∞—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if i <= 10:
                print(f"[{i:3d}] –£—Ä–æ–∫ '{lesson.title[:30]}...'")
                print(f"     –ü—Ä–µ–¥–º–µ—Ç: {subject.name} (—Ç–∏–ø: {subject_type})")
                print(f"     –ú–æ–¥—É–ª—å: {module.title}")
                print(f"     –ü–æ–∑–∏—Ü–∏—è –≤ –º–æ–¥—É–ª–µ: {lesson_position + 1}/{total_lessons}")
                print(f"     –ü–æ–∑–∏—Ü–∏—è –º–æ–¥—É–ª—è: {module_position + 1}/{total_modules}")
                print(f"     –°–ª–æ–∂–Ω–æ—Å—Ç—å: {lesson.difficulty:.2f} (–±–∞–∑–æ–≤–∞—è: {base_difficulty:.2f}, –ø–æ–∑–∏—Ü–∏—è: {position_factor:.2f}, –º–æ–¥—É–ª—å: {module_factor:.2f})")
                print("-" * 40)
            
            if lessons_updated % 100 == 0:
                print(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {lessons_updated} —É—Ä–æ–∫–æ–≤...")
                db.session.commit()
        
        db.session.commit()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\n‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è {lessons_updated} —É—Ä–æ–∫–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        difficulty_stats = db.session.query(
            db.func.min(Lesson.difficulty).label('min'),
            db.func.max(Lesson.difficulty).label('max'),
            db.func.avg(Lesson.difficulty).label('avg'),
            db.func.count(Lesson.id).label('count')
        ).first()
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:")
        print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {difficulty_stats.min:.2f}")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {difficulty_stats.max:.2f}")
        print(f"   –°—Ä–µ–¥–Ω—è—è: {difficulty_stats.avg:.2f}")
        print(f"   –í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤: {difficulty_stats.count}")
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º
        ranges = [
            ('–û—á–µ–Ω—å –ª–µ–≥–∫–∏–µ', -2.5, -1.5),
            ('–õ–µ–≥–∫–∏–µ', -1.5, -0.5),
            ('–°—Ä–µ–¥–Ω–∏–µ', -0.5, 0.5),
            ('–°–ª–æ–∂–Ω—ã–µ', 0.5, 1.5),
            ('–û—á–µ–Ω—å —Å–ª–æ–∂–Ω—ã–µ', 1.5, 2.5)
        ]
        
        print("\nüìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:")
        for name, min_val, max_val in ranges:
            count = Lesson.query.filter(
                Lesson.difficulty >= min_val,
                Lesson.difficulty < max_val
            ).count()
            percentage = (count / difficulty_stats.count * 100) if difficulty_stats.count > 0 else 0
            print(f"   {name}: {count} ({percentage:.1f}%)")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
        print("\nüìö –°–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º:")
        subjects = Subject.query.all()
        for subject in subjects:
            subject_lessons = Lesson.query.join(Module).filter(Module.subject_id == subject.id).all()
            if subject_lessons:
                avg_difficulty = sum(l.difficulty for l in subject_lessons) / len(subject_lessons)
                print(f"   {subject.name}: {avg_difficulty:.2f} ({len(subject_lessons)} —É—Ä–æ–∫–æ–≤)")

def validate_lesson_difficulties():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
    with app.app_context():
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –ö–û–†–†–ï–ö–¢–ù–û–°–¢–ò –°–õ–û–ñ–ù–û–°–¢–ò")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–∫–∏ –±–µ–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        lessons_without_difficulty = Lesson.query.filter(Lesson.difficulty.is_(None)).count()
        if lessons_without_difficulty > 0:
            print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {lessons_without_difficulty} —É—Ä–æ–∫–æ–≤ –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")
        else:
            print("‚úÖ –í—Å–µ —É—Ä–æ–∫–∏ –∏–º–µ—é—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π
        lessons_out_of_range = Lesson.query.filter(
            (Lesson.difficulty < -2.5) | (Lesson.difficulty > 2.5)
        ).count()
        
        if lessons_out_of_range > 0:
            print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {lessons_out_of_range} —É—Ä–æ–∫–æ–≤ —Å–æ —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ [-2.5, 2.5]")
        else:
            print("‚úÖ –í—Å–µ —É—Ä–æ–∫–∏ –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Å–ª–æ–∂–Ω–æ—Å—Ç–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é –≤ –º–æ–¥—É–ª—è—Ö
        print("\nüìà –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –º–æ–¥—É–ª—è—Ö:")
        modules = Module.query.limit(5).all()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5 –º–æ–¥—É–ª–µ–π
        
        for module in modules:
            lessons = Lesson.query.filter_by(module_id=module.id).order_by(Lesson.order).all()
            if len(lessons) > 1:
                difficulties = [l.difficulty for l in lessons]
                print(f"   –ú–æ–¥—É–ª—å '{module.title}': {difficulties}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ä–∞—Å—Ç–µ—Ç
                is_increasing = all(difficulties[i] <= difficulties[i+1] for i in range(len(difficulties)-1))
                if is_increasing:
                    print(f"     ‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                else:
                    print(f"     ‚ö†Ô∏è –ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è –Ω–∞—Ä—É—à–µ–Ω–∞")

if __name__ == '__main__':
    print("üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —É—Ä–æ–∫–æ–≤")
    print("=" * 60)
    
    set_lesson_difficulties()
    validate_lesson_difficulties()
    
    print("\nüéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!") 