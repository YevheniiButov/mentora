#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ 20 –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import json
import sys
import os
from datetime import datetime
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import app
from models import Question, BIGDomain, IRTParameters
from extensions import db

def import_new_questions():
    """–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    
    print('üì• –ò–ú–ü–û–†–¢ –ù–û–í–´–• –í–û–ü–†–û–°–û–í –í –ë–ê–ó–£ –î–ê–ù–ù–´–•')
    print('=' * 50)
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
    questions_file = '/Users/evgenijbutov/Desktop/demo/flask-app 2/dental-academy-clean/scripts/questions_export_20250812_020211.json'
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
        with open(questions_file, 'r', encoding='utf-8') as f:
            all_questions = json.load(f)
        
        print(f'üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞')
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã (ID 381-400)
        new_questions = [q for q in all_questions if 381 <= q['id'] <= 400]
        
        print(f'üìã –ù–∞–π–¥–µ–Ω–æ {len(new_questions)} –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞')
        
        with app.app_context():
            imported_count = 0
            skipped_count = 0
            
            for question_data in new_questions:
                question_id = question_data['id']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –≤–æ–ø—Ä–æ—Å —Å —Ç–∞–∫–∏–º ID
                existing_question = Question.query.get(question_id)
                if existing_question:
                    print(f'‚ö†Ô∏è  –í–æ–ø—Ä–æ—Å {question_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º')
                    skipped_count += 1
                    continue
                
                # –ù–∞—Ö–æ–¥–∏–º –¥–æ–º–µ–Ω
                domain_code = question_data['domain']
                domain = BIGDomain.query.filter_by(code=domain_code).first()
                
                if not domain:
                    print(f'‚ùå –î–æ–º–µ–Ω {domain_code} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {question_id}')
                    skipped_count += 1
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
                new_question = Question(
                    id=question_id,
                    text=question_data['text'],
                    options=question_data['options'],
                    correct_answer_index=question_data['correct_answer_index'],
                    correct_answer_text=question_data['correct_answer_text'],
                    explanation=question_data['explanation'],
                    category=question_data['category'],
                    domain=question_data['domain'],
                    difficulty_level=question_data['difficulty_level'],
                    image_url=question_data.get('image_url'),
                    tags=question_data.get('tags'),
                    big_domain_id=domain.id,
                    question_type=question_data.get('question_type', 'multiple_choice'),
                    clinical_context=question_data.get('clinical_context'),
                    learning_objectives=question_data.get('learning_objectives'),
                    created_at=datetime.fromisoformat(question_data['created_at'].replace('Z', '+00:00')),
                    updated_at=datetime.fromisoformat(question_data['updated_at'].replace('Z', '+00:00'))
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                db.session.add(new_question)
                
                # –°–æ–∑–¥–∞–µ–º IRT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                irt_data = question_data.get('irt_parameters')
                if irt_data:
                    irt_params = IRTParameters(
                        question_id=question_id,
                        difficulty=irt_data['difficulty'],
                        discrimination=irt_data['discrimination'],
                        guessing=irt_data['guessing'],
                        calibration_date=datetime.fromisoformat(irt_data['calibration_date'].replace('Z', '+00:00')) if irt_data.get('calibration_date') else None
                    )
                    db.session.add(irt_params)
                
                print(f'‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤–æ–ø—Ä–æ—Å {question_id}: {domain_code}')
                imported_count += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            try:
                db.session.commit()
                print(f'\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–ú–ü–û–†–¢–ê:')
                print(f'   –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {imported_count} –≤–æ–ø—Ä–æ—Å–æ–≤')
                print(f'   –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count} –≤–æ–ø—Ä–æ—Å–æ–≤')
                print(f'   –í—Å–µ–≥–æ: {imported_count + skipped_count} –≤–æ–ø—Ä–æ—Å–æ–≤')
                
                return True
                
            except Exception as e:
                print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}')
                db.session.rollback()
                return False
                
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}')
        return False

def verify_import():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–ø–æ—Ä—Ç–∞"""
    
    print('\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ò–ú–ü–û–†–¢–ê')
    print('=' * 40)
    
    with app.app_context():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –¥–æ–º–µ–Ω—ã
        new_domains = ['COMMUNICATION', 'PRACTICAL_SKILLS', 'STATISTICS', 'TREATMENT_PLANNING']
        
        for domain_code in new_domains:
            domain = BIGDomain.query.filter_by(code=domain_code).first()
            if domain:
                questions_count = Question.query.filter_by(big_domain_id=domain.id).count()
                print(f'   {domain_code}: {questions_count} –≤–æ–ø—Ä–æ—Å–æ–≤')
            else:
                print(f'   {domain_code}: –¥–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω')
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_questions = Question.query.count()
        total_domains = BIGDomain.query.filter_by(is_active=True).count()
        
        print(f'\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:')
        print(f'   –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –ë–î: {total_questions}')
        print(f'   –í—Å–µ–≥–æ –¥–æ–º–µ–Ω–æ–≤: {total_domains}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Å—Ç—ã–µ –¥–æ–º–µ–Ω—ã
        empty_domains = []
        domains_with_questions = []
        
        all_domains = BIGDomain.query.filter_by(is_active=True).all()
        for domain in all_domains:
            questions_count = Question.query.filter_by(big_domain_id=domain.id).count()
            if questions_count == 0:
                empty_domains.append(domain.code)
            else:
                domains_with_questions.append(domain.code)
        
        print(f'\nüìã –ü–£–°–¢–´–ï –î–û–ú–ï–ù–´ ({len(empty_domains)}):')
        for domain_code in empty_domains:
            print(f'   ‚Ä¢ {domain_code}')
        
        if not empty_domains:
            print('   ‚úÖ –ù–µ—Ç –ø—É—Å—Ç—ã—Ö –¥–æ–º–µ–Ω–æ–≤!')

def update_domain_weights():
    """–û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Å–∞ –¥–æ–º–µ–Ω–æ–≤"""
    
    print('\n‚öñÔ∏è  –û–ë–ù–û–í–õ–ï–ù–ò–ï –í–ï–°–û–í –î–û–ú–ï–ù–û–í')
    print('=' * 40)
    
    with app.app_context():
        weight_updates = {
            'COMMUNICATION': 6.0,
            'PRACTICAL_SKILLS': 15.0,
            'STATISTICS': 5.0,
            'TREATMENT_PLANNING': 10.0
        }
        
        updated_count = 0
        
        for domain_code, weight in weight_updates.items():
            domain = BIGDomain.query.filter_by(code=domain_code).first()
            if domain:
                old_weight = domain.weight_percentage
                domain.weight_percentage = weight
                print(f'   {domain_code}: {old_weight}% -> {weight}%')
                updated_count += 1
        
        try:
            db.session.commit()
            print(f'\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤–µ—Å–æ–≤: {updated_count}')
            return True
        except Exception as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–µ—Å–æ–≤: {e}')
            db.session.rollback()
            return False

if __name__ == '__main__':
    print('üöÄ –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤...')
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã
    import_success = import_new_questions()
    
    if import_success:
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å–∞ –¥–æ–º–µ–Ω–æ–≤
        weight_success = update_domain_weights()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        verify_import()
        
        if weight_success:
            print('\n‚úÖ –ò–º–ø–æ—Ä—Ç –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!')
        else:
            print('\n‚ö†Ô∏è  –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤ –Ω–µ —É–¥–∞–ª–æ—Å—å!')
    else:
        print('\n‚ùå –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏!')


