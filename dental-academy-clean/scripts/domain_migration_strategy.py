#!/usr/bin/env python3
"""
–°—Ç—Ä–∞—Ç–µ–≥–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö (29‚Üí30 –¥–æ–º–µ–Ω–æ–≤)
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –¥–æ–º–µ–Ω—ã –∏ —Å–æ–∑–¥–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import app
from models import db, BIGDomain, Question, DiagnosticResponse, PersonalLearningPlan
import json
from collections import defaultdict

def create_migration_strategy():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–æ–º–µ–Ω–æ–≤"""
    
    with app.app_context():
        print("üîß –°–¢–†–ê–¢–ï–ì–ò–Ø –ú–ò–ì–†–ê–¶–ò–ò –î–û–ú–ï–ù–û–í")
        print("=" * 50)
        
        # 1. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        print("\n1. –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ï–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø:")
        
        domains = BIGDomain.query.all()
        domain_map = {d.code: d for d in domains}
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–æ–º–µ–Ω–æ–≤
        expected_domains = set(BIGDomain.DOMAIN_CODES.keys())
        existing_domains = set(domain_map.keys())
        missing_domains = expected_domains - existing_domains
        
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–µ –¥–æ–º–µ–Ω—ã: {len(expected_domains)}")
        print(f"   –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–æ–º–µ–Ω—ã: {len(existing_domains)}")
        print(f"   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–æ–º–µ–Ω—ã: {list(missing_domains)}")
        
        # 2. –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–ª–∞–Ω–∞—Ö –æ–±—É—á–µ–Ω–∏—è
        print("\n2. –ê–ù–ê–õ–ò–ó –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –í –ü–õ–ê–ù–ê–• –û–ë–£–ß–ï–ù–ò–Ø:")
        
        plans = PersonalLearningPlan.query.all()
        domain_variations = defaultdict(set)
        
        for plan in plans:
            if plan.domain_analysis:
                try:
                    analysis = plan.get_domain_analysis()
                    if analysis:
                        for domain_code in analysis.keys():
                            domain_variations[domain_code].add(domain_code)
                except:
                    pass
        
        # –í—ã—è–≤–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–π –Ω–∞–∑–≤–∞–Ω–∏–π –¥–æ–º–µ–Ω–æ–≤
        print("   –í–∞—Ä–∏–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–æ–º–µ–Ω–æ–≤:")
        for base_domain, variations in domain_variations.items():
            if len(variations) > 1:
                print(f"     {base_domain}: {list(variations)}")
        
        # 3. –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏
        print("\n3. –ö–ê–†–¢–ê –ú–ò–ì–†–ê–¶–ò–ò:")
        
        migration_map = {
            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –¥–æ–º–µ–Ω–æ–≤
            'PHARMA': 'PHARMACOLOGY',  # PHARMA ‚Üí PHARMACOLOGY
            'FARMACOLOGIE': 'PHARMACOLOGY',  # FARMACOLOGIE ‚Üí PHARMACOLOGY
            'DIAGNOSIS_SPECIAL': 'DIAGNOSIS',  # DIAGNOSIS_SPECIAL ‚Üí DIAGNOSIS
            
            # –°—Ç–∞—Ä—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è ‚Üí –Ω–æ–≤—ã–µ –∫–æ–¥—ã
            'Caries': 'THER',
            'Endodontics': 'THER', 
            'Periodontics': 'PARO',
            'Anatomy': 'ANATOMIE',
            'Pharmacology': 'PHARMACOLOGY',
            'Diagnostics': 'DIAGNOSIS',
            'Surgery': 'SURG',
            'Emergency': 'EMERGENCY',
            
            # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è ‚Üí –∫–æ–¥—ã
            '–¢–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è': 'THER',
            '–•–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è': 'SURG',
            '–û—Ä—Ç–æ–ø–µ–¥–∏—á–µ—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è': 'PROTH',
            '–î–µ—Ç—Å–∫–∞—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è': 'PEDI',
            '–ü–∞—Ä–æ–¥–æ–Ω—Ç–æ–ª–æ–≥–∏—è': 'PARO',
            '–û—Ä—Ç–æ–¥–æ–Ω—Ç–∏—è': 'ORTHO',
            '–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞': 'PREV',
            '–≠—Ç–∏–∫–∞ –∏ –ø—Ä–∞–≤–æ': 'ETHIEK',
            '–ê–Ω–∞—Ç–æ–º–∏—è': 'ANATOMIE',
            '–§–∏–∑–∏–æ–ª–æ–≥–∏—è': 'FYSIOLOGIE',
            '–ü–∞—Ç–æ–ª–æ–≥–∏—è': 'PATHOLOGIE',
            '–ú–∏–∫—Ä–æ–±–∏–æ–ª–æ–≥–∏—è': 'MICROBIOLOGIE',
            '–ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤–µ–¥–µ–Ω–∏–µ': 'MATERIAALKUNDE',
            '–†–µ–Ω—Ç–≥–µ–Ω–æ–ª–æ–≥–∏—è': 'RADIOLOGIE',
            '–û–±—â–∞—è –º–µ–¥–∏—Ü–∏–Ω–∞': 'ALGEMENE_GENEESKUNDE',
            '–ù–µ–æ—Ç–ª–æ–∂–Ω–∞—è –ø–æ–º–æ—â—å': 'EMERGENCY',
            '–°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è': 'SYSTEMIC',
            '–§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è': 'PHARMACOLOGY',
            '–ò–Ω—Ñ–µ–∫—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å': 'INFECTION',
            '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤': 'SPECIAL',
            '–°–ª–æ–∂–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞': 'DIAGNOSIS',
            '–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è': 'DUTCH',
            '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ': 'PROFESSIONAL',
            '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏': 'PRACTICAL_SKILLS',
            '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–µ—á–µ–Ω–∏—è': 'TREATMENT_PLANNING',
            '–ö–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏': 'COMMUNICATION',
            '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö': 'STATISTICS',
            
            # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è ‚Üí –∫–æ–¥—ã
            'Orthodontics': 'ORTHO',
            'Oral Surgery': 'SURG',
            'Prosthodontics': 'PROTH',
            'Preventive Care': 'PREV',
            'Dental Materials': 'MATERIAALKUNDE',
            'Oral Pathology': 'PATHOLOGIE',
            'Oral Medicine': 'ALGEMENE_GENEESKUNDE',
            'Dental Radiology': 'RADIOLOGIE',
            'Dental Anatomy': 'ANATOMIE',
            'Dental Physiology': 'FYSIOLOGIE',
            'Dental Pharmacology': 'PHARMACOLOGY',
            'Dental Anesthesia': 'EMERGENCY',
            'Dental Emergency': 'EMERGENCY',
            'Dental Ethics': 'ETHIEK',
            'Dental Law': 'ETHIEK',
            'Practice Management': 'PROFESSIONAL',
            'Patient Communication': 'COMMUNICATION',
            'Infection Control': 'INFECTION',
            'Dental Implants': 'PROTH',
            'Cosmetic Dentistry': 'PROTH',
            'Pediatric Dentistry': 'PEDI',
            'Geriatric Dentistry': 'SPECIAL',
            'Special Needs Dentistry': 'SPECIAL'
        }
        
        print("   –ö–∞—Ä—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∞:")
        for old_name, new_code in migration_map.items():
            print(f"     {old_name} ‚Üí {new_code}")
        
        # 4. –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
        print("\n4. –ü–õ–ê–ù –ú–ò–ì–†–ê–¶–ò–ò:")
        
        migration_plan = {
            'step_1': {
                'description': '–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –¥–æ–º–µ–Ω–∞ PHARMACOLOGY',
                'actions': [
                    '–°–æ–∑–¥–∞—Ç—å –¥–æ–º–µ–Ω PHARMACOLOGY —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏',
                    '–û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Å domain=PHARMA –Ω–∞ domain=PHARMACOLOGY',
                    '–û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ DiagnosticResponse —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ PHARMA'
                ]
            },
            'step_2': {
                'description': '–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –¥–æ–º–µ–Ω–æ–≤',
                'actions': [
                    '–û–±—ä–µ–¥–∏–Ω–∏—Ç—å PHARMA –∏ FARMACOLOGIE –≤ PHARMACOLOGY',
                    '–û–±—ä–µ–¥–∏–Ω–∏—Ç—å DIAGNOSIS_SPECIAL –≤ DIAGNOSIS',
                    '–û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'
                ]
            },
            'step_3': {
                'description': '–ú–∏–≥—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–æ–≤ –æ–±—É—á–µ–Ω–∏—è',
                'actions': [
                    '–û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ PersonalLearningPlan.domain_analysis',
                    '–ó–∞–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ–º–µ–Ω–æ–≤ –Ω–∞ –∫–æ–¥—ã',
                    '–û–±–µ—Å–ø–µ—á–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö 30 –¥–æ–º–µ–Ω–æ–≤ –≤ –∫–∞–∂–¥–æ–º –ø–ª–∞–Ω–µ'
                ]
            },
            'step_4': {
                'description': '–í–∞–ª–∏–¥–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏',
                'actions': [
                    '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö',
                    '–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ 30 –¥–æ–º–µ–Ω–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç',
                    '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö'
                ]
            }
        }
        
        for step_name, step_info in migration_plan.items():
            print(f"   {step_name.upper()}: {step_info['description']}")
            for action in step_info['actions']:
                print(f"     - {action}")
        
        # 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        strategy_data = {
            'migration_map': migration_map,
            'migration_plan': migration_plan,
            'missing_domains': list(missing_domains),
            'domain_variations': {k: list(v) for k, v in domain_variations.items()},
            'current_domains': {d.code: d.name for d in domains},
            'expected_domains': BIGDomain.DOMAIN_CODES
        }
        
        with open('analysis/domain_migration_strategy.json', 'w', encoding='utf-8') as f:
            json.dump(strategy_data, f, indent=2, ensure_ascii=False)
        
        print(f"\nüìã –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: analysis/domain_migration_strategy.json")
        
        return strategy_data

if __name__ == '__main__':
    create_migration_strategy() 