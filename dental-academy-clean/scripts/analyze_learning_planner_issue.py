#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –æ–±—É—á–µ–Ω–∏—è
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import app
from extensions import db
from models import User, PersonalLearningPlan, DiagnosticSession
from utils.daily_learning_algorithm import DailyLearningAlgorithm
from datetime import datetime, timezone
import json

def analyze_learning_planner_issue():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –æ–±—É—á–µ–Ω–∏—è"""
    
    with app.app_context():
        print("üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ –° –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–û–ú –û–ë–£–ß–ï–ù–ò–Ø")
        print("=" * 70)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Demo Gebruiker (ID: 6)
        user = User.query.get(6)
        if not user:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Demo Gebruiker –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get_display_name()} (ID: {user.id})")
        print("-" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω
        active_plan = PersonalLearningPlan.query.filter_by(
            user_id=user.id,
            status='active'
        ).first()
        
        if not active_plan:
            print("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"üìã –ê–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω: ID {active_plan.id}")
        print(f"   üìÖ –î–∞—Ç–∞ —ç–∫–∑–∞–º–µ–Ω–∞: {active_plan.exam_date}")
        print(f"   üéØ –¶–µ–ª–µ–≤–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {active_plan.target_ability}")
        print(f"   üìä –¢–µ–∫—É—â–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {active_plan.current_ability}")
        print(f"   üìà –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {active_plan.overall_progress:.1f}%")
        print(f"   ‚è∞ –ß–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é: {active_plan.study_hours_per_week}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º domain_analysis
        print(f"\nüîç –ê–ù–ê–õ–ò–ó DOMAIN_ANALYSIS:")
        print("-" * 30)
        
        if active_plan.domain_analysis:
            try:
                domain_data = json.loads(active_plan.domain_analysis)
                print(f"   üìÑ Domain analysis (JSON): {domain_data}")
                
                if isinstance(domain_data, dict):
                    for domain, data in domain_data.items():
                        print(f"   ‚Ä¢ {domain}: {data}")
                elif isinstance(domain_data, list):
                    for item in domain_data:
                        print(f"   ‚Ä¢ {item}")
                        
            except json.JSONDecodeError as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                print(f"   üìÑ –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {active_plan.domain_analysis}")
        else:
            print("   ‚ùå Domain analysis –ø—É—Å—Ç–æ–π")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º weak_domains
        print(f"\n‚ö†Ô∏è –ê–ù–ê–õ–ò–ó WEAK_DOMAINS:")
        print("-" * 30)
        
        if active_plan.weak_domains:
            try:
                weak_domains = json.loads(active_plan.weak_domains)
                print(f"   üìÑ Weak domains (JSON): {weak_domains}")
                
                if isinstance(weak_domains, list):
                    for domain in weak_domains:
                        print(f"   ‚Ä¢ {domain}")
                        
            except json.JSONDecodeError as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                print(f"   üìÑ –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {active_plan.weak_domains}")
        else:
            print("   ‚ùå Weak domains –ø—É—Å—Ç–æ–π")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º study_schedule
        print(f"\nüìÖ –ê–ù–ê–õ–ò–ó STUDY_SCHEDULE:")
        print("-" * 30)
        
        if active_plan.study_schedule:
            try:
                study_schedule = json.loads(active_plan.study_schedule)
                print(f"   üìÑ Study schedule (JSON): {study_schedule}")
                
                if isinstance(study_schedule, dict):
                    for key, value in study_schedule.items():
                        print(f"   ‚Ä¢ {key}: {value}")
                elif isinstance(study_schedule, list):
                    for item in study_schedule:
                        print(f"   ‚Ä¢ {item}")
                        
            except json.JSONDecodeError as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                print(f"   üìÑ –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {active_plan.study_schedule}")
        else:
            print("   ‚ùå Study schedule –ø—É—Å—Ç–æ–π")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        latest_diagnostic = DiagnosticSession.query.filter_by(
            user_id=user.id,
            status='completed'
        ).order_by(DiagnosticSession.completed_at.desc()).first()
        
        if latest_diagnostic:
            print(f"\nüî¨ –ü–û–°–õ–ï–î–ù–Ø–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
            print("-" * 30)
            print(f"   üìÖ –î–∞—Ç–∞: {latest_diagnostic.completed_at.strftime('%Y-%m-%d %H:%M')}")
            print(f"   üìä –í–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç–≤–µ—á–µ–Ω–æ: {latest_diagnostic.questions_answered}")
            print(f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {latest_diagnostic.correct_answers}")
            print(f"   üìà –¢–æ—á–Ω–æ—Å—Ç—å: {(latest_diagnostic.correct_answers/latest_diagnostic.questions_answered*100):.1f}%")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º session_data
            if latest_diagnostic.session_data:
                try:
                    session_data = json.loads(latest_diagnostic.session_data)
                    print(f"   üìÑ Session data: {session_data}")
                except json.JSONDecodeError as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ session_data: {e}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        print(f"\nüìÖ –ï–ñ–ï–î–ù–ï–í–ù–´–ô –ü–õ–ê–ù (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è):")
        print("-" * 40)
        
        try:
            algorithm = DailyLearningAlgorithm()
            daily_plan_result = algorithm.generate_daily_plan(
                user_id=user.id,
                target_minutes=30
            )
            
            if daily_plan_result['success']:
                daily_plan = daily_plan_result['daily_plan']
                
                # –¢–µ–æ—Ä–∏—è
                theory_section = daily_plan['theory_section']
                print(f"üìñ –¢–ï–û–†–ò–Ø ({theory_section['estimated_time']} –º–∏–Ω):")
                if theory_section['content']:
                    for item in theory_section['content']:
                        print(f"   ‚Ä¢ {item['title']} ({item['estimated_time']} –º–∏–Ω, {item['difficulty']})")
                
                # –ü—Ä–∞–∫—Ç–∏–∫–∞
                practice_section = daily_plan['practice_section']
                print(f"\n‚úèÔ∏è –ü–†–ê–ö–¢–ò–ö–ê ({practice_section['estimated_time']} –º–∏–Ω):")
                if practice_section['content']:
                    for item in practice_section['content']:
                        print(f"   ‚Ä¢ {item['title']} ({item['estimated_time']} –º–∏–Ω, {item['difficulty']})")
                
                # –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
                review_section = daily_plan['review_section']
                print(f"\nüîÑ –ü–û–í–¢–û–†–ï–ù–ò–ï ({review_section['estimated_time']} –º–∏–Ω):")
                if review_section['content']:
                    for item in review_section['content']:
                        print(f"   ‚Ä¢ {item['title']} ({item['estimated_time']} –º–∏–Ω)")
                
                print(f"\n‚è±Ô∏è –û–ë–©–ï–ï –í–†–ï–ú–Ø: {daily_plan_result['total_estimated_time']} –º–∏–Ω—É—Ç")
                
                # –°–ª–∞–±—ã–µ –¥–æ–º–µ–Ω—ã
                if daily_plan_result['weak_domains']:
                    print(f"\n‚ö†Ô∏è –°–õ–ê–ë–´–ï –î–û–ú–ï–ù–´ (–∏–∑ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞):")
                    for domain in daily_plan_result['weak_domains']:
                        print(f"   ‚Ä¢ {domain}")
                
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞: {e}")
        
        print(f"\nüîç –í–´–í–û–î–´:")
        print("-" * 20)
        print("1. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–±—É—á–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –¥–æ–º–µ–Ω (–≠–Ω–¥–æ–¥–æ–Ω—Ç–∏—è)")
        print("2. –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞–Ω –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
        print("3. –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ–º, —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞–Ω –Ω–µ —Å–≤—è–∑–∞–Ω—ã")
        print("4. –ù—É–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –º–µ–∂–¥—É —Å–∏—Å—Ç–µ–º–∞–º–∏")

if __name__ == "__main__":
    analyze_learning_planner_issue() 