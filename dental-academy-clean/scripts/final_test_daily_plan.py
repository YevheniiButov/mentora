#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app import app, db
from models import User, SpacedRepetitionItem
from utils.daily_learning_algorithm import DailyLearningAlgorithm
from datetime import datetime, timezone

def final_test():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
    
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ï–ñ–ï–î–ù–ï–í–ù–û–ì–û –ü–õ–ê–ù–ê")
    print("=" * 60)
    
    with app.app_context():
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User.query.first()
        if not user:
            print("   ‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        print(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Spaced Repetition —ç–ª–µ–º–µ–Ω—Ç—ã
        items = SpacedRepetitionItem.query.filter_by(user_id=user.id).all()
        now = datetime.now(timezone.utc)
        overdue = [i for i in items if i.next_review.replace(tzinfo=timezone.utc) < now]
        
        print(f"   üìö –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(overdue)}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞–Ω
        algorithm = DailyLearningAlgorithm()
        daily_plan_result = algorithm.generate_daily_plan(user.id, target_minutes=30)
        
        if daily_plan_result['success']:
            print("   ‚úÖ –ü–ª–∞–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —à–∞–±–ª–æ–Ω–∞
            daily_plan = daily_plan_result['daily_plan']
            
            print(f"\n   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —à–∞–±–ª–æ–Ω–∞:")
            print(f"      daily_plan.review_section.content: {len(daily_plan['review_section']['content'])} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
            review_items = daily_plan['review_section']['content'][:3]
            for i, item in enumerate(review_items):
                print(f"      {i+1}. {item['title'][:50]}... (–î–æ–º–µ–Ω: {item['domain']}, –ü—Ä–æ—Å—Ä–æ—á–µ–Ω: {item['overdue_days']} –¥–Ω–µ–π)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –≤ —à–∞–±–ª–æ–Ω–µ
            has_content = bool(daily_plan.get('review_section', {}).get('content'))
            print(f"\n   üß™ –£—Å–ª–æ–≤–∏–µ –≤ —à–∞–±–ª–æ–Ω–µ:")
            print(f"      daily_plan.review_section.content: {has_content}")
            
            if has_content:
                print("      ‚úÖ –î–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –†–ï–ê–õ–¨–ù–´–ô –∫–æ–Ω—Ç–µ–Ω—Ç (–Ω–µ –∑–∞–≥–ª—É—à–∫–∏)")
            else:
                print("      ‚ùå –ë—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–∞–≥–ª—É—à–∫–∏")
                
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {daily_plan_result['error']}")

if __name__ == "__main__":
    final_test() 