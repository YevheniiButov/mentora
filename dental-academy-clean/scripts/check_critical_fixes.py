#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –±–∞–≥–æ–≤
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from flask import Flask
from extensions import db
from models import User, PersonalLearningPlan, Question, IRTParameters, BIGDomain
from utils.irt_calibration import calibration_service
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def check_personal_plans():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞–Ω—ã –æ–±—É—á–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–æ–≤ –æ–±—É—á–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞–Ω—ã –±–µ–∑ weak_domains
    plans_without_weak_domains = PersonalLearningPlan.query.filter(
        PersonalLearningPlan.status == 'active',
        (PersonalLearningPlan.weak_domains.is_(None) | 
         PersonalLearningPlan.weak_domains == '[]' |
         PersonalLearningPlan.weak_domains == '')
    ).count()
    
    total_active_plans = PersonalLearningPlan.query.filter_by(status='active').count()
    
    print(f"   –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤: {total_active_plans}")
    print(f"   –ü–ª–∞–Ω–æ–≤ –±–µ–∑ weak_domains: {plans_without_weak_domains}")
    
    if plans_without_weak_domains == 0:
        print("   ‚úÖ –í—Å–µ –ø–ª–∞–Ω—ã –∏–º–µ—é—Ç weak_domains")
        return True
    else:
        print(f"   ‚ö†Ô∏è  {plans_without_weak_domains} –ø–ª–∞–Ω–æ–≤ –±–µ–∑ weak_domains")
        return False

def check_irt_parameters():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å IRT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –±–µ–∑ IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    questions_without_irt = db.session.query(Question).outerjoin(IRTParameters).filter(
        IRTParameters.id.is_(None)
    ).count()
    
    total_questions = Question.query.count()
    questions_with_irt = IRTParameters.query.count()
    
    print(f"   –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}")
    print(f"   –í–æ–ø—Ä–æ—Å–æ–≤ —Å IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {questions_with_irt}")
    print(f"   –í–æ–ø—Ä–æ—Å–æ–≤ –±–µ–∑ IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {questions_without_irt}")
    
    coverage_percent = (questions_with_irt / total_questions * 100) if total_questions > 0 else 0
    print(f"   –ü–æ–∫—Ä—ã—Ç–∏–µ IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {coverage_percent:.1f}%")
    
    if coverage_percent >= 95:
        print("   ‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
        return True
    elif coverage_percent >= 80:
        print("   ‚ö†Ô∏è  –•–æ—Ä–æ—à–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ, –Ω–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å")
        return True
    else:
        print("   ‚ùå –ù–∏–∑–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
        return False

def check_duplicate_routes():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—É—Ç–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ—É—Ç–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö —Ä–æ—É—Ç–æ–≤
    route_files = [
        'routes/learning_routes.py',
        'routes/learning_routes_new.py',
        'routes/learning_map_routes.py',
        'app.py'
    ]
    
    duplicate_routes = []
    
    for file_path in route_files:
        if os.path.exists(file_path):
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                if 'learning-map' in content:
                    lines = content.split('\n')
                    for i, line in enumerate(lines):
                        if 'learning-map' in line and '@' in line:
                            duplicate_routes.append(f"{file_path}:{i+1} - {line.strip()}")
    
    print(f"   –ù–∞–π–¥–µ–Ω–æ {len(duplicate_routes)} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π learning-map:")
    for route in duplicate_routes[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
        print(f"     {route}")
    
    if len(duplicate_routes) <= 3:
        print("   ‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—É—Ç–æ–≤")
        return True
    else:
        print("   ‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—É—Ç–æ–≤")
        return False

def run_irt_calibration_test():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞–ª–∏–±—Ä–æ–≤–∫—É IRT"""
    print("\nüîç –¢–µ—Å—Ç–æ–≤–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ IRT...")
    
    try:
        # –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        stats = calibration_service.get_calibration_statistics()
        
        if 'error' in stats:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats['error']}")
            return False
        
        print(f"   –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"     –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {stats['total_questions']}")
        print(f"     –° IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {stats['questions_with_irt']}")
        print(f"     –ë–µ–∑ IRT –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {stats['questions_without_irt']}")
        print(f"     –û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: {stats['overall_coverage_percent']}%")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–æ–º–µ–Ω–∞–º
        print(f"   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–º–µ–Ω–∞–º:")
        for domain_code, domain_stats in list(stats['domain_statistics'].items())[:5]:
            print(f"     {domain_code}: {domain_stats['coverage_percent']}% "
                  f"({domain_stats['with_irt']}/{domain_stats['total_questions']})")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üöÄ –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ë–ê–ì–û–í")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
    app = Flask(__name__)
    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///instance/app.db'
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    
    db.init_app(app)
    
    with app.app_context():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        plan_check = check_personal_plans()
        irt_check = check_irt_parameters()
        route_check = check_duplicate_routes()
        calibration_check = run_irt_calibration_test()
        
        print("\n" + "=" * 50)
        print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"   –ü–ª–∞–Ω—ã –æ–±—É—á–µ–Ω–∏—è: {'‚úÖ' if plan_check else '‚ùå'}")
        print(f"   IRT –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {'‚úÖ' if irt_check else '‚ùå'}")
        print(f"   –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ—É—Ç–æ–≤: {'‚úÖ' if route_check else '‚ùå'}")
        print(f"   –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ IRT: {'‚úÖ' if calibration_check else '‚ùå'}")
        
        all_passed = plan_check and irt_check and route_check and calibration_check
        
        if all_passed:
            print("\nüéâ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ë–ê–ì–ò –ò–°–ü–†–ê–í–õ–ï–ù–´!")
        else:
            print("\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –ü–†–û–ë–õ–ï–ú–´ –û–°–¢–ê–õ–ò–°–¨")
        
        return all_passed

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1) 