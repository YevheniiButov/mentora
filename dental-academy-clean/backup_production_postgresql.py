#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø—Ä–æ–¥–∞–∫—à–Ω PostgreSQL –ë–î
"""
import os
import subprocess
import datetime
import json
from pathlib import Path

def create_backup_directory():
    """–°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤"""
    backup_dir = Path("backups")
    backup_dir.mkdir(exist_ok=True)
    return backup_dir

def get_production_db_config():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–¥–∞–∫—à–Ω –ë–î –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    # –≠—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Å—Ä–µ–¥–µ
    db_host = os.environ.get('DATABASE_HOST', 'localhost')
    db_port = os.environ.get('DATABASE_PORT', '5432')
    db_name = os.environ.get('DATABASE_NAME', 'mentora_production')
    db_user = os.environ.get('DATABASE_USER', 'mentora_user')
    db_password = os.environ.get('DATABASE_PASSWORD')
    
    if not db_password:
        print("‚ùå DATABASE_PASSWORD –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return None
    
    return {
        'host': db_host,
        'port': db_port,
        'name': db_name,
        'user': db_user,
        'password': db_password
    }

def create_postgresql_backup(db_config, backup_dir):
    """–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø PostgreSQL –ë–î"""
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_filename = f"production_postgresql_backup_{timestamp}.sql"
    backup_path = backup_dir / backup_filename
    
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä–æ–ª—è
    env = os.environ.copy()
    env['PGPASSWORD'] = db_config['password']
    
    # –ö–æ–º–∞–Ω–¥–∞ pg_dump
    cmd = [
        'pg_dump',
        '-h', db_config['host'],
        '-p', str(db_config['port']),
        '-U', db_config['user'],
        '-d', db_config['name'],
        '--verbose',
        '--clean',
        '--create',
        '--if-exists',
        '--format=plain',
        '--file', str(backup_path)
    ]
    
    print(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ PostgreSQL –ë–î...")
    print(f"üìÅ –§–∞–π–ª: {backup_path}")
    
    try:
        result = subprocess.run(cmd, env=env, capture_output=True, text=True, check=True)
        print("‚úÖ –ë—ç–∫–∞–ø PostgreSQL —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return backup_path
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
        print(f"stderr: {e.stderr}")
        return None
    except FileNotFoundError:
        print("‚ùå pg_dump –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PostgreSQL client tools")
        return None

def create_backup_metadata(backup_path, db_config):
    """–°–æ–∑–¥–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –±—ç–∫–∞–ø–∞"""
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    metadata_filename = f"backup_metadata_{timestamp}.json"
    metadata_path = backup_path.parent / metadata_filename
    
    metadata = {
        'backup_type': 'postgresql',
        'created_at': datetime.datetime.now().isoformat(),
        'backup_file': backup_path.name,
        'database_config': {
            'host': db_config['host'],
            'port': db_config['port'],
            'name': db_config['name'],
            'user': db_config['user']
        },
        'backup_size_bytes': backup_path.stat().st_size if backup_path.exists() else 0,
        'git_commit': subprocess.check_output(['git', 'rev-parse', 'HEAD']).decode().strip(),
        'git_branch': subprocess.check_output(['git', 'rev-parse', '--abbrev-ref', 'HEAD']).decode().strip()
    }
    
    with open(metadata_path, 'w', encoding='utf-8') as f:
        json.dump(metadata, f, indent=2, ensure_ascii=False)
    
    print(f"‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã: {metadata_path}")
    return metadata_path

def verify_backup(backup_path):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –±—ç–∫–∞–ø–∞"""
    if not backup_path.exists():
        print("‚ùå –§–∞–π–ª –±—ç–∫–∞–ø–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return False
    
    file_size = backup_path.stat().st_size
    if file_size == 0:
        print("‚ùå –§–∞–π–ª –±—ç–∫–∞–ø–∞ –ø—É—Å—Ç–æ–π")
        return False
    
    print(f"‚úÖ –†–∞–∑–º–µ—Ä –±—ç–∫–∞–ø–∞: {file_size:,} –±–∞–π—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç SQL
    try:
        with open(backup_path, 'r', encoding='utf-8') as f:
            first_line = f.readline().strip()
            if 'PostgreSQL database dump' in first_line or '--' in first_line:
                print("‚úÖ –ë—ç–∫–∞–ø —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã–π SQL")
                return True
            else:
                print("‚ùå –ë—ç–∫–∞–ø –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã–π SQL")
                return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üíæ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø—Ä–æ–¥–∞–∫—à–Ω PostgreSQL –ë–î...")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤
    backup_dir = create_backup_directory()
    
    # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ë–î
    db_config = get_production_db_config()
    if not db_config:
        return False
    
    # –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø
    backup_path = create_postgresql_backup(db_config, backup_dir)
    if not backup_path:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±—ç–∫–∞–ø
    if not verify_backup(backup_path):
        print("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—ç–∫–∞–ø–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
        return False
    
    # –°–æ–∑–¥–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    metadata_path = create_backup_metadata(backup_path, db_config)
    
    print("\n" + "=" * 50)
    print("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print(f"üìÅ –ë—ç–∫–∞–ø: {backup_path}")
    print(f"üìÑ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata_path}")
    print(f"üíæ –†–∞–∑–º–µ—Ä: {backup_path.stat().st_size:,} –±–∞–π—Ç")
    
    return True

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
